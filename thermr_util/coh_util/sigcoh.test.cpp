#define CATCH_CONFIG_MAIN
#include "../../catch.hpp"
#include "sigcoh.h"


TEST_CASE( "sigcoh" ){
  std::vector<double> wrk_1_100 (100), s (6, 0.0);
  double e = 0, enext = 0, temp = 296, emax;
  int nl = 1, lat = 1, natom = 1;
 
  GIVEN( "smal value for emax" ){
    emax = 0.05;
    THEN ( "loops ranges are small (~4)" ){
     auto wrk = sigcoh( e, enext, s, nl, lat, temp, emax, natom );
      wrk_1_100= { 8.79447930e15, 0.00000000000, 8.79447930e15, 0.00000000000, 3.51779172e16, 2.09846343e-8, 3.51779172e16, 2.09846343e-8, 7.91503137e16, 0.00000000000, 7.91503137e16, 0.00000000000, 1.40711668e17, 9.99541518e-9, 1.40711668e17, 9.99541518e-9, 2.19861982e17, 0.00000000000, 2.19861982e17, 0.00000000000, 3.16601255e17, 6.14599155e-9, 3.16601255e17, 6.14599155e-9, 4.30929485e17, 0.00000000000, 4.30929485e17, 0.00000000000, 5.62846675e17, 4.11612499e-9, 5.62846675e17, 4.11612499e-9, 7.12352823e17, 0.00000000000, 7.12352823e17, 0.00000000000, 8.79447930e17, 2.84686469e-9, 8.79447930e17, 2.84686469e-9, 8.71730240e16, 1.62695007e-9, 8.71730240e16, 1.62695007e-9, 9.59675033e16, 9.26613353e-9, 9.59675033e16, 9.26613353e-9, 1.22350941e17, 2.70251490e-9, 1.22350941e17, 2.70251490e-9, 1.66323337e17, 6.81454728e-9, 1.66323337e17, 6.81454728e-9, 2.27884692e17, 1.88644264e-9, 2.27884692e17, 1.88644264e-9, 3.07035006e17, 4.70138223e-9, 3.07035006e17, 4.70138223e-9, 4.03774279e17, 1.30711632e-9, 4.03774279e17, 1.30711632e-9, 5.18102510e17, 3.28450946e-9, 5.18102510e17, 3.28450946e-9, 6.50019699e17, 9.1993180e-10, 6.50019699e17, 9.1993180e-10, 7.99525847e17, 2.32313217e-9, 7.99525847e17, 2.32313217e-9, 3.48692096e17, 7.2132348e-10, 3.48692096e17, 7.2132348e-10, 3.57486575e17, 4.25712715e-9, 3.57486575e17, 4.25712715e-9, 3.83870013e17, 1.35289938e-9, 3.83870013e17, 1.35289938e-9, 4.27842409e17, 3.76753700e-9, 4.27842409e17, 3.76753700e-9, 4.89403765e17, 1.14144073e-9, 4.89403765e17, 1.14144073e-9 }; 
      for ( size_t i = 0; i < 100; ++i ){ 
        REQUIRE( wrk_1_100[i] == Approx( wrk[i] ).epsilon(1e-6) );
      }
  
      std::vector<double> wrk_200_265( 65);
      wrk_200_265 = { 1.35671713e-9, 5.78120327e17, 3.22637601e-8, 6.92448558e17, 7.3003180e-38, 8.24365747e17, 2.41267855e-8, 6.10211168e17, 9.6700090e-10, 6.19005647e17, 5.73739854e-9, 6.45389085e17, 1.85038721e-9, 6.89361482e17, 5.26370776e-9, 7.50922837e17, 1.63419997e-9, 8.30073151e17, 4.49637989e-9, 9.26812423e17, 1.35671713e-9, 3.48692096e17, 7.2132348e-10, 3.57486575e17, 4.25712715e-9, 3.83870013e17, 1.35289938e-9, 4.27842409e17, 3.76753700e-9, 4.89403765e17, 1.14144073e-9, 5.68554078e17, 3.06351109e-9, 6.65293351e17, 9.0294814e-10, 7.79621582e17, 2.37422720e-9, 9.11538771e17, 6.8883810e-10, 6.10211168e17, 9.6700090e-10, 6.19005647e17, 5.73739854e-9, 6.45389085e17, 1.85038721e-9, 6.89361482e17, 5.26370776e-9, 7.50922837e17, 1.63419997e-9, 8.30073151e17, 4.49637989e-9, 9.26812423e17, 1.35671713e-9, 7.84557216e17, 6.29702169e-9, 7.93351695e17, 1.3022267e-37, 8.19735133e17, 1.21231979e-8, 8.63707530e17, 1.2083398e-37, 9.25268885e17, 1.08704975e-8, 0.00000000000, 0.00000000000, 0.00000000000 };
      for ( size_t i = 0; i < 65; ++i ){ 
        REQUIRE( wrk_200_265[i] == Approx( wrk[199+i] ).epsilon(1e-6) );
      }
 
      for ( int i = 264; i < wrk.size(); ++i ){ 
        REQUIRE( 0.0 == Approx( wrk[i] ).epsilon(1e-6) );
      }
  
    } // THEN 
  } // GIVEN

  /*
  GIVEN( "Medium value for emax" ){
    emax = 1.2;
    THEN ( "loops ranges are moderate (~17)" ){
     auto wrk = sigcoh( e, enext, s, nl, lat, temp, emax, natom );
      wrk_1_100= { 8.794479e15, 0.000000000, 8.794479e15, 0.000000000, 
        3.5177917e16, 2.0984634e-8, 3.5177917e16, 2.0984634e-8, 7.9150313e16, 
        0.0000000000, 7.9150313e16, 0.0000000000, 1.4071166e17, 9.9954151e-9, 
        1.4071166e17, 9.9954151e-9, 2.1986198e17, 0.0000000000, 2.1986198e17, 
        0.0000000000, 3.1660125e17, 6.1459915e-9, 3.1660125e17, 6.1459915e-9, 
        4.3092948e17, 0.0000000000, 4.3092948e17, 0.0000000000, 5.6284667e17, 
        4.1161249e-9, 5.6284667e17, 4.1161249e-9, 7.1235282e17, 0.00000000000, 
        7.1235282e17, 0.0000000000, 8.7944793e17, 2.8468646e-9, 8.79447930e17, 
        2.8468646e-9, 1.0641319e18, 5.5651613e-8, 1.2664050e18, 1.5452294e-8, 
        1.4862670e18, 2.2910301e-8, 1.7237179e18, 1.0870801e-8, 1.9787578e18, 
        3.1633621e-8, 2.2513867e18, 2.5631059e-8, 2.5416045e18, 1.5564767e-8, 
        2.8494112e18, 2.1705285e-8, 3.1748070e18, 2.7344287e-8, 3.5177917e18, 
        3.9230362e-8, 3.8783653e18, 2.4233465e-8, 4.2565279e18, 2.7239754e-8, 
        4.6522795e18, 2.3853718e-8, 5.0656200e18, 2.1068192e-8, 5.4965495e18, 
        1.9383522e-8, 5.9450680e18, 1.4768674e-8, 6.4111754e18, 1.2013965e-8, 
        6.8948717e18, 1.4676085e-8, 7.3961570e18, 9.4021180e-9, 7.9150313e18, 
        8.2634488e-9, 8.4514946e18, 6.4318789e-9, 9.0055468e18, 5.8988019e-9, 
        9.5771879e18, 5.3223846e-9, 1.0166418e19, 3.9873042e-9, 1.0773237e19, 
        3.0427961e-9, 1.1397645e19, 2.3740779e-9, 1.2039642e19, 1.7570369e-9, 
        1.2699228e19, 1.5332145e-9, 1.3376403e19, 1.1634285e-9, 1.4071166e19, 
        7.8460962e-10 };
      for ( size_t i = 0; i < 100; ++i ){ 
        REQUIRE( wrk_1_100[i] == Approx( wrk[i] ).epsilon(1e-6) );
      }
  
      std::vector<double> wrk_500_600 (100);
      wrk_500_600 = { 9.0294814e-10, 7.7962158e17, 2.3742272e-9, 9.1153877e17, 
        6.8883810e-10, 1.6562874e18, 1.0885884e-9, 6.1021116e17, 9.6700090e-10, 
        6.1900564e17, 5.7373985e-9, 6.4538908e17, 1.8503872e-9, 6.8936148e17, 
        5.2637077e-9, 7.5092283e17, 1.6341999e-9, 8.3007315e17, 4.4963798e-9, 
        9.2681242e17, 1.3567171e-9, 2.0872169e18, 4.7726638e-9, 2.3686402e18, 
        1.4292560e-8, 3.0036913e18, 8.7019189e-10, 1.8701836e19, 7.6802301e-13, 
        4.8860149e18, 1.9687626e-37, 6.2491592e18, 2.1710553e-9, 8.8962975e18, 
        1.1810673e-38, 1.1314779e19, 1.5717055e-10, 2.0425859e19, 2.1061428e-12, 
        1.1974813e19, 1.1051929e-38, 1.3351059e19, 1.0638481e-11, 2.2207100e19, 
        3.7000547e-13, 7.8455721e17, 6.2970216e-9, 7.9335169e17, 1.3022267e-37, 
        8.1973513e17, 1.2123197e-8, 8.6370753e17, 1.2083398e-37, 9.2526888e17, 
        1.0870497e-8, 2.6702729e18, 8.6064537e-9, 4.0773895e18, 3.6472874e-9, 
        6.7431936e18, 1.7560782e-9, 7.7661168e18, 6.0602180e-11, 1.0061475e19, 
        9.2466775e-11, 8.8867128e18, 1.0153268e-10, 1.1973575e19, 7.0538955e-12, 
        2.0402813e19, 6.7280496e-13, 5.3263489e18, 6.7392854e-10, 8.8765365e18, 
        3.4022417e-11, 8.3269532e18, 3.7878311e-38, 1.4052159e19, 4.0066842e-11, 
        2.2178258e19, 9.4968317e-13, 1.5543523e19, 9.5960014e-12, 2.2174057e19, 
        8.9260695e-41, 1.0681091e19, 1.0823724e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
      for ( size_t i = 0; i < 100; ++i ){ 
        REQUIRE( wrk_500_600[i] == Approx( wrk[499+i] ).epsilon(1e-6) );
      }
      for ( int i = 599; i < wrk.size(); ++i ){ 
        REQUIRE( 0.0 == Approx( wrk[i] ).epsilon(1e-6) );
      }
  
    } // THEN 
  } // GIVEN
  GIVEN( "large value for emax" ){
    emax = 5.5;
    THEN ( "loops ranges are large (~35)" ){
     auto wrk = sigcoh( e, enext, s, nl, lat, temp, emax, natom );
      wrk_1_100 = { 8.7944793e15, 0.0000000000, 8.7944793e15, 0.0000000000, 3.5177917e16, 2.0984634e-8, 3.5177917e16, 2.0984634e-8, 7.9150313e16, 0.0000000000, 7.9150313e16, 0.0000000000, 1.4071166e17, 9.9954151e-9, 1.4071166e17, 9.9954151e-9, 2.1986198e17, 0.0000000000, 2.1986198e17, 0.0000000000, 3.1660125e17, 6.1459915e-9, 3.1660125e17, 6.1459915e-9, 4.3092948e17, 0.0000000000, 4.3092948e17, 0.0000000000, 5.6284667e17, 4.1161249e-9, 5.6284667e17, 4.1161249e-9, 7.1235282e17, 0.0000000000, 7.1235282e17, 0.0000000000, 8.7944793e17, 2.8468646e-9, 8.7944793e17, 2.8468646e-9, 1.0641319e18, 5.5651613e-8, 1.2664050e18, 1.5452294e-8, 1.4862670e18, 2.2910301e-8, 1.7237179e18, 1.0870801e-8, 1.9787578e18, 3.1633621e-8, 2.2513867e18, 2.5631059e-8, 2.5416045e18, 1.5564767e-8, 2.8494112e18, 2.1705285e-8, 3.1748070e18, 2.7344287e-8, 3.5177917e18, 3.9230362e-8, 3.8783653e18, 2.4233465e-8, 4.2565279e18, 2.7239754e-8, 4.6522795e18, 2.3853718e-8, 5.0656200e18, 2.1068192e-8, 5.4965495e18, 1.9383522e-8, 5.9450680e18, 1.4768674e-8, 6.4111754e18, 1.2013965e-8, 6.8948717e18, 1.4676085e-8, 7.3961570e18, 9.4021180e-9, 7.9150313e18, 8.2634488e-9, 8.4514946e18, 6.4318789e-9, 9.0055468e18, 5.8988019e-9, 9.5771879e18, 5.3223846e-9, 1.0166418e19, 3.9873042e-9, 1.0773237e19, 3.0427961e-9, 1.1397645e19, 2.3740779e-9, 1.2039642e19, 1.7570369e-9, 1.2699228e19, 1.5332145e-9, 1.3376403e19, 1.1634285e-9, 1.4071166e19, 7.8460962E-10 };
      for ( size_t i = 0; i < 100; ++i ){ 
        REQUIRE( wrk_1_100[i] == Approx( wrk[i] ).epsilon(1e-6) );
      }
  
      std::vector<double> wrk_500_600 (100);
      wrk_500_600 ={ 9.269000e-19, 9.6428286e19, 1.533340e-28, 3.0222817e19, 1.910672e-14, 3.6695554e19, 1.231168e-15, 3.9017296e19, 7.731413e-16, 4.9359604e19, 9.475595e-19, 9.6348507e19, 3.188715e-27, 3.2181814e19, 1.787425e-15, 4.9278282e19, 9.062394e-18, 9.0603540e19, 1.071333e-25, 4.9216540e19, 1.002778e-17, 9.0585771e19, 1.107440e-26, 9.6143882e19, 7.052932e-27, 7.4916001e19, 4.697045e-23, 6.9894801e19, 1.608853e-21, 7.4915354e19, 2.043689e-51, 8.5116950e19, 4.752281e-25, 5.7657947e19, 3.028552e-20, 9.0505327e19, 8.925221e-26, 9.6085639e19, 4.282991e-27, 1.0185788e20, 3.267650e-28, 7.4798780e19, 1.466031e-22, 1.0182629e20, 2.058866e-28, 2.6151907e17, 1.3871522e-8, 8.7173024e16, 1.6269500e-9, 2.7031355e17, 0.0000000000, 9.5967503e16, 9.2661335e-9, 2.9669698e17, 2.5628649e-8, 1.2235094e17, 2.7025149e-9, 3.4066938e17, 0.0000000000, 1.6632333e17, 6.8145472e-9, 4.0223074e17, 2.0968824e-8, 2.2788469e17, 1.8864426e-9, 4.8138105e17, 0.0000000000, 3.0703500e17, 4.7013822e-9, 5.7812032e17, 1.6131880e-8, 4.0377427e17, 1.3071163e-9, 6.9244855e17, 0.0000000000, 5.1810251e17, 3.2845094e-9, 8.2436574e17, 1.2063392e-8, 6.5001969e17, 9.199318e-10, 7.9952584e17, 2.3231321e-9, 1.1409670e18, 3.6558694e-8, 4.1398844e18, 6.119783e-39, 5.3271391e18, 1.7963567e-9, 2.2247717e19, 1.500625e-12, 6.1021116e17, 9.670009e-10, 2.6151907e17, 2.7743045e-8, 6.1900564e17, 5.7373985e-9, 2.7031355e17, 1.418678e-37, 6.4538908e17, 1.8503872e-9 } ;
      for ( size_t i = 0; i < 100; ++i ){ 
        REQUIRE( wrk_500_600[i] == Approx( wrk[499+i] ).epsilon(1e-6) );
      }


      std::vector<double> wrk_800_870( 70 );
      wrk_800_870 = { 9.2466775e-11, 8.88671281e18, 1.0153268e-10, 1.19735750e19, 7.0538955e-12, 6.05982511e19, 1.6451530e-20, 2.04028132e19, 6.7280496e-13, 2.79429123e19, 5.9511445e-14, 3.21471033e19, 4.0381283e-16, 5.32634894e18, 6.7392854e-10, 8.87653653e18, 3.4022417e-11, 8.32695321e18, 3.7878311e-38, 1.40521592e19, 4.0066842e-11, 2.21782581e19, 9.4968317e-13, 3.66803545e19, 7.9797722e-16, 2.59447354e19, 7.7816867e-15, 3.00024889e19, 3.2923113e-42, 5.19425427e19, 2.1232189e-19, 8.51083359e19, 3.9652351e-26, 6.05948364e19, 1.8444213e-21, 6.51580574e19, 2.3283203e-21, 9.05052719e19, 1.6103029e-27, 1.55435236e19, 9.5960014e-12, 4.39695776e19, 1.6949847e-45, 2.21740573e19, 8.9260695e-41, 4.65659224e19, 1.3305075e-18, 1.01809070e20, 8.4036253e-30, 1.06810916e19, 1.0823724e-10, 3.66725446e19, 4.7211048e-17, 5.76309535e19, 4.6788283e-20, 3.66677522e19, 7.5709230e-16, 3.66670173e19, 4.7334732e-17, 2.40324561e19, 1.5580793e-13, 8.51075968e19, 1.0591165e-25, 4.65550438e19, 1.8029643e-45, 5.47528619e19, 1.5179778e-19, 8.51063951e19, 1.9869548e-26, 0.00000000000, 0.00000000000 } ;
      for ( size_t i = 0; i < 70; ++i ){ 
        REQUIRE( wrk_800_870[i] == Approx( wrk[799+i] ).epsilon(1e-6) );
      }

      for ( int i = 869; i < wrk.size(); ++i ){ 
        REQUIRE( 0.0 == Approx( wrk[i] ).epsilon(1e-6) );
      }
  
    } // THEN 
  } // GIVEN
  */

} // TEST CASE
