#define CATCH_CONFIG_MAIN 
#include "../../catch.hpp"
#include "e_ep_mu.h"


TEST_CASE( "Branch to handle E-E'-mu ordering" ){
  GIVEN( "inputs" ){
    int math = 1065, matdp = 1306, mtref = 229, ncds = 0, iinc = 2, lat = 1, 
        lasym = 0, nnl = -9, nl = 9, jmax = 55550, nne = 94, iprint=2;
    double teff = 713.39, teff2 = 0.0, za = 6000.0, awr = 11.8969, emax = 1.2, 
        cliq = 0.0, t = 296.0, tol = 5e-2, az = 11.9, az2 = 0.0, 
        sb = 5.5348570016241778, sb2 = 0.0;
    std::vector<double> scr( 500000, 0.0 ), esi( 95, 0.0 ), xsi( 95, 0.0 );

    std::vector<double> alpha { 0.25203, 0.50406, 0.75609, 1.00812, 1.26015, 
      1.51218, 1.76421, 2.01624, 2.27331, 2.53552, 2.80297, 3.07577, 3.35401, 
      3.63790, 3.92733, 4.22271, 4.52383, 4.83111, 5.14443, 5.46411, 5.79013, 
      6.12261, 6.46185, 6.80783, 7.16077, 7.52067, 7.88783, 8.26234, 8.64432, 
      9.03396, 9.43136, 9.83673, 10.2506, 10.6719, 11.1024, 11.5409, 11.9886, 
      12.4452, 12.911, 13.3858 }, 
    beta { 0.0, 0.100812, 0.201624, 0.302436, 0.403248, 0.50406, 0.604872, 
      0.705684, 0.806496, 0.907307, 1.00812, 1.10893, 1.20974, 1.31055, 
      1.41137, 1.51218, 1.61299, 1.71380, 1.81461, 1.91543, 2.01624, 2.11705, 
      2.21786, 2.31867, 2.41949, 2.5203, 2.62111, 2.72192, 2.82273, 2.92354, 
      3.02436, 3.12517, 3.22598, 3.32679, 3.42760, 3.52842, 3.62923, 3.73004, 
      3.83085, 3.93167, 4.03248, 4.13329, 4.24378, 4.36485, 4.49762, 4.64309, 
      4.80248, 4.97719, 5.16873, 5.37862, 5.60867, 5.8608, 6.13713, 6.43997, 
      6.77184, 7.13567, 7.53438, 7.97140, 8.45036, 8.97529, 9.55052, 10.181, 
      10.8726, 11.6297, 12.4593, 13.3697, 14.3667, 15.4595, 16.6571, 17.9697, 
      19.4093, 20.9860, 22.7139, 24.6082, 26.6849, 28.9602, 31.4533, 34.1873, 
      37.1825, 40.4659 };
    std::vector<std::vector<double>> sab ( alpha.size(), std::vector<double> (beta.size()));
    for ( int i = 0; i < alpha.size(); ++i ){
      for ( int j = 0; j < beta.size(); ++j ){
        sab[i][j] = 0.5*i + 0.1*j;
      }
    }

    std::setprecision(15);

    e_ep_mu(math, matdp, teff, teff2, scr, mtref, za, awr, ncds, emax, cliq, iinc, lat, esi, xsi, lasym, alpha, beta, sab, t, tol, az, az2, sb, sb2, nnl, nl, jmax, nne, iprint );
    //std::cout << "okay got to here" << std::endl;
    std::vector<double> correctScr { 0.0, 1.28, 0.0, 0.0, 2170.0, 10.0, 0.0, 
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25621273, 3.7335106e-6, 
      -0.991930525, -0.974523676, -0.95456071, -0.930606187, -0.901216249, 
      -0.862172369, -0.802910667, -0.634682893, 0.25621305, 2.28633166e19, 
      -0.987063365, -0.958890771, -0.926069886, -0.886963097, -0.83824734, 
      -0.773464709, -0.675338138, -0.42525435, 0.25621337, 2.28632695e19, 
      -0.987063371, -0.958890789, -0.926069919, -0.886963148, -0.838247413, 
      -0.773464811, -0.675338285, -0.425254613, 0.256214, 2.28631767e19, 
      -0.987063382, -0.958890825, -0.926069985, -0.886963248, -0.838247556, 
      -0.773465012, -0.675338574, -0.425255133, 0.25621527, 2.28629897e19, 
      -0.987063405, -0.958890899, -0.926070117, -0.886963451, -0.838247846, 
      -0.773465418, -0.675339156, -0.425256179, 0.25621781, 2.28626157e19, 
      -0.987063451, -0.958891046, -0.926070381, -0.886963855, -0.838248424, 
      -0.773466229, -0.67534032, -0.425258271, 0.25622288, 2.28618691e19, 
      -0.987063543, -0.958891339, -0.926070909, -0.886964663, -0.838249579, 
      -0.773467849, -0.675342645, -0.425262448, 0.25623302, 2.2860376e19, 
      -0.987063726, -0.958891926, -0.926071964, -0.886966279, -0.838251889, 
      -0.773471089, -0.675347293, -0.425270801, 0.2562533, 2.28573898e19, 
      -0.987064092, -0.9588931 };
    std::vector<double> correctScr1 { -0.113114459, -9.97187918e-2, 
      -8.36930827e-2, -6.37809626e-2, -3.73117735e-2, 2.76059153e-3, 
      0.103890383, 2.3037823, 18200.5135, -0.124631706, -0.11310705, 
      -9.97113694e-2, -8.36857786e-2, -6.37736943e-2, -3.73046245e-2, 
      2.76758673e-3, 0.103896975, 2.3037848, 18199.8534, -0.124631707, 
      -0.113107053, -9.97113745e-2, -8.36857864e-2, -6.37737055e-2, 
      -3.730464e-2, 2.7675646e-3, 0.103896936, 2.3037861, 18199.5101, 
      -0.124631708, -0.113107055, -9.97113772e-2, -8.36857905e-2, 
      -6.37737113e-2, -3.7304648e-2, 2.7675531e-3, 0.103896916, 2.3037867, 
      18199.3517, -0.124631708, -0.113107055, -9.97113785e-2, -8.36857923e-2, 
      -6.37737139e-2, -3.73046517e-2, 2.76754779e-3, 0.103896907, 2.303787, 
      18199.2724, -0.124631708, -0.113107056, -9.97113791e-2, -8.36857933e-2, 
      -6.37737153e-2, -3.73046536e-2, 2.76754513e-3, 0.103896902, 2.3037872, 
      18199.2196, -0.124631708, -0.113107056, -9.97113795e-2, -8.36857939e-2, 
      -6.37737162e-2, -3.73046548e-2, 2.76754336e-3, 0.103896899, 2.3037873, 
      0.0, 0.0, 0.0 };
    std::vector<double> correctScr2 { -0.560944168, -0.542873702, -0.521264648, 
      -0.494396499, -0.458675311, -0.404597675, -0.268037495, 1.26724730, 
      7377437880, -0.574989132, -0.559377006, -0.541325272, -0.519737888, 
      -0.492896509, -0.457211353, -0.403187782, -0.266764638, 1.26979780, 
      6350363350, -0.573413087, -0.557817653, -0.539784609, -0.518219183, 
      -0.491404181, -0.455754707, -0.401785274, -0.265498548, 1.27234840, 
      5465362010, -0.571832619, -0.556245140, -0.538230671, -0.516687826, 
      -0.489898928, -0.454284995, -0.400370214, -0.264220246, 1.27489890, 
      4704458510, -0.570261536, -0.554694037, -0.536697431, -0.515177643, 
      -0.488414292, -0.452835324, -0.398975058, -0.262960651, 1.27744950, 
      4049524690, -0.568690491, -0.553158709, -0.535173713, -0.513682880, 
      -0.486942890, -0.451396591, -0.397593548, -0.261713264, 1.27999990, 
      3485781040, -0.567126755, -0.551620805, -0.533648927, -0.512182601, 
      -0.485468556, -0.449956926, -0.396208107, -0.260462150, 1.28000010, 
      3485771320, -0.567126756, -0.551620806, -0.533648928, -0.512182603, 
      -0.485468559, -0.449956931, -0.396208113, -0.260462160, 1.28255050, 
      3664928350, -0.565571369, -0.550091092, -0.532131558, -0.510689316, 
      -0.484001604, -0.448524859, -0.394829574, -0.259217344, 1.28510110, 
      3853156710, -0.564017678, -0.548551609, -0.530610691, -0.509189324, 
      -0.482527802, -0.447086036, -0.393443638, -0.257965715, 1.28765160, 
      4051034490, -0.562465853, -0.547028634 };
    std::vector<double> correctXsi { 105735.059, 79266.6361, 66896.8406, 
      56551.7517, 47331.6451, 40021.7644, 33508.7536, 29870.6262, 26529.2203, 
      23751.2653, 21144.3511, 19535.9866, 18019.0733, 16476.7770, 15042.4692, 
      13680.2566, 12428.2435, 11572.6719, 10766.7648, 9817.45877, 8947.99550, 
      8227.51306, 7790.39824, 7399.58203, 6978.75499, 6559.74588, 6146.73724, 
      5791.53937, 5553.16420, 5332.11050, 5111.84695, 4894.90805, 4685.78457, 
      4514.55914, 4361.20231, 4251.66335, 4185.74297, 4107.50364, 4040.67950, 
      3984.82717, 3939.94372, 3904.11167, 3864.30809, 3819.61945, 3800.16064, 
      3796.98161, 3795.18630, 3798.94436, 3824.10740, 3874.07537, 3941.72452, 
      4046.48335, 4152.85730, 4288.17804, 4454.98504, 4671.70037, 4898.33388, 
      5418.90276, 5912.63116, 6582.93553, 7306.34203, 8293.12487, 9667.07824, 
      10900.7390, 12758.4136, 15266.6692, 18631.2622, 22771.7701, 27750.6372, 
      36873.4420, 56232.3897, 81747.5453, 122184.175, 204830.808, 526189.120, 
      1176333.77, 2295538.21, 4584406.06, 6521336.43, 12576876.2, 42936970.3, 
      123016793, 291810602, 824793265, 4275904220.0004272, 2.36588873e10, 
      1.61678252e11, 1.42031608e12, 1.3795108e13, 1.28909022e14, 1.53484115e15, 
      2.22537332e16, 2.68204409e17, 2.7141077e18, 0.0 };


    for ( size_t i = 0; i < correctScr.size(); ++i ){
      REQUIRE( correctScr[i] == Approx(scr[i]).epsilon(1e-6) );
    }
    for ( size_t i = 0; i < correctScr2.size(); ++i ){
      REQUIRE( correctScr2[i] == Approx(scr[i+999]).epsilon(1e-6) );
    }
    for ( size_t i = 0; i < correctScr1.size(); ++i ){
      REQUIRE( correctScr1[i] == Approx(scr[i+2099]).epsilon(1e-6) );
    }

    for ( size_t i = 2169; i < scr.size(); ++i ){
      REQUIRE( 0.0 == Approx(scr[i]).epsilon(1e-6) );
    }

    for ( size_t i = 0; i < correctXsi.size(); ++i ){
      REQUIRE( correctXsi[i] == Approx(xsi[i]).epsilon(1e-6) );
    }






  } // GIVEN






  GIVEN( "inputs" ){
    int math = 1065, matdp = 1306, mtref = 229, ncds = 0, iinc = 1, lat = 1, 
        lasym = 0, nnl = -9, nl = 9, jmax = 55550, nne = 94, iprint=2;
    double teff = 713.39, teff2 = 0.0, za = 6000.0, awr = 11.8969, emax = 1.2, 
        cliq = 0.0, t = 296.0, tol = 5e-2, az = 11.9, az2 = 0.0, 
        sb = 5.5348570016241778, sb2 = 0.0;
    std::vector<double> scr( 500000, 0.0 ), esi( 95, 0.0 ), xsi( 95, 0.0 );

    std::vector<double> alpha(40),beta(80);
    for (size_t i = 0; i < alpha.size(); ++i ){
      alpha[i] = 0.8 * i * ( i%2 ) + 0.01;
    }

    for (size_t i = 0; i < beta.size(); ++i ){
      beta[i] = i * ( i%5 );
    }

    std::vector<std::vector<double>> sab ( alpha.size(), std::vector<double> (beta.size()));
    for ( int i = 0; i < alpha.size(); ++i ){
      for ( int j = 0; j < beta.size(); ++j ){
        sab[i][j] = 0.01*i*(j%4) + 0.1*j;
      }
    }

    std::setprecision(15);

    e_ep_mu(math, matdp, teff, teff2, scr, mtref, za, awr, ncds, emax, cliq, iinc, lat, esi, xsi, lasym, alpha, beta, sab, t, tol, az, az2, sb, sb2, nnl, nl, jmax, nne, iprint );
    //std::cout << "okay got to here" << std::endl;
    std::vector<double> correctScr { 0.0, 1.28, 0.0, 0.0, 690.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.47, 2.4354583e-5, -0.993689667,  -0.980009981, -0.964211595, -0.945562896, -0.922587663, -0.892459506, -0.847589701, -0.728393399, 0.47999997, 4.30344428e-5, -0.993482897, -0.979354062, -0.963047473, -0.943809713, -0.920132779, -0.889102644, -0.842956378, -0.719356756, 0.48999997, 7.42634735e-5, -0.993296035, -0.978767579, -0.962024693, -0.942302900, -0.918094004, -0.886481321, -0.839826763, -0.728091336, 0.49999997, 1.26241341e-4, -0.993073786, -0.978064260, -0.960782612, -0.940437623, -0.915494656, -0.882963365, -0.835047333, -0.721337200, 0.50999997, 2.10794878e-4, -0.992838492, -0.977318654, -0.959468181, -0.938462014, -0.912737520, -0.879224965, -0.829935369, -0.713333747, 0.51999997, 3.45817915e-4, -0.992591843, -0.976539652, -0.958093140, -0.936397059, -0.909858041, -0.875326526, -0.824613978, -0.705030646, 0.52999997, 5.60532614e-4, -0.992319469, -0.975817196, -0.957055683, -0.934791975, -0.907392369, -0.871780607, -0.819565471, -0.696851926, 0.53999997, 8.88391765e-4, -0.992052401, -0.974973040, -0.955547371, -0.932508378, -0.904232524, -0.867537457, -0.813840440, -0.688250171, 0.54999997, 1.38993636e-3, -0.9917447, -0.973996522 };
    std::vector<double> correctScr1 { -9.65073907e-2, 6.34362317e-2, 0.198218920, 0.321905500, 0.446191795, 0.611654767, 1.46816880, 7.58905843e-3, -0.690866704, -0.336041024, -0.125295375, 3.48547143e-2, 0.170556112, 0.295635865, 0.422151677, 0.591969316, 1.47607500, 5.53351154e-3, -0.708029672, -0.362942918, -0.15347845, 6.74025692e-3, 0.143235544, 0.269608671, 0.398248234, 0.572276831, 1.4839813, 4.03325561e-3, -0.724221062, -0.388954159, -0.181043531, -2.08965774e-2, 0.116268309, 0.243835529, 0.374493207, 0.552590379, 1.49188750, 2.93865753e-3, -0.739481356, -0.414069011, -0.207973379, -4.80404098e-2, 8.96710091e-2, 0.218334239, 0.350905969, 0.532945243, 1.50770000, 1.55984860e-3, -0.767365911, -0.463339992, -0.261190195, -0.101738519, 3.69347172e-2, 0.167656009, 0.303842560, 0.493293268, 1.5187688, 9.99126783e-4, -0.784947455, -0.494138472, -0.295723477, -0.137304217, 1.53802099e-3, 0.133319079, 0.271682035, 0.465976866, 1.5298375, 6.39972194e-4, -0.802644055, -0.524667727, -0.329841076, -0.172455091, -3.34959209e-2, 9.92878620e-2, 0.239723580, 0.438693275, 1.54090630, 4.07902468e-4, -0.81757662, -0.552952735, -0.362850573, -0.206957298, -6.64008903e-2, 6.73070572e-2, 0.209200198, 0.412416799, 1.55197500, 2.60588240e-4, -0.83078535, -0.578601545, -0.393118815, -0.239078162, -9.92374141e-2, 3.48946010e-2, 0.17840620100, 0.38612063200, 1.5630438000, 1.65998517e-4, -0.843136275, -0.603297476, -0.422800217 };
    std::vector<double> correctScr2 { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.6968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.2028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.7088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.2148, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.7208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.2268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.7328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.2388, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.7448, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2508, 0.0, 0.0, 0.0, 0.0 };
    std::vector<double> correctXsi { 78.4941480, 58.9107862, 49.7668683, 42.1262700, 35.3271576, 29.9466141, 25.1672092, 22.5097416, 20.0761627, 18.0532405, 16.1717158, 15.0215136, 13.9522246, 12.8590731, 11.8630813, 10.9158257, 10.0675041, 9.49478778, 8.96066210, 8.34406854, 7.79738841, 7.35233485, 7.09049622, 6.85582972, 6.61679130, 6.38558314, 6.16690866, 5.99412388, 5.87381557, 5.76381404, 5.65812920, 5.56215719, 5.46571351, 5.38067494, 5.33001068, 5.28008148, 5.24726814, 5.21176565, 5.18025867, 5.18404669, 5.16203839, 5.14150595, 5.11628619, 5.08154300, 5.03560619, 5.02757389, 5.01384772, 4.99969405, 4.97651071, 4.95769265, 4.94220510, 4.92048548, 4.91510160, 4.89735306, 4.88801536, 4.87871041, 4.87250271, 4.86940392, 4.86206689, 4.85806103, 4.85318976, 4.84611692, 4.83960006, 4.81103563, 4.80610063, 4.80144884, 4.79981585, 4.79735438, 4.79089560, 4.79739115, 4.79469846, 4.78503046, 4.77968069, 4.77560423, 4.77386631, 4.76816121, 4.76419399, 4.76597801, 4.76538910, 4.76347816, 4.75976915, 4.75834621, 4.75655845, 4.76105709, 4.75789923, 4.75232770, 4.75353550, 4.74365164, 4.74182716, 4.74157888, 4.73946821, 4.74945520, 4.74341907, 4.74250652, 0.0 };


    for ( size_t i = 0; i < correctScr.size(); ++i ){
      REQUIRE( correctScr[i] == Approx(scr[i]).epsilon(1e-6) );
    }

    for ( size_t i = 0; i < correctScr1.size(); ++i ){
      REQUIRE( correctScr1[i] == Approx(scr[i+500]).epsilon(1e-6) );
    }

    for ( size_t i = 0; i < correctScr2.size(); ++i ){
      REQUIRE( correctScr2[i] == Approx(scr[i+700]).epsilon(1e-6) );
    }

    REQUIRE( 7.9948178 == Approx(scr[966]).epsilon(1e-6) );
    for ( size_t i = 967; i < scr.size(); ++i ){
      REQUIRE( 0.0 == Approx(scr[i]).epsilon(1e-6) );
    }

    for ( size_t i = 0; i < xsi.size(); ++i ){
      REQUIRE( correctXsi[i] == Approx(xsi[i]).epsilon(1e-6) );
    }
    std::cout << std::setprecision(15) << xsi[0] << "     " << correctXsi[0] << std::endl;






  } // GIVEN
} // TEST CASE
