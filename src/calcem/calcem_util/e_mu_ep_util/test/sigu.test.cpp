#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include "calcem/calcem_util/e_mu_ep_util/sigu.h"
#include "generalTools/testing.h"



TEST_CASE( "sigu" ){
  int lasym = 0, lat = 1, iinc = 2, nemax = 5000;
  double e = 1e-5, tev = 2.55e-2, az = 0.99917, sb = 4.0, sb2 = 0.0, teff = 0.12, tolin = 5e-2, u;

  std::vector<double> alphas { 1.1, 2.2, 3.3, 4.5, 5.8 },
                       betas { 0.1, 0.2, 1.3, 1.4, 2.5, 2.6, 3.7 };
  std::vector<double> sab(alphas.size()*betas.size());
  for ( size_t i = 0; i < alphas.size(); ++i ){
    for ( size_t j = 0; j < betas.size(); ++j ){
      sab[i*betas.size()+j] = 0.01*((j+1) + 0.1*(i+1));
    } 
  } 
  std::cout.precision(15);

  GIVEN( "varying scattering cosines" ){
    WHEN( "u = -1.0" ){
      u = -1.0;
      std::vector<double> s1(nemax,0.0),s2(nemax,0.0),
      correct_s1 { 393.910081, 0, 4.309201E-13, 8.618402E-13, 1.7236804E-12, 
      1.9342239E-8, 3.8682755E-8, 7.7363787E-8, 1.5472585E-7, 3.0944997E-7, 
      6.1889821E-7, 1.2377947E-6, 2.4755877E-6, 4.9511736E-6, 9.9023454E-6, 
      1.9804689E-5, 3.9609376E-5, 7.9218751E-5, 1.5843750E-4, 3.1687500E-4, 
      6.3375000E-4, 1.2675000E-3, 2.5350000E-3, 3.8025000E-3, 4.4362500E-3, 
      4.7531250E-3, 4.9115625E-3, 4.9907813E-3, 5.0303907E-3, 5.0501954E-3, 
      5.0600977E-3, 5.0650489E-3, 5.0675245E-3, 5.0687623E-3, 5.0693812E-3, 
      5.0696906E-3, 5.0698453E-3, 5.0699227E-3, 5.0699614E-3, 5.0699807E-3, 
      5.0699904E-3, 5.0699952E-3, 5.0699976E-3, 5.0699988E-3, 5.0699994E-3, 
      5.0699997E-3, 5.0699999E-3, 5.0700000E-3, 1.2027500E-2, 1.8985000E-2, 
      3.2900000E-2, 3.5430000E-2, 6.3260000E-2, 6.5790000E-2, 7.9705000E-2, 
      8.6662500E-2, 9.0141250E-2, 9.1880625E-2, 9.2750313E-2, 9.3185157E-2, 
      9.3402579E-2, 9.3511290E-2, 9.3565645E-2, 9.3592823E-2, 9.3606412E-2, 
      9.3613206E-2, 9.3616603E-2, 9.3618302E-2, 9.3619151E-2, 9.3619576E-2, 
      9.3619788E-2, 9.3619894E-2, 9.3619947E-2, 9.3619974E-2, 9.3619987E-2, 
      9.3619994E-2, 9.3619997E-2, 9.3619999E-2, 9.362E-2, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      correct_s2 { 78.0, 0, 0.86812825908, 1.2276132005, 1.7358961666, 
      176.21088440, 244.91981576, 338.16164285, 462.73065256, 625.71756699, 
      833.24881808, 1088.5346227, 1389.5569827, 1727.2900621, 2085.6787026, 
      2444.1229634, 2781.8564282, 3082.3091937, 3335.5023797, 3537.7410097, 
      3689.1586656, 3790.0173521, 3836.0912359, 3832.4067140, 3823.7633604, 
      3818.4357145, 3815.5700435, 3814.0916618, 3813.3416363, 3812.9639802, 
      3812.7745004, 3812.6795972, 3812.6321052, 3812.6083491, 3812.5964686, 
      3812.5905286, 3812.5875585, 3812.5860724, 3812.5853294, 3812.5849588, 
      3812.5847726, 3812.5846804, 3812.5846343, 3812.5846113, 3812.5845998, 
      3812.5845940, 3812.5845902, 1629.3457424, 2160.1978761, 2361.7853083, 
      2435.4047613, 2429.3914507, 1901.8474047, 1864.3607137, 1607.0867876, 
      1457.6959400, 1380.6181996, 1341.7985483, 1322.3552138, 1312.6295853, 
      1307.7663214, 1305.3346438, 1304.1188132, 1303.5108869, 1303.2069240, 
      1303.0549538, 1302.9789687, 1302.9409649, 1302.9219743, 1302.9124677, 
      1302.9077257, 1302.9053546, 1302.9041691, 1302.9035652, 1302.9032744, 
      1302.9031178, 1302.9030507, 1302.9030060, 12.967700530, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  
      sigu(nemax,e,u,tev,alphas,betas,sab,tolin,az,iinc,lat,lasym,sb,sb2,teff,s1,s2);
    
      for ( size_t i = 0; i < correct_s1.size(); ++i ){
        REQUIRE( correct_s1[i] == Approx(s1[i]).epsilon(1e-6) );
        REQUIRE( correct_s2[i] == Approx(s2[i]).epsilon(1e-6) );
      }

    } // WHEN 
  
    WHEN( "u = -0.2" ){
      u = -0.2;
      std::vector<double> s1(nemax,0.0),s2(nemax,0.0),
      correct_s1 { 396.2647985, 0, 1.0993286E-11, 2.1986572E-11, 4.3973143E-11, 
      1.9384488E-8, 3.8725003E-8, 7.7406032E-8, 1.5476809E-7, 3.0949221E-7, 
      6.1894044E-7, 1.2378369E-6, 2.4756298E-6, 4.9512157E-6, 9.9023875E-6, 
      1.9804731E-5, 3.9609418E-5, 7.9218792E-5, 1.5843754E-4, 3.1687503E-4, 
      6.3375002E-4, 1.2675000E-3, 2.5350000E-3, 3.8025000E-3, 4.4362500E-3, 
      4.7531250E-3, 4.9115625E-3, 4.9907813E-3, 5.0303907E-3, 5.0501954E-3, 
      5.0600977E-3, 5.0650489E-3, 5.0675245E-3, 5.0687623E-3, 5.0693812E-3, 
      5.0696906E-3, 5.0698453E-3, 5.0699227E-3, 5.0699614E-3, 5.0699807E-3, 
      5.0699904E-3, 5.0699952E-3, 5.0699976E-3, 5.0699988E-3, 5.0699994E-3, 
      5.0699997E-3, 5.0699999E-3, 5.0700000E-3, 1.2027500E-2, 1.8985000E-2, 
      3.2900000E-2, 3.5430000E-2, 6.3260000E-2, 6.5790000E-2, 7.9705000E-2, 
      8.6662500E-2, 9.0141250E-2, 9.1880625E-2, 9.2750313E-2, 9.3185157E-2, 
      9.3402579E-2, 9.3511290E-2, 9.3565645E-2, 9.3592823E-2, 9.3606412E-2, 
      9.3613206E-2, 9.3616603E-2, 9.3618302E-2, 9.3619151E-2, 9.3619576E-2, 
      9.3619788E-2, 9.3619894E-2, 9.3619947E-2, 9.3619974E-2, 9.3619987E-2, 
      9.3619994E-2, 9.3619997E-2, 9.3619999E-2, 9.3620000E-2, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
      correct_s2 { 78.0, 0, 4.38478329, 6.20047815, 8.76771402, 182.388489, 
      256.632392, 360.355873, 504.181921, 701.187934, 965.586062, 1308.62820, 
      1730.20135, 2207.78372, 2692.59709, 3125.70252, 3467.07443, 3709.87555, 
      3870.25560, 3969.98766, 4025.91244, 4046.18048, 4028.53443, 3995.00495, 
      3976.33544, 3966.74328, 3961.89795, 3959.46446, 3958.24517, 3957.63491, 
      3957.32963, 3957.17695, 3957.10060, 3957.06242, 3957.04333, 3957.03379, 
      3957.02902, 3957.02663, 3957.02544, 3957.02484, 3957.02454, 3957.02439, 
      3957.02432, 3957.02428, 3957.02426, 3957.02425, 3957.02425, 1629.18740, 
      2160.05899, 2361.66359, 2435.32438, 2429.30824, 1901.75904, 1864.27301, 
      1607.00689, 1457.62248, 1380.54783, 1341.72979, 1322.28727, 1312.56206, 
      1307.69900, 1305.26743, 1304.05165, 1303.44375, 1303.13980, 1302.98784, 
      1302.91185, 1302.87385, 1302.85486, 1302.84536, 1302.84061, 1302.83824, 
      1302.83706, 1302.83645, 1302.83616, 1302.83601, 1302.83594, 1302.83590, 
      13.0751407, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  
      sigu(nemax,e,u,tev,alphas,betas,sab,tolin,az,iinc,lat,lasym,sb,sb2,teff,s1,s2);
  
      for ( size_t i = 0; i < correct_s1.size(); ++i ){
        REQUIRE( correct_s1[i] == Approx(s1[i]).epsilon(1e-6) );
        REQUIRE( correct_s2[i] == Approx(s2[i]).epsilon(1e-6) );
      }
    } // WHEN

    WHEN( "u = 0.0" ){
      u = 0.0;
      std::vector<double> s1(nemax,0.0),s2(nemax,0.0),
      correct_s1 { 396.95156, 0, 9.6893315E-9, 1.9378663E-8, 3.8757325E-8, 
      7.7514650E-8, 1.5502930E-7, 3.1005860E-7, 6.2011720E-7, 1.2402344E-6, 
      2.4804688E-6, 4.9609375E-6, 9.9218750E-6, 1.9843750E-5, 3.9687500E-5, 
      7.9375000E-5, 1.5875000E-4, 3.1750000E-4, 6.3500000E-4, 1.2700000E-3, 
      2.5400000E-3, 3.8050000E-3, 4.4375000E-3, 4.7537500E-3, 4.9118750E-3, 
      4.9909375E-3, 5.0304688E-3, 5.0502344E-3, 5.0601172E-3, 5.0650586E-3, 
      5.0675293E-3, 5.0687647E-3, 5.0693824E-3, 5.0696912E-3, 5.0698456E-3, 
      5.0699228E-3, 5.0699614E-3, 5.0699807E-3, 5.0699904E-3, 5.0699952E-3, 
      5.0699976E-3, 5.0699988E-3, 5.0699994E-3, 5.0699997E-3, 5.0699999E-3, 
      5.0700000E-3, 1.2027500E-2, 1.8985000E-2, 3.2900000E-2, 3.5430000E-2, 
      6.3260000E-2, 6.5790000E-2, 7.9705000E-2, 8.6662500E-2, 9.0141250E-2, 
      9.1880625E-2, 9.2750313E-2, 9.3185157E-2, 9.3402579E-2, 9.3511290E-2, 
      9.3565645E-2, 9.3592823E-2, 9.3606412E-2, 9.3613206E-2, 9.3616603E-2, 
      9.3618302E-2, 9.3619151E-2, 9.3619576E-2, 9.3619788E-2, 9.3619894E-2, 
      9.3619947E-2, 9.3619974E-2, 9.3619987E-2, 9.3619994E-2, 9.3619997E-2, 
      9.3619999E-2, 9.3620000E-2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0 },
      correct_s2 { 76.0, 0, 130.140379, 183.957183, 259.903258, 366.850496, 
      516.819051, 725.370941, 1010.72857, 1389.35860, 1864.57645, 2408.22326, 
      2951.04475, 3409.25922, 3735.74749, 3937.68007, 4049.76753, 4105.37501, 
      4125.57645, 4118.70564, 4081.17580, 4038.89659, 4017.36231, 4006.56371, 
      4001.16087, 3998.45898, 3997.10796, 3996.43244, 3996.09468, 3995.92580, 
      3995.84136, 3995.79913, 3995.77802, 3995.76747, 3995.76219, 3995.75955, 
      3995.75823, 3995.75758, 3995.75724, 3995.75708, 3995.75700, 3995.75696, 
      3995.75694, 3995.75693, 3995.75692, 1629.14609, 2160.02328, 2361.63247, 
      2435.30429, 2429.28744, 1901.73691, 1864.25104, 1606.98687, 1457.60408, 
      1380.53020, 1341.71256, 1322.27025, 1312.54514, 1307.68214, 1305.25059, 
      1304.03482, 1303.42693, 1303.12298, 1302.97102, 1302.89504, 1302.85704, 
      1302.83805, 1302.82854, 1302.82380, 1302.82143, 1302.82024, 1302.81964, 
      1302.81935, 1302.81919, 1302.81912, 1302.81908, 13.1022021, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  
      sigu(nemax,e,u,tev,alphas,betas,sab,tolin,az,iinc,lat,lasym,sb,sb2,teff,s1,s2);
  
      for ( size_t i = 0; i < correct_s1.size(); ++i ){
        REQUIRE( correct_s1[i] == Approx(s1[i]).epsilon(1e-6) );
        REQUIRE( correct_s2[i] == Approx(s2[i]).epsilon(1e-6) );
      }
    } // WHEN

    WHEN( "u = 0.5" ){
      u = 0.5;
      std::vector<double> s1(nemax,0.0),s2(nemax,0.0),
      correct_s1 { 398.9380160, 0, 9.6893315E-9, 1.9378663E-8, 3.8757325E-8, 
      7.7514650E-8, 1.5502930E-7, 3.1005860E-7, 6.2011720E-7, 1.2402344E-6, 
      2.4804688E-6, 4.9609375E-6, 9.9218750E-6, 1.9843750E-5, 3.9687500E-5, 
      7.9375000E-5, 1.5875000E-4, 3.1750000E-4, 6.3500000E-4, 1.2700000E-3, 
      2.5400000E-3, 3.8050000E-3, 4.4375000E-3, 4.7537500E-3, 4.9118750E-3, 
      4.9909375E-3, 5.0304688E-3, 5.0502344E-3, 5.0601172E-3, 5.0650586E-3, 
      5.0675293E-3, 5.0687647E-3, 5.0693824E-3, 5.0696912E-3, 5.0698456E-3, 
      5.0699228E-3, 5.0699614E-3, 5.0699807E-3, 5.0699904E-3, 5.0699952E-3, 
      5.0699976E-3, 5.0699988E-3, 5.0699994E-3, 5.0699997E-3, 5.0699999E-3, 
      5.0700000E-3, 1.2027500E-2, 1.8985000E-2, 3.2900000E-2, 3.5430000E-2, 
      6.3260000E-2, 6.5790000E-2, 7.9705000E-2, 8.6662500E-2, 9.0141250E-2, 
      9.1880625E-2, 9.2750313E-2, 9.3185157E-2, 9.3402579E-2, 9.3511290E-2, 
      9.3565645E-2, 9.3592823E-2, 9.3606412E-2, 9.3613206E-2, 9.3616603E-2, 
      9.3618302E-2, 9.3619151E-2, 9.3619576E-2, 9.3619788E-2, 9.3619894E-2, 
      9.3619947E-2, 9.3619974E-2, 9.3619987E-2, 9.3619994E-2, 9.3619997E-2, 
      9.3619999E-2, 9.3620000E-2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0 },
      correct_s2 {76.0, 0, 132.2128157, 188.1375303, 268.3594339, 384.012189, 
      551.757763, 796.593140, 1155.23014, 1676.67620, 2405.34898, 3310.45735, 
      4173.39148, 4692.06610, 4827.23521, 4759.75492, 4635.59662, 4514.75702, 
      4410.85339, 4318.55264, 4222.68663, 4155.45952, 4125.82928, 4111.62895, 
      4104.65534, 4101.19750, 4099.47551, 4098.61622, 4098.18699, 4097.97249, 
      4097.86526, 4097.81165, 4097.78485, 4097.77145, 4097.76475, 4097.76140, 
      4097.75972, 4097.75889, 4097.75846, 4097.75826, 4097.75815, 4097.75810, 
      4097.75807, 4097.75806, 4097.75805, 1629.03954, 2159.93218, 2361.55340, 
      2435.25405, 2429.23544, 1901.68147, 1864.19602, 1606.93672, 1457.55800, 
      1380.48605, 1341.66943, 1322.22763, 1312.50278, 1307.63990, 1305.20842, 
      1303.99268, 1303.38481, 1303.08087, 1302.92891, 1302.85293, 1302.81493, 
      1302.79594, 1302.78644, 1302.78169, 1302.77932, 1302.77814, 1302.77753, 
      1302.77724, 1302.77709, 1302.77702, 1302.77697, 13.1702091, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; 
  
      sigu(nemax,e,u,tev,alphas,betas,sab,tolin,az,iinc,lat,lasym,sb,sb2,teff,s1,s2);
    
      for ( size_t i = 0; i < correct_s1.size(); ++i ){
        REQUIRE( correct_s1[i] == Approx(s1[i]).epsilon(1e-6) );
        REQUIRE( correct_s2[i] == Approx(s2[i]).epsilon(1e-6) );
      }
    } // WHEN
  
  
    WHEN( "u = 0.9" ){
      u = 0.9;
      std::vector<double> s1(nemax,0.0),s2(nemax,0.0),
      correct_s1 { 401.1051298, 0, 9.6893315E-9, 1.9378663E-8, 3.8757325E-8, 
      7.7514650E-8, 1.5502930E-7, 3.1005860E-7, 6.2011720E-7, 1.2402344E-6, 
      2.4804688E-6, 4.9609375E-6, 7.4414063E-6, 9.9218750E-6, 1.9843750E-5, 
      3.9687500E-5, 7.9375000E-5, 1.5875000E-4, 3.1750000E-4, 6.3500000E-4, 
      1.2700000E-3, 2.5400000E-3, 3.8050000E-3, 4.4375000E-3, 4.7537500E-3, 
      4.9118750E-3, 4.9909375E-3, 5.0304688E-3, 5.0502344E-3, 5.0601172E-3, 
      5.0650586E-3, 5.0675293E-3, 5.0687647E-3, 5.0693824E-3, 5.0696912E-3, 
      5.0698456E-3, 5.0699228E-3, 5.0699614E-3, 5.0699807E-3, 5.0699904E-3, 
      5.0699952E-3, 5.0699976E-3, 5.0699988E-3, 5.0699994E-3, 5.0699997E-3, 
      5.0699999E-3, 5.0700000E-3, 1.2027500E-2, 1.8985000E-2, 3.2900000E-2, 
      3.5430000E-2, 6.3260000E-2, 6.5790000E-2, 7.9705000E-2, 8.6662500E-2, 
      9.0141250E-2, 9.1880625E-2, 9.2750313E-2, 9.3185157E-2, 9.3402579E-2, 
      9.3511290E-2, 9.3565645E-2, 9.3592823E-2, 9.3606412E-2, 9.3613206E-2, 
      9.3616603E-2, 9.3618302E-2, 9.3619151E-2, 9.3619576E-2, 9.3619788E-2, 
      9.3619894E-2, 9.3619947E-2, 9.3619974E-2, 9.3619987E-2, 9.3619994E-2, 
      9.3619997E-2, 9.3619999E-2, 9.3620000E-2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, 
      correct_s2 {77.0, 0, 133.9439956, 191.6950879, 275.7527925, 399.6227679, 
      585.461500, 871.654745, 1329.60870, 2104.23041, 3513.53749, 6165.71807, 
      8245.97898, 9331.69917, 8793.64976, 7084.87261, 5991.50897, 5346.28423, 
      4948.15187, 4687.25293, 4501.21013, 4347.12061, 4256.30937, 4219.18772, 
      4201.86297, 4193.45126, 4189.30235, 4187.24148, 4186.21438, 4185.70164, 
      4185.44548, 4185.31745, 4185.25345, 4185.22145, 4185.20545, 4185.19745, 
      4185.19345, 4185.19145, 4185.19045, 4185.18995, 4185.18970, 4185.18958, 
      4185.18952, 4185.18949, 4185.18947, 4185.18946, 1628.95068, 2159.85734, 
      2361.48880, 2435.21387, 2429.19384, 1901.63704, 1864.15191, 1606.89650, 
      1457.52106, 1380.45067, 1341.63485, 1322.19346, 1312.46881, 1307.60604, 
      1305.17461, 1303.95890, 1303.35104, 1303.04711, 1302.89515, 1302.81918, 
      1302.78118, 1302.76219, 1302.75268, 1302.74794, 1302.74557, 1302.74438, 
      1302.74378, 1302.74349, 1302.74333, 1302.74327, 1302.74322, 13.2249793, 
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  
      sigu(nemax,e,u,tev,alphas,betas,sab,tolin,az,iinc,lat,lasym,sb,sb2,teff,s1,s2);
  
      for ( size_t i = 0; i < correct_s1.size(); ++i ){
        REQUIRE( correct_s1[i] == Approx(s1[i]).epsilon(1e-6) );
        REQUIRE( correct_s2[i] == Approx(s2[i]).epsilon(1e-6) );
      }

    } // WHEN
  } // GIVEN

  GIVEN( "varying initial energies" ){
    u = -0.2;
    WHEN( "e = 1e-6" ){
      e = 1e-6;
      std::vector<double> s1(nemax,0.0),s2(nemax,0.0),
      correct_s1 { },
      correct_s2 { };
  
      sigu(nemax,e,u,tev,alphas,betas,sab,tolin,az,iinc,lat,lasym,sb,sb2,teff,s1,s2);
    
      for ( size_t i = 0; i < correct_s1.size(); ++i ){
        //REQUIRE( correct_s1[i] == Approx(s1[i]).epsilon(1e-6) );
        //REQUIRE( correct_s2[i] == Approx(s2[i]).epsilon(1e-6) );
      }

    } // WHEN 
  
  } // GIVEN
} // TEST CASE


