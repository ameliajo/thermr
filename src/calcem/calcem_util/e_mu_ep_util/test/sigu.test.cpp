#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include "calcem/calcem_util/e_mu_ep_util/sigu.h"
#include "generalTools/testing.h"



TEST_CASE( "sigu" ){
  int lasym = 0, lat = 1, iinc = 2, nemax = 5000;
  double e = 1e-5, tev = 2.55e-2, az = 0.99917, sb = 4.0, sb2 = 0.0, teff = 0.12, tolin = 5e-2, u = -1.0;


  std::vector<double> alphas { 1.1, 2.2, 3.3, 4.5, 5.8 },
                       betas { 0.1, 0.2, 1.3, 1.4, 2.5, 2.6, 3.7 };
  std::vector<double> sab(alphas.size()*betas.size());
  for ( size_t i = 0; i < alphas.size(); ++i ){
    for ( size_t j = 0; j < betas.size(); ++j ){
      sab[i*betas.size()+j] = 0.01*((j+1) + 0.1*(i+1));
    } 
  } 
  std::cout.precision(15);
  std::vector<double> s1(nemax,0.0),s2(nemax,0.0);
  sigu(nemax,e,u,tev,alphas,betas,sab,tolin,az,iinc,lat,lasym,sb,sb2,teff,s1,s2);
  std::vector<double> 
    correct_s1 { 393.910081, 0.0, 4.309201E-13, 8.618402E-13, 1.7236804E-12, 
    1.9342239E-8, 3.8682755E-8, 7.7363787E-8, 1.5472585E-7, 3.0944997E-7, 
    6.1889821E-7, 1.2377947E-6, 2.4755877E-6, 4.9511736E-6, 9.9023454E-6, 
    1.9804689E-5, 3.9609376E-5, 7.9218751E-5, 1.584375E-4, 3.16875E-4, 
    6.3375E-4, 1.2675E-3, 2.535E-3, 3.8025E-3, 4.43625E-3, 4.753125E-3, 
    4.9115625E-3, 4.9907813E-3, 5.0303907E-3, 5.0501954E-3, 5.0600977E-3, 
    5.0650489E-3, 5.0675245E-3, 5.0687623E-3, 5.0693812E-3, 5.0696906E-3, 
    5.0698453E-3, 5.0699227E-3, 5.0699614E-3, 5.0699807E-3, 5.0699904E-3, 
    5.0699952E-3, 5.0699976E-3, 5.0699988E-3, 5.0699994E-3, 5.0699997E-3, 
    5.0699999E-3, 5.07E-3, 1.20275E-2, 1.8985E-2, 3.29E-2, 3.543E-2, 6.326E-2, 
    6.579E-2, 7.9705E-2, 8.66625E-2, 9.014125E-2, 9.1880625E-2, 9.2750313E-2, 
    9.3185157E-2, 9.3402579E-2, 9.351129E-2, 9.3565645E-2, 9.3592823E-2, 
    9.3606412E-2, 9.3613206E-2, 9.3616603E-2, 9.3618302E-2, 9.3619151E-2, 
    9.3619576E-2, 9.3619788E-2, 9.3619894E-2, 9.3619947E-2, 9.3619974E-2, 
    9.3619987E-2, 9.3619994E-2, 9.3619997E-2, 9.3619999E-2, 9.362E-2, 0.0, 0.0, 
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
    0.0, 0.0, 0.0, 0.},
    correct_s2 { 78.0, 0.0, 0.86812825908, 1.2276132005, 1.7358961666, 
    176.21088440, 244.91981576, 338.16164285, 462.73065256, 625.71756699, 
    833.24881808, 1088.5346227, 1389.5569827, 1727.2900621, 2085.6787026, 
    2444.1229634, 2781.8564282, 3082.3091937, 3335.5023797, 3537.7410097, 
    3689.1586656, 3790.0173521, 3836.0912359, 3832.4067140, 3823.7633604, 
    3818.4357145, 3815.5700435, 3814.0916618, 3813.3416363, 3812.9639802, 
    3812.7745004, 3812.6795972, 3812.6321052, 3812.6083491, 3812.5964686, 
    3812.5905286, 3812.5875585, 3812.5860724, 3812.5853294, 3812.5849588, 
    3812.5847726, 3812.5846804, 3812.5846343, 3812.5846113, 3812.5845998, 
    3812.5845940, 3812.5845902, 1629.3457424, 2160.1978761, 2361.7853083, 
    2435.4047613, 2429.3914507, 1901.8474047, 1864.3607137, 1607.0867876, 
    1457.6959400, 1380.6181996, 1341.7985483, 1322.3552138, 1312.6295853, 
    1307.7663214, 1305.3346438, 1304.1188132, 1303.5108869, 1303.2069240, 
    1303.0549538, 1302.9789687, 1302.9409649, 1302.9219743, 1302.9124677, 
    1302.9077257, 1302.9053546, 1302.9041691, 1302.9035652, 1302.9032744, 
    1302.9031178, 1302.9030507, 1302.9030060, 12.967700530, 0.0, 0.0, 0.0, 0.0, 
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
    0.0, 0.0 };

  for ( size_t i = 0; i < correct_s1.size(); ++i ){
    REQUIRE( correct_s1[i] == Approx(s1[i]).epsilon(1e-6) );
  }
  for ( size_t i = 0; i < correct_s2.size(); ++i ){
    REQUIRE( correct_s2[i] == Approx(s2[i]).epsilon(1e-6) );
  }







} // TEST CASE



/*

TEST_CASE( "sigu" ){
  GIVEN( "inputs" ){
    int lasym = 0, lat = 1, iinc = 2, nemax = 5000;

    std::cout << std::setprecision(10) ;
    double e = 1.0e-6, tev = 1.5e-4, az = 11.9,
      tevz = 2.2e-4, az2 = 0.0, teff2 = 0.0, cliq = 1.0, sb = 5.53, sb2 = 0.0,
      teff = 6.14e-2, tolin = 5e-2, u = 0.1;

    std::vector<double> alpha(40),beta(80),s(2*nemax,0.0);
    for ( int i = 0; i < 40;     ++i ){ alpha[i] = 0.1*i + 0.001; }
    for ( int i = 0; i < 80;     ++i ){ beta[i]  = 0.2*i + 0.025; }
    for ( int i = 0; i < 80;     ++i ){ beta[i]  = 10.5*i + 10.5; }
    for ( int i = 0; i < 100000; ++i ){ s[i]     = 0.01  + i%12; }

    std::vector<std::vector<double>> sab(alpha.size(), std::vector<double>(beta.size(),0));
    for ( size_t i = 0; i < alpha.size(); ++i ){
      for ( size_t j = 0; j < beta.size(); ++j ){
        sab[i][j] = 0.2*i + 0.4*j + (i+j)%5;
      } 
    } 


    sigu( nemax, e, u, tev, alpha, beta, sab, s, tolin, az, tevz, iinc, 
        lat, lasym, cliq, sb, sb2, teff );




    //std::vector<double> correctS {  614757195474.47119, 431.0 };
    //std::vector<double> correctS { 1174.2958039475825, 52.0 };
    std::vector<double> correctS { 1174.2958039475825, 52.0, 0.0, 0.0, 
      4.5136720000004504e-6, 7.9667611490571083e-2, 6.7705080000006768e-6, 
      0.26639656534087930, 9.0273440000009007e-6, 0.60063893481001063, 
      1.1284180000001128e-5, 1.1103909115305708, 1.3541016000001354e-5, 
      1.8205145865559995, 1.8054688000001801e-5, 3.9314239506017423, 
      2.2568360000002256e-5, 7.0993596806809567, 2.7082032000002707e-5, 
      11.475208745752839, 3.6109375000003607e-5, 24.407710114179125, 
      4.5136719000004509e-5, 43.784505818912315, 5.4164063000005412e-5, 
      70.597927221726295, 7.2218750000007214e-5, 150.34013168115280, 
      9.0273440000009024e-5, 271.10064054643499, 1.0832813000001082e-4, 
      440.27923914479925, 1.4443750000001440e-4, 954.00981953385872, 
      1.8054688000001805e-4, 1753.9176778669741, 2.1665625000002165e-4, 
      2906.9586344575760, 2.5276563000002525e-4, 4485.8893425961742, 
      2.8887500000002880e-4, 6570.2376469395012, 3.6109375000003608e-4, 
      12612.409686545541, 4.3331250000004331e-4, 21838.152040725177, 
      5.0553125000005054e-4, 35216.614346757058, 5.7775000000005760e-4, 
      53912.381167930333, 6.4996875000006488e-4, 79320.398069799776, 
      7.2218750000007216e-4, 113105.75049430141, 7.9440625000007934e-4, 
      165570.56515999799, 8.1246094000008112e-4, 300628.44634561130, 
      8.3051563000008290e-4, 533434.13269137184, 8.4857032000008469e-4, 
      925685.28788165934, 8.6662500000008662e-4, 1554564.8833292203, 
      1.0110625000001011e-3, 2007121.9100631122, 1.0471719000001048e-3, 
      2135882.3178081256, 1.0832813000001083e-3, 1333745.1166183802, 
      1.1193907000001120e-3, 712821.83140361239, 1.1555000000001154e-3, 
      380761.33622921346, 1.1916094000001191e-3, 203283.11663873371, 
      1.2277188000001228e-3, 108477.65602143780, 1.2638282000001263e-3, 
      41894.794192799709, 1.2818829000001283e-3, 23007.037092165556, 
      1.2999375000001300e-3, 12808.549161717869, 1.3179922000001317e-3, 
      7255.3170901038202, 1.3360469000001337e-3, 7678.2022049014104, 
      1.3721563000001372e-3, 8587.6201896354232, 1.4443750000001445e-3, 
      10687.307726530495, 1.5888125000001589e-3, 16252.332955483278, 
      1.7332500000001732e-3, 24205.012524589642, 1.8776875000001876e-3, 
      35423.425091770419, 2.0221250000002021e-3, 51074.152088908559 };
   for ( size_t i = 0; i < correctS.size(); ++i ){ 
     REQUIRE( correctS[i] == Approx(s[i]).epsilon(1e-5) );
   }

  } // GIVEN
} // TEST CASE
*/

