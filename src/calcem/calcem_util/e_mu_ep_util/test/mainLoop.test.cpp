#include "catch.hpp"
#include "calcem/calcem_util/e_mu_ep_util/mainLoop.h"
#include "generalTools/testing.h"


TEST_CASE( " mu-E' ordering " ){
  int imax = 20, lat = 0, iinc = 2, lasym = 0;
  double tev = 2.5507297688e-2, tol = 0.05;
  std::vector<double> 
  alphas { 1.1, 2.2, 3.3, 4.5, 5.8 },
  betas { 0.1, 0.2, 1.3, 1.4, 2.5, 2.6, 3.7 },
  sab {-0.18259619, -0.30201347, -3.93654779, -3.98809174, -4.33545607, 
  -4.39515402, -5.88934921, -0.76225291, -0.81658341, -3.14161459, -3.30566186, 
  -3.90554652, -3.96233362, -5.23696660, -1.19182884, -1.23155471, -2.79610565, 
  -2.95633099, -3.74989225, -3.80837585, -4.93373911, -1.58342860, -1.61310713, 
  -2.71233943, -2.84291608, -3.69699590, -3.75199349, -4.77433858, -1.96121202, 
  -1.98720663, -2.78454600, -2.88531460, -3.71288120, -3.77142141, -4.71158392 };

  double az = 0.99917, sigma_b = 163.72792237, sigma_b2 = 0.0, teff = 0.120441926;
  std::vector<double> eVec, correctEnergies;
  double enow = 1e-5;

  std::vector<double> correct_uj;




  enow = 1e-6; 
  auto out = do_530_etc(enow,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff);
  REQUIRE( 6325.1941714771147 == Approx(std::get<0>(out)).epsilon(1e-6) );
  REQUIRE( 2.8371734942764979E-003 == Approx(std::get<1>(out)).epsilon(1e-6) );
  correct_uj = {-1, -0.75, -0.625, -0.5, -0.375, -0.25, -0.125, 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 1 };
  for (size_t i = 0; i < correct_uj.size(); ++i){
    REQUIRE( correct_uj[i] == Approx(std::get<2>(out)[i]).epsilon(1e-6) );
  }




  enow = 1e-5;
  out = do_530_etc(enow,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff);
  REQUIRE( 2004.20546598 == Approx(std::get<0>(out)).epsilon(1e-6) );
  REQUIRE( 0.00903406640 == Approx(std::get<1>(out)).epsilon(1e-6) );
  correct_uj = {-1, -0.75, -0.625, -0.5, -0.375, -0.25, -0.125, 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 1 };
  for (size_t i = 0; i < correct_uj.size(); ++i){
    REQUIRE( correct_uj[i] == Approx(std::get<2>(out)[i]).epsilon(1e-6) );
  }



  enow = 1e-4;
  out = do_530_etc(enow,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff);
  REQUIRE( 648.0310824 == Approx(std::get<0>(out)).epsilon(1e-6) );
  REQUIRE( 0.031418177 == Approx(std::get<1>(out)).epsilon(1e-6) );
  correct_uj = {-1, -0.75, -0.625, -0.5, -0.375, -0.25, -0.125, 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 1 };
  for (size_t i = 0; i < correct_uj.size(); ++i){
    REQUIRE( correct_uj[i] == Approx(std::get<2>(out)[i]).epsilon(1e-6) );
  }


  enow = 1e-2;
  out = do_530_etc(enow,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff);
  REQUIRE( 123.58909310679307 == Approx(std::get<0>(out)).epsilon(1e-6) );
  REQUIRE( 9.0734245819064419E-002 == Approx(std::get<1>(out)).epsilon(1e-6) );
  correct_uj = {-1, -0.75, -0.625, -0.5, -0.375, -0.25, -0.125, 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 1 };
  for (size_t i = 0; i < correct_uj.size(); ++i){
    REQUIRE( correct_uj[i] == Approx(std::get<2>(out)[i]).epsilon(1e-6) );
  }


  enow = 1.0;
  out = do_530_etc(enow,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff);
  REQUIRE( 40.227979467296890 == Approx(std::get<0>(out)).epsilon(1e-6) );
  REQUIRE( 0.54810870138245560  == Approx(std::get<1>(out)).epsilon(1e-6) );
  correct_uj = {-1, -0.75, -0.625, -0.5, -0.375, -0.25, -0.125, 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 1 };
  for (size_t i = 0; i < correct_uj.size(); ++i){
    REQUIRE( correct_uj[i] == Approx(std::get<2>(out)[i]).epsilon(1e-6) );
  }





  enow = 1e-2;


  tol = 1.0;
  out = do_530_etc(enow,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff);
  REQUIRE( 122.34746244407418 == Approx(std::get<0>(out)).epsilon(1e-6) );
  REQUIRE( 2.4551863335822984E-002 == Approx(std::get<1>(out)).epsilon(1e-6) );
  correct_uj = {-1, -0.75, -0.625, -0.5, -0.375, -0.25, -0.125, 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 1 };
  for (size_t i = 0; i < correct_uj.size(); ++i){
    REQUIRE( correct_uj[i] == Approx(std::get<2>(out)[i]).epsilon(1e-6) );
  }

  tol = 5.0;
  out = do_530_etc(enow,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff);
  REQUIRE( 143.75464230251364 == Approx(std::get<0>(out)).epsilon(1e-6) );
  REQUIRE( 3.8463983799896351E-002 == Approx(std::get<1>(out)).epsilon(1e-6) );
  correct_uj = {-1, -0.75, -0.625, -0.5, -0.375, -0.25, -0.125, 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 1 };
  for (size_t i = 0; i < correct_uj.size(); ++i){
    REQUIRE( correct_uj[i] == Approx(std::get<2>(out)[i]).epsilon(1e-6) );
  }

  tol = 10.0;
  out = do_530_etc(enow,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff);
  REQUIRE( 145.79479928728830 == Approx(std::get<0>(out)).epsilon(1e-6) );
  REQUIRE( 5.0169921218852623E-002 == Approx(std::get<1>(out)).epsilon(1e-6) );
  correct_uj = {-1, -0.75, -0.625, -0.5, -0.375, -0.25, -0.125, 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 1 };
  for (size_t i = 0; i < correct_uj.size(); ++i){
    REQUIRE( correct_uj[i] == Approx(std::get<2>(out)[i]).epsilon(1e-6) );
  }



} // TEST CASE







TEST_CASE( "E-mu-E' ordering " ){
  int imax = 20, lat = 0, iinc = 2, lasym = 0;
  double tev = 2.5507297688e-2, tol = 0.05;
  std::vector<double> 
  alphas { 1.1, 2.2, 3.3, 4.5, 5.8 },
  betas { 0.1, 0.2, 1.3, 1.4, 2.5, 2.6, 3.7 },
  sab {-0.18259619, -0.30201347, -3.93654779, -3.98809174, -4.33545607, 
  -4.39515402, -5.88934921, -0.76225291, -0.81658341, -3.14161459, -3.30566186, 
  -3.90554652, -3.96233362, -5.23696660, -1.19182884, -1.23155471, -2.79610565, 
  -2.95633099, -3.74989225, -3.80837585, -4.93373911, -1.58342860, -1.61310713, 
  -2.71233943, -2.84291608, -3.69699590, -3.75199349, -4.77433858, -1.96121202, 
  -1.98720663, -2.78454600, -2.88531460, -3.71288120, -3.77142141, -4.71158392 };

  double az = 0.99917, sigma_b = 163.72792237, sigma_b2 = 0.0, teff = 0.120441926;
  std::vector<double> eVec, correctEnergies;
  std::vector<double> correctSCR;

  //double enow = 1e-2;
  eVec = { 1e-2 };

  auto out = mu_ep(eVec,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff);
  auto totalSCR = std::get<1>(out);
  std::vector<double> 
  correctSCR_0 = { 0, 0, 4.30920E-10, 2.091391E-3, 8.61840E-10, 2.957775E-3, 
  1.723680E-9, 4.183130E-3, 2.290573E-7, 4.830791E-2, 4.563910E-7, 6.824490E-2, 
  9.110582E-7, 9.653521E-2, 1.820393E-6, 0.13668894, 3.639062E-6, 0.19374016, 
  7.276400E-6, 0.27495508, 1.455108E-5, 0.39093138, 2.910043E-5, 0.55738507, 
  5.819914E-5, 7.982454E-1, 1.163966E-4, 1.15147002, 2.327914E-4, 1.68104760, 
  4.655810E-4, 2.50435616, 9.311603E-4, 3.86118945, 1.862319E-3, 6.30801204, 
  3.724636E-3, 11.3392485, 5.586953E-3, 15.3398326, 7.449270E-3, 16.8676709, 
  1.255073E-2, 15.9593966, 1.510146E-2, 14.2240943, 1.860871E-2, 9.91032913, 
  2.211597E-2, 7.19511127, 2.562322E-2, 5.22054068, 2.913047E-2, 4.15656184, 
  3.614498E-2, 2.76220540, 4.315949E-2, 1.79919868, 4.571022E-2, 1.54023970, 
  5.973923E-2, 0.86174463, 7.376824E-2, 0.49944285, 7.631897E-2, 0.45461919, 
  7.982623E-2, 0.39474058, 8.070304E-2, 0.38027505, 8.092225E-2, 0.37669678, 
  8.092396E-2, 0.37666888, 8.092482E-2, 0.37665492, 8.092487E-2, 0.37665404, 
  8.092490E-2, 3.766536E-1, 8.092492E-2, 0.22718637, 8.092503E-2, 0.22718545, 
  8.092524E-2, 0.22718362, 8.092567E-2, 0.22717997, 8.092910E-2, 0.22715071, 
  8.093595E-2, 0.22709222, 8.094965E-2, 0.22697527, 8.097705E-2, 0.22674156, 
  8.103185E-2, 0.22627482, 8.114145E-2, 0.22534419, 8.157986E-2, 0.22165903, 
  8.333348E-2, 0.20750076, 9.034799E-2, 0.15923299 }, 
  correctSCR_2 { 0, 0, 1.104587E-9, 3.348397E-3, 2.209175E-9, 4.735512E-3, 
  4.418349E-9, 6.697354E-3, 2.317519E-7, 4.855694E-2, 4.590855E-7, 6.837779E-2, 
  9.137526E-7, 9.654190E-2, 1.823087E-6, 0.13651965, 3.641755E-6, 0.19327509, 
  7.279092E-6, 0.27394354, 1.455377E-5, 3.888738E-1, 2.910311E-5, 0.55331018, 
  5.820181E-5, 0.79030441, 1.163992E-4, 1.13623631, 2.327940E-4, 1.65242632, 
  4.655835E-4, 2.45229571, 9.311627E-4, 3.77190447, 1.862321E-3, 6.17487363, 
  3.724637E-3, 11.2340743, 5.586954E-3, 16.9101287, 7.449270E-3, 19.5371096, 
  1.255073E-2, 19.0269439, 1.510146E-2, 16.7865802, 1.860871E-2, 11.2246444, 
  2.211597E-2, 7.82352113, 2.562322E-2, 5.66216515, 2.913047E-2, 4.21384864, 
  3.614498E-2, 2.48184627, 4.315949E-2, 1.64769203, 4.571022E-2, 1.41368180, 
  5.973923E-2, 0.84270638, 7.376824E-2, 0.50196392, 7.631897E-2, 0.46014534, 
  9.034799E-2, 0.25215334 }, 
  correctSCR_5 { 0, 0, 6.981995E-9, 8.418356E-3, 1.396399E-8, 1.190578E-2, 
  2.792798E-8, 1.683818E-2, 7.449270E-3, 21.4382910, 1.255073E-2, 22.9919788, 
  1.510146E-2, 20.0251088, 1.860871E-2, 12.7658125, 2.211597E-2, 8.44229035, 
  2.562322E-2, 5.79024532, 2.913047E-2, 4.11121686, 3.263773E-2, 3.01403869, 
  3.614498E-2, 2.27463937, 4.315949E-2, 1.36850860, 4.571022E-2, 1.18190684, 
  7.376824E-2, 0.49018879, 7.631897E-2, 4.507353E-1, 9.034799E-2, 0.25055336, 
  9.736249E-2, 0.17403347 };

  std::vector<double> correct_uj = {-1, -0.75, -0.625, -0.5, -0.375, -0.25, -0.125, 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 1 };
  REQUIRE( ranges::equal(std::get<0>(out),correct_uj,equal) );
  for ( size_t i = 0; i < correctSCR_0.size(); ++i ){
    REQUIRE( totalSCR[0][i] == Approx(correctSCR_0[i]).epsilon(1e-6) );
  }
  for ( size_t i = 0; i < correctSCR_2.size(); ++i ){
    REQUIRE( totalSCR[2][i] == Approx(correctSCR_2[i]).epsilon(1e-6) );
  }
  for ( size_t i = 0; i < correctSCR_5.size(); ++i ){
    REQUIRE( totalSCR[5][i] == Approx(correctSCR_5[i]).epsilon(1e-6) );
  }






  eVec = { 1e-5 };
  out = mu_ep(eVec,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff);
  totalSCR = std::get<1>(out);
  correctSCR = { 0, 0, 4.30920E-13, 1.464430E-2, 8.61840E-13, 2.070840E-2, 
1.72368E-12, 2.928255E-2, 1.950040E-8, 2.98444322, 3.899907E-8, 4.14807360, 
7.799641E-8, 5.72712134, 1.559911E-7, 7.83659052, 3.119805E-7, 10.5964754, 
6.239592E-7, 14.1104102, 1.247917E-6, 18.4326009, 2.495832E-6, 23.5285372, 
4.991662E-6, 29.2442366, 9.983321E-6, 35.3038992, 1.996664E-5, 41.3468829, 
3.993328E-5, 46.9904971, 7.986656E-5, 51.8807205, 1.597331E-4, 55.6877503, 
3.194662E-4, 58.0175919, 6.389325E-4, 58.2322955, 1.277865E-3, 55.2214749, 
2.555730E-3, 47.3732498, 5.111460E-3, 33.5696116, 5.111567E-3, 24.2192580, 
5.111674E-3, 24.2189539, 5.111888E-3, 24.2183455, 5.112316E-3, 24.2171288, 
5.113172E-3, 24.2146954, 5.114885E-3, 24.2098294, 5.118310E-3, 24.2000992, 
5.125160E-3, 24.1806475, 5.138860E-3, 24.1417783, 5.166260E-3, 24.0641767, 
5.221061E-3, 23.9095257, 5.330663E-3, 23.6024662, 5.549866E-3, 22.9975569, 
5.988273E-3, 21.8259877, 6.865086E-3, 19.6411743, 8.618713E-3, 15.8922795, 
1.212597E-2, 10.4740702, 1.563322E-2, 7.00918359, 1.914047E-2, 4.76897518, 
2.264773E-2, 3.29687586, 2.615498E-2, 2.31324729, 2.966223E-2, 1.62093411, 
3.316949E-2, 1.16809696, 3.572022E-2, 1.13392943, 4.974923E-2, 1.09011839, 
6.377824E-2, 0.78559595, 6.632897E-2, 0.73030157, 8.035799E-2, 0.41525738, 
8.737250E-2, 0.28765478 };
  REQUIRE( ranges::equal(std::get<0>(out),correct_uj,equal) );
  for ( size_t i = 0; i < correctSCR.size(); ++i ){
    REQUIRE( totalSCR[0][i] == Approx(correctSCR[i]).epsilon(1e-6) );
  }



  eVec = { 5.0 };
  out = mu_ep(eVec,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff);
  totalSCR = std::get<1>(out);
  correctSCR = { 0, 0, 2.154601E-7, 1.514951E-4, 4.309201E-7, 2.142270E-4, 
8.618402E-7, 3.029235E-4, 1.968234E-5, 1.445061E-3, 3.850283E-5, 2.019164E-3, 
7.614383E-5, 2.835320E-3, 1.514258E-4, 3.989305E-3, 3.019898E-4, 5.613554E-3, 
6.031177E-4, 7.887280E-3, 1.205374E-3, 1.104333E-2, 2.409885E-3, 1.535882E-2, 
4.818909E-3, 2.109429E-2, 9.636956E-3, 2.829520E-2, 1.927305E-2, 3.628273E-2, 
3.854524E-2, 4.265231E-2, 7.708962E-2, 4.232956E-2, 0.15417837, 3.012932E-2, 
0.23126712, 1.879896E-2, 0.30835587, 1.112764E-2, 0.38544463, 6.402796E-3, 
0.46253338, 3.619745E-3, 0.53962213, 2.021977E-3, 0.61671088, 1.119722E-3, 
0.69379964, 6.160328E-4, 0.77088839, 3.371953E-4, 0.84797714, 1.838169E-4, 
0.92506589, 9.987087E-5, 1.00215460, 5.411107E-5, 1.07924340, 2.924926E-5, 
1.15633220, 1.577879E-5, 1.23342090, 8.497312E-6, 1.31050970, 4.569137E-6, 
1.38759840, 2.453644E-6, 1.46468720, 1.316070E-6 };
  REQUIRE( ranges::equal(std::get<0>(out),correct_uj,equal) );
  for ( size_t i = 0; i < correctSCR.size(); ++i ){
    REQUIRE( totalSCR[0][i] == Approx(correctSCR[i]).epsilon(1e-6) );
  }






}



