#include "catch.hpp"
#include "calcem/calcem_util/e_ep_mu_util/e_ep_mu.h"
#include <range/v3/all.hpp>
#include "generalTools/testing.h"
#include <range/v3/all.hpp>

template <typename RangeInt, typename Range, typename Float>
void checkFirstEprime( const RangeInt& jbetaVec, int lat, const Float& enow, const Range& betas, const Range& x, const Float& tev, const RangeInt& finalJbeta, const Range& finalEp ){
  int jbeta;
  Float ep;
  for ( size_t i = 0; i < jbetaVec.size(); ++i ){
    jbeta = jbetaVec[i];
    ep = findFirstEprime( lat, jbeta, enow, betas, x, tev );
    REQUIRE( finalJbeta[i] == jbeta );
    REQUIRE( finalEp[i] == Approx(ep).epsilon(1e-6) );
  }
}




/*

TEST_CASE( "do we need a midpoint" ){ 
  std::vector<double> x(20,0.0), y(20*65,0.0); 
  
  std::vector<double> initialY { 195158.09939262934, -0.87238772679496734, -0.61817875518802279, -0.36545660682035069, -0.11418564421716945, 0.13568062577950979, 0.38420180765640111, 0.63141488906433418, 0.87738226704862166 };

  x[0] = 2.54E-3;
  
  for (size_t i = 0; i < initialY.size(); ++i){ 
    y[i*x.size()+0] = initialY[i]; 
  }



  double xm = 1.27e-3;
  std::vector<double> s { 235586.48147822541, -0.86806816809249565, -0.60677324533223020, -0.34926974510882292, -9.5577908119815064E-002, 0.15436521665672856, 0.40054354740949549, 0.64302993119542795, 0.88181200416435501, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  int i = 2;
  int nl = 9;
  double tol = 1.0;
  REQUIRE( needMidpoint(x,y,xm,i,nl,s,tol) == false );
  tol = 1e-2;
  REQUIRE( needMidpoint(x,y,xm,i,nl,s,tol) == true  );
  tol = 5e-1;
  REQUIRE( needMidpoint(x,y,xm,i,nl,s,tol) == true  );
  tol = 0.56;
  REQUIRE( needMidpoint(x,y,xm,i,nl,s,tol) == true  );
  tol = 0.59;
  REQUIRE( needMidpoint(x,y,xm,i,nl,s,tol) == false );


} // TEST CASE
*/




/*

TEST_CASE( "do 330" ){ 


  int imax = 20;
  std::vector<double> x(imax,0.0), y(imax*65,0.0), initialY { 194040.3395, 
                     -0.745374226, -0.240023402, 0.259736457, 0.754304965 };
  x[0] = 2.5607298E-3;
  for (size_t i = 0; i < initialY.size(); ++i){ y[i*x.size()+0] = initialY[i]; }

  int lat = 0, iinc = 2, lasym = 0;
  double tev = 2.5507297688e-2, tol = 5.0E-2;
  double enow;
  std::vector<double> alphas { 1.1, 2.2, 3.3, 4.5, 5.8 },
                       betas { 0.1, 0.2, 1.3, 1.4, 2.5, 2.6, 3.7 },
                       sab { -0.18259619, -0.30201347, -3.93654779, -3.98809174, 
  -4.33545607, -4.39515402, -5.88934921, -0.76225291, -0.81658341, -3.14161459, 
  -3.30566186, -3.90554652, -3.96233362, -5.23696660, -1.19182884, -1.23155471, 
  -2.79610565, -2.95633099, -3.74989225, -3.80837585, -4.93373911, -1.58342860, 
  -1.61310713, -2.71233943, -2.84291608, -3.69699590, -3.75199349, -4.77433858, 
  -1.96121202, -1.98720663, -2.78454600, -2.88531460, -3.71288120, -3.77142141, 
  -4.71158392 };

  double az = 0.99917, sigma_b = 163.72792237, sigma_b2 = 0.0, teff = 0.120441926;
  int nnl = -5, nl = 5, jbeta = 1,j = 0;

  std::vector<double> scr(2*imax*65,0.0), xsi(100,0.0);
  double xlast = 0.0, ylast = 0.0;
  int ie = 0;
  


  double ulast, u2last, u3last;
  std::vector<double> correctX(imax), pdf(imax), mu1(imax), mu2(imax), mu3(imax), mu4(imax);


  GIVEN( "Small initial energy (E=1e-5 eV)" ){
    enow = 1e-5;

    THEN( "Returned x values, y vector, and moment values are correct" ){
      auto out = do_330(enow,x,y,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nnl,nl,jbeta,scr,xsi,ie,xlast,ylast);

      ulast  = std::get<0>(out); REQUIRE( 2609.673 == Approx(ulast ).epsilon(1e-6));
      u2last = std::get<1>(out); REQUIRE(-6650.153 == Approx(u2last).epsilon(1e-6));
      u3last = std::get<2>(out); REQUIRE( 358.7471 == Approx(u3last).epsilon(1e-6));

      correctX = { 2.560729E-3, 1.920547E-3, 1.280364E-3, 3.200912E-4, 1.600456E-4, 
      8.002281E-5, 4.001140E-5, 2.000570E-5, 1.000285E-5, 5.001426E-6, 2.500713E-6, 
      1.250356E-6, 6.251782E-7, 3.125891E-7, 1.562945E-7, 7.814728E-8, 3.907364E-8, 
      1.953682E-8, 9.768411E-9, 0.0 };
      pdf = { 194040.3, 213357.4, 234616.8, 270904.3, 278088.3, 281762.2, 
           284435.9, 284849.7, 281681.0, 201641.8, 142771.2, 100595.0, 71050.27, 
           50112.44, 35395.39, 25015.29, 17684.03, 12502.95, 8840.380, 0.0};
      mu1 = {     -0.7453742, -0.7422468, -0.7375231, -0.7158896, -0.6992124, 
      -0.6768329, -0.6449507, -0.6021970, -0.5463158, -0.6019580, -0.6442864, 
      -0.6756062, -0.6972283, -0.7129893, -0.7239285, -0.7315982, -0.7369996, 
      -0.7408188, -0.7435070, 0.00000000 };
      mu2 = {      -0.24002340, -0.23307917, -0.22265027, -0.17496084, -0.13820280, 
      -0.08941394, -0.02005056,  0.07379239,  0.19662745,  0.07431822, -0.01860502, 
      -0.08672420, -0.13381656, -0.16855131, -0.19263496, -0.20951361, -0.22139824, 
      -0.22977689, -0.23570553,  0.0 };
      mu3 = {    0.2597364, 0.2667551, 0.2772268, 0.3250109, 0.3618243, 0.4093513, 
      0.4769398, 0.5740460, 0.6965196, 0.5745724, 0.4783592, 0.4120090, 0.3662356, 
      0.3314537, 0.3073638, 0.2904852, 0.2786010, 0.2702225, 0.2643070, 0.0 };
      mu4 = {    0.7543049, 0.7574966, 0.7623170, 0.7840282, 0.8005880, 0.8224674, 
      0.8530495, 0.8969429, 0.9528127, 0.8971790, 0.8537006, 0.8236852, 0.8025615, 
      0.7869531, 0.7760527, 0.7683948, 0.7629976, 0.7591794, 0.7564790, 0.0 };

      //REQUIRE( 1  == i );
      REQUIRE( 20 == j );
      REQUIRE( 2  == jbeta );

      REQUIRE( ranges::equal(x,correctX,equal) );
      std::vector<std::vector<double>> correct { pdf, mu1, mu2, mu3, mu4 };
      for ( size_t i = 0; i < correct.size(); ++i ){
        for ( size_t j = 0; j < correct[i].size(); ++j ){
          REQUIRE( correct[i][j] == Approx(y[i*x.size()+j]).epsilon(1e-6) );
        }
      }
      for ( size_t i = correct.size()*x.size(); i < y.size(); ++i){
        REQUIRE( 0.0 == Approx(y[i]).epsilon(1e-6) );
      }

      std::vector<double> correctSCR { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.768411E-9, 
      8.8403807E3,-7.435070E-1,-2.357055E-1, 2.643070E-1, 7.564790E-1, 1.953682E-8, 
      1.2502953E4,-7.408188E-1,-2.297769E-1, 2.702225E-1, 7.591794E-1, 3.907364E-8, 
      1.7684034E4,-7.369996E-1,-2.213982E-1, 2.786010E-1, 7.629976E-1, 7.814728E-8, 
      2.5015295E4,-7.315982E-1,-2.095136E-1, 2.904852E-1, 7.683948E-1, 1.562945E-7, 
      3.5395394E4,-7.239285E-1,-1.926349E-1, 3.073638E-1, 7.760527E-1, 3.125891E-7, 
      5.0112448E4,-7.129893E-1,-1.685513E-1, 3.314537E-1, 7.869531E-1, 6.251782E-7, 
      7.1050277E4,-6.972283E-1,-1.338165E-1, 3.662356E-1, 8.025615E-1, 1.250356E-6, 
      1.0059506E5,-6.756062E-1,-8.672421E-2, 4.120090E-1, 8.236852E-1, 2.500713E-6, 
      1.4277126E5,-6.442864E-1,-1.860502E-2, 4.783592E-1, 8.537006E-1, 5.001426E-6, 
      2.0164182E5,-6.019580E-1, 7.431822E-2, 5.745724E-1, 8.971790E-1, 1.000285E-5, 
      2.8168109E5,-5.463158E-1, 1.966274E-1, 6.965196E-1, 9.528127E-1, 2.000570E-5, 
      2.8484972E5,-6.021970E-1, 7.379239E-2, 5.740460E-1, 8.969429E-1, 4.001140E-5, 
      2.8443599E5,-6.449507E-1,-2.005056E-2, 4.769398E-1, 8.530495E-1, 8.002281E-5, 
      2.8176229E5,-6.768329E-1,-8.941394E-2, 4.093513E-1, 8.224674E-1, 1.600456E-4, 
      2.7808831E5,-6.992124E-1,-1.382028E-1, 3.618243E-1, 8.005880E-1, 3.200912E-4, 
      2.7090434E5,-7.158896E-1,-1.749608E-1, 3.250109E-1, 7.840282E-1, 6.401824E-4, 
      2.5808226E5,-7.280949E-1,-2.018525E-1, 2.980850E-1, 7.718158E-1, 1.280364E-3, 
      2.3461686E5,-7.375232E-1,-2.226502E-1, 2.772268E-1, 7.623170E-1, 1.920547E-3, 
      2.1335745E5,-7.422468E-1,-2.330791E-1, 2.667551E-1, 7.574966E-1 };

        for ( size_t i = 0; i < correctSCR.size(); ++i ){
          REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
        }

    } // THEN
  } // GIVEN



  GIVEN( "Medium initial energy (E=1e-3 eV)" ){
    enow = 1e-3;

    THEN( "Returned x values, y vector, and moment values are correct" ){

      auto out = do_330(enow,x,y,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nnl,nl,jbeta,scr,xsi,ie,xlast,ylast);

      ulast  = std::get<0>(out); REQUIRE( 2993.879 == Approx(ulast ).epsilon(1e-6));
      u2last = std::get<1>(out); REQUIRE(-240.7431 == Approx(u2last).epsilon(1e-6));
      u3last = std::get<2>(out); REQUIRE( 427.3755 == Approx(u3last).epsilon(1e-6));
  

      correctX = { 2.5607298E-3, 2.5607297E-3, 2.5607295E-3, 6.4018245E-4, 
      1.6004562E-4, 8.0022810E-5, 4.0011405E-5, 2.0005703E-5, 1.0002852E-5, 
      5.0014260E-6, 2.5007130E-6, 1.2503565E-6, 6.2517825E-7, 3.1258913E-7, 
      1.5629457E-7, 7.8147285E-8, 3.9073643E-8, 1.9536822E-8, 9.7684110E-9, 0.0 };
      pdf = { 194040.3, 22928.53, 22928.53, 22004.47, 10421.57, 7271.812, 
      5109.760, 3602.049, 2543.152, 1796.915, 1270.129, 897.9471, 634.8844, 
      448.9098, 317.4197, 224.4469, 158.7070, 112.2224, 79.35316, 0.0 };
      mu1 = {      -0.7453742, -0.6639123, -0.6639123, -0.5966787, -0.6825695, 
      -0.7041852,  -0.7182603, -0.7278000, -0.7343954, -0.7390024, -0.7422431, 
      -0.7445198,  -0.7461270, -0.7472623, -0.7480646, -0.7486316, -0.7490325, 
      -0.7493159,  -0.7495163, 0.0 };
      mu2 = {      -0.24002340, -0.06436183, -0.06436181, 0.08567835, -0.10222948, 
      -0.14962484, -0.18042466, -0.20130111, -0.21574559, -0.22584518, -0.23293962, 
      -0.23794773, -0.24148212, -0.24397868, -0.24574300, -0.24699014, -0.24787184, 
      -0.24849522, -0.24893599, 0.0 };
      mu3 = {    0.2597364, 0.4272364, 0.4272364, 0.5853635, 0.3965669, 0.3496719, 
      0.3192034, 0.2985083, 0.2841580, 0.2741063, 0.2670555, 0.2620485, 0.2585157, 
      0.2560201, 0.2542564, 0.2530096, 0.2521280, 0.2515047, 0.2510640, 0.0 };
      mu4 = {    0.7543049, 0.8233353, 0.8233353, 0.9011784, 0.8153225, 0.7947936, 
      0.7812307, 0.7719456, 0.7654775, 0.7609340, 0.7577044, 0.7554555, 0.7538610, 
      0.7527317, 0.7519323, 0.7513667, 0.7509666, 0.7506835, 0.7504834, 0.0 };

      //REQUIRE( 1  == i );
      REQUIRE( 43 == j );
      REQUIRE( 2  == jbeta );


      REQUIRE( ranges::equal(x,correctX,equal) );
      std::vector<std::vector<double>> correct { pdf, mu1, mu2, mu3, mu4 };
      for ( size_t i = 0; i < correct.size(); ++i ){
        for ( size_t j = 0; j < pdf.size(); ++j ){
          REQUIRE( correct[i][j] == Approx(y[i*x.size()+j]).epsilon(1e-6) );
        }
      }
      for ( size_t i = correct.size()*x.size(); i < y.size(); ++i){
        REQUIRE( 0.0 == Approx(y[i]).epsilon(1e-6) );
      }
  
      std::vector<double> correctSCR {0.0, 0.0,  0.0,  0.0,  0.0,  0.0,  9.7684110E-9,  
      7.935317E1, -7.495163E-1, -2.489359E-1,  2.510640E-1,  0.7504834,  1.953682E-8,  
      1.122224E2, -7.493159E-1, -2.484952E-1,  2.515047E-1,  0.7506835,  3.907364E-8,  
      1.587070E2, -7.490325E-1, -2.478718E-1,  2.521281E-1,  0.7509666,  7.814728E-8,  
      2.244469E2, -7.486316E-1, -2.469901E-1,  2.530096E-1,  0.7513667,  1.562945E-7,  
      3.174197E2, -7.480646E-1, -2.457430E-1,  2.542564E-1,  0.7519323,  3.125891E-7,  
      4.489098E2, -7.472623E-1, -2.439786E-1,  2.560201E-1,  0.7527317,  6.251782E-7,  
      6.348844E2, -7.461270E-1, -2.414821E-1,  2.585157E-1,  0.7538610,  1.250356E-6,  
      8.979471E2, -7.445198E-1, -2.379477E-1,  2.620485E-1,  0.7554555,  2.500713E-6,  
      1.270129E3, -7.422431E-1, -2.329396E-1,  2.670555E-1,  0.7577044,  5.001426E-6,  
      1.796915E3, -7.390024E-1, -2.258451E-1,  2.741063E-1,  0.7609340,  1.000285E-5,  
      2.543152E3, -7.343954E-1, -2.157456E-1,  2.841580E-1,  0.7654776,  2.000570E-5,  
      3.602049E3, -7.278000E-1, -2.013011E-1,  2.985083E-1,  0.7719456,  4.001140E-5,  
      5.109760E3, -7.182603E-1, -1.804246E-1,  3.192034E-1,  0.7812307,  8.002281E-5,  
      7.271812E3, -7.041852E-1, -1.496248E-1,  3.496719E-1,  0.7947936,  1.600456E-4,  
      1.042157E4, -6.825695E-1, -1.022294E-1,  3.965669E-1,  0.8153225,  3.200912E-4,  
      1.505175E4, -6.496485E-1, -3.072243E-2,  4.657100E-1,  0.8468844,  6.401824E-4,  
      2.200447E4, -5.966787E-1,  8.567835E-2,  5.853635E-1,  0.9011784,  9.602736E-4,  
      2.786274E4, -5.468695E-1,  1.954414E-1,  6.954181E-1,  0.9523540,  1.280364E-3,  
      2.744101E4, -5.771819E-1,  1.285756E-1,  6.282528E-1,  0.9211990,  1.920547E-3,  
      2.500692E4, -6.313135E-1,  8.429071E-3,  5.050226E-1,  0.8609199,  2.240638E-3,  
      2.378573E4, -6.513582E-1, -3.717092E-2,  0.4529485, 0.8359541,  2.400684E-3,  
      2.346375E4, -6.564133E-1, -4.759721E-2,  0.4444134, 0.8318966,  2.480707E-3,  
      2.319436E4, -6.602429E-1, -5.614899E-2,  0.4356622, 0.8275429,  2.520718E-3,  
      2.306101E4, -6.620969E-1, -6.029621E-2,  0.4314102, 0.8254215,  2.540724E-3,  
      2.299466E4, -6.630093E-1, -6.233904E-2,  0.4293137, 0.8243741,  2.550727E-3,  
      2.296156E4, -6.634620E-1, -6.335292E-2,  0.4282727, 0.8238536,  2.555728E-3,  
      2.294504E4, -6.636874E-1, -6.385800E-2,  0.4277539, 0.8235942,  2.558229E-3,  
      2.293678E4, -6.637999E-1, -6.411007E-2,  0.4274950, 0.8234647,  2.559479E-3,  
      2.293265E4, -6.638561E-1, -6.423600E-2,  0.4273657, 0.8234000,  2.560104E-3,  
      2.293059E4, -6.638842E-1, -6.429893E-2,  0.4273010, 0.8233676,  2.560417E-3,  
      2.292956E4, -6.638983E-1, -6.433039E-2,  0.4272687, 0.8233514,  2.560573E-3,  
      2.292904E4, -6.639053E-1, -6.434612E-2,  0.4272525, 0.8233434,  2.560651E-3,  
      2.292878E4, -6.639088E-1, -6.435398E-2,  0.4272445, 0.8233393,  2.560690E-3,  
      2.292865E4, -6.639105E-1, -6.435791E-2,  0.4272404, 0.8233373,  2.560710E-3,  
      2.292859E4, -6.639114E-1, -6.435988E-2,  0.4272384, 0.8233363,  2.560720E-3,  
      2.292856E4, -6.639119E-1, -6.436086E-2,  0.4272374, 0.8233358,  2.560725E-3,  
      2.292854E4, -6.639121E-1, -6.436136E-2,  0.4272369, 0.8233355,  2.560727E-3,  
      2.292853E4, -6.639122E-1, -6.436160E-2,  0.4272366, 0.8233354,  2.560728E-3,  
      2.292853E4, -6.639122E-1, -6.436172E-2,  0.4272365, 0.8233353,  2.560729E-3,  
      2.292853E4, -6.639123E-1, -6.436178E-2,  0.4272365, 0.8233353,  2.560729E-3,  
      2.292853E4, -6.639123E-1, -6.436181E-2,  0.4272364, 0.8233353,  2.560729E-3,  
      2.292853E4, -6.639123E-1, -6.436183E-2,  0.4272364, 0.8233353,  0.0,  0.0};
        for ( size_t i = 0; i < correctSCR.size(); ++i ){
          REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
        }






    } // THEN 
  } // GIVEN

} // TEST CASE


TEST_CASE( "313" ) {
  int lat = 1, jbeta = -7;
  double enow, ep, tev = 2.5507297688E-2;
  std::vector<double> betas { 0.1, 0.2, 1.3, 1.4, 2.5, 2.6, 3.7 }, x(20,0.0);


  GIVEN( "Various jbeta values, fixed enow" ){ 
    std::vector<int> jbetaVec(15), finalJbeta(15);
    std::vector<double> finalEp(15);

    jbetaVec    = ranges::view::iota(-7,8);

    enow = 1e-5;
    finalJbeta = {1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7};
    finalEp    = {2.54e-3, 2.54e-3, 2.54e-3, 2.54e-3, 2.54e-3, 2.54e-3, 2.54e-3, 
                   2.54e-3, 2.54e-3, 5.07e-3, 3.29e-2, 3.543e-2, 6.326e-2, 
                   6.579e-2, 9.362e-2};
    checkFirstEprime( jbetaVec, lat, enow, betas, x, tev, finalJbeta, finalEp );


    enow = 1e-3;
    finalJbeta = {1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7};
    finalEp    = {3.53e-3, 3.53e-3, 3.53e-3, 3.53e-3, 3.53e-3, 3.53e-3, 3.53e-3, 
                  3.53e-3, 3.53e-3, 6.06e-3, 3.389e-2, 3.642e-2, 6.425e-2, 
                  6.678e-2, 9.461e-2};
    checkFirstEprime( jbetaVec, lat, enow, betas, x, tev, finalJbeta, finalEp );


    enow = 1e-1;
    finalJbeta = {-7, -6, -5, -4, -3, -2, -1, 1, 1, 2, 3, 4, 5, 6, 7 };
    finalEp    = {6.39000153e-3, 3.4220001e-2, 3.6750001e-2, 6.4580001e-2, 
                  6.7110001e-2, 9.4940001e-2, 9.7470001e-2, 0.10253,  0.10253, 
                  0.10506, 0.13289, 0.13542, 0.16325, 0.16578, 0.19361 };
    checkFirstEprime( jbetaVec, lat, enow, betas, x, tev, finalJbeta, finalEp );

  } // GIVEN



} // TEST CASE


*/








TEST_CASE( "do 330 (and some things around it)" ){ 
  int imax = 20, lat = 0, iinc = 2, lasym = 0;
  double tev = 2.5507297688e-2, tol = 5.0E-2;
  std::vector<double> 
  alphas { 1.1, 2.2, 3.3, 4.5, 5.8 },
  betas { 0.1, 0.2, 1.3, 1.4, 2.5, 2.6, 3.7 },
  sab {-0.18259619, -0.30201347, -3.93654779, -3.98809174, -4.33545607, 
  -4.39515402, -5.88934921, -0.76225291, -0.81658341, -3.14161459, -3.30566186, 
  -3.90554652, -3.96233362, -5.23696660, -1.19182884, -1.23155471, -2.79610565, 
  -2.95633099, -3.74989225, -3.80837585, -4.93373911, -1.58342860, -1.61310713, 
  -2.71233943, -2.84291608, -3.69699590, -3.75199349, -4.77433858, -1.96121202, 
  -1.98720663, -2.78454600, -2.88531460, -3.71288120, -3.77142141, -4.71158392 };

  double az = 0.99917, sigma_b = 163.72792237, sigma_b2 = 0.0, teff = 0.120441926;
  int nbin = 4, jbeta = 1,j = 0;

  std::vector<double> scr(65*imax*8,0.0);
  std::vector<double> xsi(100,0.0);
  int ie = 0;
  double xlast = 0.0, ylast = 0.0;

  std::vector<double>  correctSCR;


  GIVEN( "2 bins requested" ){
    double enow,tol;
    nbin = 2;



    WHEN( "initial energy is small (E = 1e-6 eV)" ){ 
      enow = 1e-6; 
      AND_WHEN( "various tolerances considered" ){ 
        tol = 5e-1;
        for ( auto& val : scr ){ val = 0.0; }
        auto out = do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);
        correctSCR = { 0, 0, 0, 0, 1.245962E-6, 134.9500, -0.187640, 0.806634, 
        2.491924E-6, 134.7343,-0.275233,  0.72264533, 4.98384E-6, 133.6925, 
       -0.3407188,   0.658092, 9.967695E-6, 131.7394,-0.391743,   0.608060, 
        1.993539E-5, 130.9234,-0.424779,  0.57516619, 3.98707E-5, 130.2870, 
       -0.4474311,   0.552549, 7.974156E-5, 129.4080,-0.463325,   0.536666, 
        1.594831E-4, 127.8354,-0.474647,  0.52534821, 3.18966E-4, 124.8242, 
       -0.4828510,   0.517144, 6.379325E-4, 119.0482,-0.488959,   0.511033, 
        1.275865E-3, 108.3016,-0.493721,  0.50626439, 2.55173E-3, 89.63757, 
       -0.4977176,   0.502254, 3.827095E-3, 74.19671,-0.499894,   0.500063, 
        5.102460E-3, 61.41592,-0.501429,  0.49851398, 1.21169E-2, 19.07564, 
       -0.5017302,   0.498257, 1.913147E-2, 8.602442,-0.502753,   0.497225, 
        3.316049E-2, 2.080990,-0.504043,  0.49592504, 3.57112E-2, 2.032783, 
       -0.5033939,   0.496583, 6.376924E-2, 1.440228,-0.501071,   0.498924, 
        6.631997E-2, 1.339506,-0.501021,  0.49897454, 9.43780E-2, 0, 0, 0 };
        for ( size_t i = 0; i < correctSCR.size(); ++i ){
          REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
        }
        double xs = out;
        double correctXS = 6843.9814424122860;
        REQUIRE( correctXS == Approx(xs).epsilon(1e-6) );

        tol = 1.0; 
        jbeta = -7; j = 0;
        for ( auto& val : scr ){ val = 0.0; }
        for ( auto& val : xsi ){ val = 0.0; }
        out = do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);
        correctSCR = {0, 0, 0, 0, 2.551730E-3, 94.58360, -0.4977176, 0.5022543, 
        3.827095E-3, 78.29074, -0.4998946, 0.50006329, 5.102460E-3, 64.80473, 
        -0.5014298, 0.49851398, 0.01913147, 9.077108, -0.5027530, 0.49722554, 
        0.03316049, 2.195815, -0.5040439, 0.49592504, 0.03571122, 2.144948, 
        -0.5033939, 0.49658361, 0.06376924, 1.519697, -0.5010712, 0.49892435, 
        0.06631997, 1.413417, -0.5010211, 0.49897454, 0.09437800, 0, 0, 0 };
        for ( size_t i = 0; i < correctSCR.size(); ++i ){
          REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
        }
        xs = out;
        REQUIRE( 6486.0916507679876 == Approx(xs).epsilon(1e-6) );

      } // AND WHEN
    } // WHEN

    WHEN( "initial energy is high (E = 5eV)" ){
      enow = 5.0;
      AND_WHEN( "various tolerances considered" ){
        tol = 2.0;
        jbeta = -7;
        for ( auto& val : scr ){ val = 0.0; }
        for ( auto& val : xsi ){ val = 0.0; }
        auto out = do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);
        correctSCR = {0.0, 0.0, 0.0, 0.0, 4.90562, 0.373818, 0.925628, 0.983460, 
        4.933680, 0.433181, 0.935837, 0.987965, 4.936231, 0.425528, 0.935521, 
        0.987938, 4.964289, 0.288884, 0.925321, 0.982937, 4.966840, 0.232108, 
        0.917665, 0.982192, 4.994898, 1.459286, 0.975571, 0.997333, 4.997449, 
        1.787917, 0.979322, 0.998269, 5.002550, 1.617792, 0.979333, 0.998270,
        5.005101, 1.194692, 0.975595, 0.997336, 5.033159, 0.063227, 0.918258, 
        0.982317, 5.035710, 0.071134, 0.925829, 0.983050, 5.063768, 0.034977, 
        0.936428, 0.988081, 5.066319, 0.032224, 0.936778, 0.988112,5.094377,0,0};
        for ( size_t i = 0; i < correctSCR.size(); ++i ){
          REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
        }
        auto xs = out;
        REQUIRE( 16.767154051889012 == Approx(xs).epsilon(1e-6) );


        j = 0;
        tol = 1e-1;
        jbeta = -7;
        xlast = 0; ylast = 0;
        for ( auto& val : scr ){ val = 0.0; }
        for ( auto& val : xsi ){ val = 0.0; }
        out = do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);
        correctSCR = { 0.0, 0.0, 0.0, 0.0, 1.87134E-5, 2.94462E-3, -0.499319, 
        0.5006542, 3.74269E-5, 4.16408E-3, -0.499030, 0.500917, 7.48538E-5, 
        5.88825E-3, -0.498612, 0.501284, 1.49707E-4, 8.32540E-3, -0.498010, 
        0.501781, 2.99415E-4, 0.0117688, -0.497120, 0.502466, 5.98831E-4, 
        0.0166291, -0.495808, 0.503360, 1.19766E-3, 0.0234759, -0.493836, 
        0.5044974, 2.395324E-3, 0.0330834, -0.4908072, 0.505861, 4.790648E-3, 
        0.0464594, -0.4860256, 0.507323, 9.58129E-3, 0.0647928, -0.478226, 
        0.508522, 0.0191625, 0.089150, -0.465005, 0.508693, 0.0383251, 0.119584, 
        -0.441645, 0.506586, 0.076650, 0.153343, -0.398784, 0.501180, 0.1533007, 
        0.184997, -0.315236, 0.496817, 0.3066014, 0.202430, -0.171198, 0.497999, 
        0.613202, 0.207263, 0.036639, 0.523631, 1.226405, 0.208707, 0.283923, 
        0.606369, 2.452811, 0.207073, 0.569175, 0.760800, 4.905623, 0.174472, 
        0.933450, 0.985000, 4.933681, 0.199517, 0.940955, 0.989624, 4.936231, 
        0.178730, 0.936943, 0.988202, 4.964289, 0.202265, 0.947704, 0.990366, 
        4.966840, 0.209896, 0.949741, 0.990666, 4.980869, 0.306808, 0.961109, 
        0.993929, 4.987884, 0.416525, 0.969360, 0.995829, 4.994898, 0.646950, 
        0.976223, 0.997509, 4.997449, 0.753987, 0.980776, 0.998317, 4.998724, 
        0.793903, 0.981686, 0.998638, 4.999362, 0.813694, 0.982116, 0.998789, 
        4.999681, 0.819510, 0.982256, 0.998841, 4.999840, 0.820134, 0.982285, 
        0.998856, 4.999920, 0.819731, 0.982286, 0.998859, 4.999960, 0.819458, 
        0.982286, 0.998861, 4.999970, 0.834126, 0.980848, 0.998851, 4.999975, 
        0.853587, 0.981134, 0.998887, 4.999977, 0.866309, 0.981363, 0.998945, 
        4.999978, 0.874852, 0.981514, 0.998983, 4.999979, 0.944516, 0.980657, 
        0.998841, 4.999979, 1.082571, 0.977254, 0.998467, 4.999979, 1.370069, 
        0.966263, 0.997361, 4.999980, 1.370998, 0.966280, 0.997369, 4.999980, 
        1.976504, 0.937578, 0.993046, 4.999980, 1.977461, 0.937596, 0.993061, 
        4.999980, 5.743719, 0.742946, 0.947992, 4.999980, 5.745691, 0.742990, 
        0.948056, 4.999980, 5.748759, 0.743057, 0.948155, 4.999981, 5.755301, 
        0.743201, 0.948365, 4.999982, 5.770053, 0.743525, 0.948835, 4.999985, 
        5.808005, 0.744356, 0.950028, 4.999990, 5.906783, 0.746501, 0.953016, 
        5.000000, 6.042281, 0.749423, 0.956880, 5.000010, 5.902344, 0.746455, 
        0.952953, 5.000015, 5.802889, 0.744319, 0.949975, 5.000017, 5.764778, 
        0.743497, 0.948794, 5.000018, 5.748816, 0.743152, 0.948293, 5.000019, 
        5.742325, 0.743012, 0.948088, 5.000019, 5.739280, 0.742946, 0.947992, 
        5.000019, 1.975926, 0.937596, 0.993061, 5.000019, 1.974962, 0.937578, 
        0.993046, 5.000020, 1.369924, 0.966280, 0.997369, 5.000020, 0.942044, 
        0.980629, 0.998833, 5.000021, 0.872575, 0.981487, 0.998976, 5.000022, 
        0.864291, 0.981341, 0.998940, 5.000025, 0.851985, 0.981120, 0.998883, 
        5.000030, 0.826746, 0.980726, 0.998816, 5.000039, 0.818175, 0.982286, 
        0.998861, 5.000079, 0.817173, 0.982287, 0.998859, 5.000159, 0.815026, 
        0.982285, 0.998856, 5.000318, 0.809335, 0.982257, 0.998841, 5.000637, 
        0.793556, 0.982119, 0.998789, 5.001275, 0.755153, 0.981691, 0.998638, 
        5.002550, 0.682243, 0.980787, 0.998318, 5.005101, 0.529706, 0.976249, 
        0.997511, 5.012116, 0.259032, 0.969439, 0.995840, 5.019130, 0.144898, 
        0.961263, 0.993954, 5.026145, 0.088623, 0.954869, 0.992231, 5.033159, 
        0.057206, 0.950075, 0.990727, 5.035710, 0.049868, 0.948076, 0.990433, 
        5.049739, 0.028259, 0.943855, 0.990186, 5.056753, 0.018185, 0.936482, 
        0.988095, 5.063768, 0.016338, 0.942060, 0.989837, 5.066319, 0.014814, 
        0.941800, 0.989760, 5.080348, 8.194329E-3, 0.938315, 0.988339, 5.087362, 
        5.518491E-3, 0.9326195, 0.98594691, 5.094377, 0.0, 0.0, 0.0};
        xs = out;
        for ( size_t i = 0; i < correctSCR.size(); ++i ){
          REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
        }
        REQUIRE( 39.083911355548722 == Approx(xs).epsilon(1e-6) );
      } // AND WHEN
    } // WHEN




    WHEN( "higher energy, high tolerance" ){
      enow = 0.5;
      tol = 5e-1;
      jbeta = -7;
      for ( auto& val : scr ){ val = 0.0; }

      auto out = do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);

      correctSCR = {0.0, 0.0, 0.0, 0.0, 0.2028115, 2.088333, -0.0178393, 
      0.720697, 0.405623, 1.684778, 0.273684, 0.827656, 0.433681, 1.922670, 
      0.374357, 0.877023, 0.436231, 1.894687, 0.373533, 0.876688, 0.464289, 
      2.185131, 0.474614, 0.900139, 0.466840, 2.254948, 0.490033, 0.902993, 
      0.494898, 6.813146, 0.779380, 0.974165, 0.497449, 8.425869, 0.814161, 
      0.982932, 0.498724, 8.878005, 0.823191, 0.986081, 0.499362, 9.109986, 
      0.827574, 0.987619, 0.499681, 9.227942, 0.829741, 0.988389, 0.499840, 
      9.277499, 0.830671, 0.988728, 0.499920, 9.288740, 0.830934, 0.988836, 
      0.499960, 9.288837, 0.830984, 0.988865, 0.500000, 34.13863, 0.721390, 
      0.938708, 0.500039, 9.274387, 0.830995, 0.988865, 0.500079, 9.259794, 
      0.830956, 0.988837, 0.500159, 9.219706, 0.830715, 0.988731, 0.500318, 
      9.113413, 0.829829, 0.988395, 0.500637, 8.885335, 0.827754, 0.987633, 
      0.501275, 8.445616, 0.823558, 0.986113, 0.502550, 7.624984, 0.814930, 
      0.983011, 0.505101, 5.583066, 0.781296, 0.974422, 0.519130, 1.526250, 
      0.632802, 0.939442, 0.533159, 0.612663, 0.521724, 0.909378, 0.535710, 
      0.538822, 0.503196, 0.906930, 0.563768, 0.157392, 0.436427, 0.890570, 
      0.566318, 0.144765, 0.439953, 0.891308, 0.594377, 0.0, 0.0, 0.0};
      auto xs = out;

      for ( size_t i = 0; i < correctSCR.size(); ++i ){
        REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
      }
      REQUIRE( 36.294144921869645 == Approx(xs).epsilon(1e-6) );


    } // WHEN

    WHEN( "rather high energy (E = 2 eV) and rather high tolerance (0.5)" ){
      enow = 2.0;
      tol = 5e-1;
      jbeta = -7;
      for ( auto& val : scr ){ val = 0.0; }
      auto out = do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);
      correctSCR = {0.0, 0.0, 0.0, 0.0, 0.952811, 0.660070, 0.415912, 0.761437, 
      1.905623, 0.520008, 0.809530, 0.958128, 1.933681, 0.585289, 0.833890, 
      0.969934, 1.936231, 0.576276, 0.833329, 0.969824, 1.964289, 0.658464, 
      0.858282, 0.975389, 1.966840, 0.679192, 0.862343, 0.976092, 1.994898, 
      2.087298, 0.939601, 0.993287, 1.997449, 2.510947, 0.948097, 0.995539, 
      1.998724, 2.634583, 0.950412, 0.996384, 1.999362, 2.701458, 0.951593, 
      0.996801, 1.999681, 2.730235, 0.952102, 0.996982, 1.999840, 2.736710, 
      0.952243, 0.997039, 1.999920, 2.736691, 0.952266, 0.997054, 1.999960, 
      2.735888, 0.952266, 0.997058, 2.000000, 18.67175, 0.739671, 0.943746, 
      2.000039, 2.731618, 0.952267, 0.997058, 2.000079, 2.728161, 0.952268, 
      0.997054, 2.000159, 2.719684, 0.952247, 0.997039, 2.000318, 2.696297, 
      0.952110, 0.996982, 2.000637, 2.634811, 0.951608, 0.996801, 2.001275, 
      2.506125, 0.950443, 0.996386, 2.002550, 2.272072, 0.948163, 0.995545, 
      2.005101, 1.708756, 0.939747, 0.993302, 2.019130, 0.457752, 0.898796, 
      0.984534, 2.033159, 0.184982, 0.864700, 0.976495, 2.035710, 0.162256, 
      0.860892, 0.975833, 2.063768, 0.0473657,0.839053, 0.970762, 2.066319, 
      0.0435444, 0.839847, 0.970900, 2.094377, 0.0, 0.0, 0.0 };
      for ( size_t i = 0; i < correctSCR.size(); ++i ){
        REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
      }
      auto xs = out;
      REQUIRE( 30.446130869378809 == Approx(xs).epsilon(1e-6) );
    } // WHEN
  } // GIVEN 




  GIVEN( "four bins requested" ){
    WHEN( "Small energy" ){
      double enow = 1e-6;

      AND_WHEN( "tolerance is small" ){

        double tol = 5e-1;
        for ( auto& val : scr ){ val = 0.0; }
        auto out = do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);

        correctSCR = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.24596E-6, 134.9500, -0.553199,  
        0.177917, 0.672898, 0.940370, 2.49192E-6, 134.7343, -0.609136,  5.866965E-2, 
        0.557295, 0.887995, 4.98384E-6, 133.6925, -0.650658, -3.077921E-2, 0.469878, 
        0.846307, 9.96769E-6, 131.7394, -0.682402, -0.101083, 0.399095, 0.817025, 
        1.99353E-5, 130.9234, -0.703005, -0.146554, 0.353472, 0.796859, 3.98707E-5, 
        130.2870, -0.717149, -0.177712, 0.322288, 0.782811, 7.97415E-5, 129.4080, 
        -0.727080, -0.199571, 0.300426, 0.772906, 1.59483E-4, 127.8354, -0.734154, 
        -0.215139, 0.284857, 0.765838, 3.18966E-4, 124.8242, -0.739281, -0.226420, 
        0.273575, 0.760713, 6.37932E-4, 119.0482, -0.743101, -0.234816, 0.265191, 
        0.756874, 1.27586E-3, 108.3016, -0.746073, -0.241369, 0.258622, 0.753906, 
        2.55173E-3, 89.63757, -0.748566, -0.246868, 0.253107, 0.751401, 3.82709E-3, 
        74.19671, -0.749923, -0.249865, 0.250097, 0.750028, 5.10246E-3, 61.41592, 
        -0.750880, -0.251979, 0.247971, 0.749056, 1.21169E-2, 19.07564, -0.751078, 
        -0.252382, 0.247606, 0.748907, 1.91314E-2, 8.602442, -0.751715, -0.253790, 
        0.246190, 0.748260, 3.31604E-2, 2.080990, -0.752519, -0.255568, 0.244404, 
        0.747445, 3.57112E-2, 2.032783, -0.752115, -0.254672, 0.245308, 0.747859, 
        6.37692E-2, 1.440228, -0.750668, -0.251474, 0.248522, 0.749326, 6.63199E-2, 
        1.339506, -0.750637, -0.251405, 0.248590, 0.749358, 9.43780E-2, 0, 0, 0 };
        for ( size_t i = 0; i < correctSCR.size(); ++i ){
          REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
        }
        auto xs = out;
        REQUIRE( 6843.9814424122860 == Approx(xs).epsilon(1e-6) );
      } // AND WHEN
    } // WHEN

    WHEN( "Initial energy E = 1e-5 eV" ){
      double enow = 1e-5;
      tol = 5e-2;
      for ( auto& val : scr ){ val = 0.0; }

      xlast = 0.0;
      ylast = 0.0;
      auto out = do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);

      correctSCR = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.768411E-9, 
      4.428672, -7.435070E-1, -2.357055E-1, 0.26430706, 0.75647904, 1.953682E-8, 
      6.263472, -7.408188E-1, -2.297769E-1, 0.27022259, 0.75917947, 3.907364E-8, 
      8.858983, -7.369996E-1, -2.213982E-1, 0.27860108, 0.76299763, 7.814729E-8, 
      1.253165E1, -7.315983E-1, -2.095136E-1, 2.904852E-1, 0.76839487, 1.562946E-7, 
      1.773166E1, -7.239286E-1, -1.926350E-1, 0.30736385, 0.77605279, 3.125891E-7, 
      2.510430E1, -7.129893E-1, -1.685513E-1, 0.33145375, 0.78695311, 6.251783E-7, 
      3.559330E1, -6.972284E-1, -1.338166E-1, 0.36623567, 0.80256153, 1.250357E-6, 
      5.039404E1, -6.756062E-1, -8.672421E-2, 0.41200901, 0.82368525, 2.500713E-6, 
      7.152261E1, -6.442864E-1, -1.860503E-2, 0.47835921, 0.85370067, 5.001426E-6, 
      1.010144E2, -6.019581E-1, 7.431823E-2, 0.57457246, 8.971790E-1, 1.000285E-5, 
      1.411108E2, -5.463158E-1, 0.19662746, 0.69651961, 9.528127E-1, 2.000570E-5, 
      1.426981E2, -6.021971E-1, 7.379239E-2, 0.57404606, 0.89694298, 4.001141E-5, 
      1.424909E2, -6.449508E-1, -2.005056E-2, 0.47693985, 0.85304958, 8.002281E-5, 
      1.411515E2, -6.768329E-1, -8.941395E-2, 0.40935137, 0.82246748, 1.600456E-4, 
      1.393110E2, -6.992125E-1, -1.382028E-1, 0.36182434, 0.80058802, 3.200912E-4, 
      1.357121E2, -7.158896E-1, -1.749608E-1, 0.32501093, 0.78402829, 6.401825E-4, 
      1.292887E2, -7.280950E-1, -2.018526E-1, 0.29808506, 0.77181586, 1.280365E-3, 
      1.175335E2, -7.375232E-1, -2.226503E-1, 0.27722683, 0.76231708, 1.920547E-3, 
      1.068834E2, -7.422468E-1, -2.330792E-1, 0.26675518, 0.75749668, 2.560730E-3, 
      9.720633E1, -7.453742E-1, -2.400234E-1, 0.25973646, 0.75430497, 3.198412E-3, 
      8.844101E1, -7.477164E-1, -2.452313E-1, 0.25446347, 0.75188839, 3.836095E-3, 
      8.046737E1, -7.496037E-1, -2.494359E-1, 0.25019686, 0.74992331, 5.111460E-3, 
      6.661351E1, -7.525702E-1, -2.560654E-1, 0.24344522, 0.74679907, 5.111567E-3, 
      4.863349E1, -7.500001E-1, -2.500002E-1, 0.24999982, 0.74999992, 5.111674E-3, 
      4.863286E1, -7.500002E-1, -2.500004E-1, 0.24999964, 0.74999984, 5.111888E-3, 
      4.863160E1, -7.500003E-1, -2.500007E-1, 0.24999929, 0.74999967, 5.112316E-3, 
      4.862909E1, -7.500006E-1, -2.500014E-1, 0.24999857, 0.74999934, 5.113172E-3, 
      4.862405E1, -7.500013E-1, -2.500028E-1, 0.24999714, 0.74999869, 5.114885E-3, 
      4.861399E1, -7.500025E-1, -2.500056E-1, 0.24999429, 0.74999737, 5.118310E-3, 
      4.859387E1, -7.500051E-1, -2.500113E-1, 0.24998858, 0.74999474, 5.125160E-3, 
      4.855364E1, -7.500101E-1, -2.500225E-1, 0.24997717, 0.74998949, 5.138860E-3, 
      4.847326E1, -7.500202E-1, -2.500450E-1, 2.499544E-1, 0.74997901, 5.166260E-3, 
      4.831283E1, -7.500403E-1, -2.500897E-1, 0.24990905, 0.74995812, 5.221061E-3, 
      4.799323E1, -7.500801E-1, -2.501784E-1, 0.24981905, 0.74991669, 5.330663E-3, 
      4.735917E1, -7.501585E-1, -2.503531E-1, 0.24964185, 7.498351E-1, 5.549866E-3, 
      4.611191E1, -7.503107E-1, -2.506922E-1, 2.492980E-1, 7.496768E-1, 5.988273E-3, 
      4.370278E1, -7.505983E-1, -2.513328E-1, 0.24864845, 0.74937774, 6.865086E-3, 
      3.923052E1, -7.511177E-1, -2.524895E-1, 0.24747558, 0.74883772, 8.618713E-3, 
      3.160939E1, -7.519948E-1, -2.544435E-1, 0.24549408, 0.74792514, 1.212597E-2, 
      2.069604E1, -7.533613E-1, -2.574904E-1, 0.24240123, 0.74649937, 1.563322E-2, 
      1.377782E1, -7.544366E-1, -2.598920E-1, 0.23995895, 0.74537162, 1.914047E-2, 
      9.333232, -7.553412E-1, -2.619156E-1, 2.378971E-1, 0.74441781, 2.264773E-2, 
      6.427451, -7.561320E-1, -2.636877E-1, 0.23608797, 0.74357938, 2.615498E-2, 
      4.494250, -7.568408E-1, -2.652788E-1, 0.23446062, 0.74282387, 2.966223E-2, 
      3.156512, -7.563538E-1, -2.641408E-1, 0.23567667, 0.74341138, 3.316949E-2, 
      2.258159, -7.578482E-1, -2.675061E-1, 0.23222259, 0.74180269, 3.572022E-2, 
      2.205466, -7.566034E-1, -2.647018E-1, 2.351020E-1, 0.74314423, 4.974923E-2, 
      2.144491, -7.542702E-1, -2.594970E-1, 0.24038819, 0.74558222, 5.676374E-2, 
      1.880905, -7.526384E-1, -2.559083E-1, 0.24390065, 7.470732E-1, 6.377824E-2, 
      1.561732, -7.520956E-1, -2.546458E-1, 0.24531479, 0.74785391, 6.632897E-2, 
      1.452495, -7.519976E-1, -2.544288E-1, 0.24553334, 0.74795393, 8.035799E-2, 
      8.258413E-1, -7.520148E-1, -2.544723E-1, 0.24548373, 0.74792881, 8.737250E-2, 
      5.720349E-1, -7.520276E-1, -2.544978E-1, 0.24546106, 7.479197E-1, 9.438700E-2, 
      0.0, 0.0, 0.0, 0.0, 0.0 } ;

      auto xs = out;
      for ( size_t i = 0; i < correctSCR.size(); ++i ){
        REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
      }
      REQUIRE( 1996.1698038212844 == Approx(xs).epsilon(1e-6) );
    } // WHEN

    WHEN( "Initial energy E = 1e-3 eV" ){
      double enow = 1e-3;
      for ( auto& val : scr ){ val = 0.0; }
      tol = 5e-2;

      int ie = 0;
      double xlast = 0.0, ylast = 0.0;
      std::vector<double> xsi(100,0.0);
      auto out = do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);

      correctSCR = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.354496E-8, 
      4.138537E-1, -7.494305E-1, -2.487471E-1, 0.25125295, 0.75056922, 2.708992E-8, 
      5.852787E-1, -7.491945E-1, -2.482280E-1, 0.25177195, 0.75080491, 5.417985E-8, 
      8.277124E-1, -7.488607E-1, -2.474939E-1, 0.25250595, 0.75113815, 1.083597E-7, 
      1.170572, -7.483887E-1, -2.464556E-1, 0.25354405, 0.75160924, 2.167194E-7, 
      1.655465, -7.477208E-1, -2.449869E-1, 0.25501239, 7.522751E-1, 4.334387E-7, 
      2.341258, -7.467758E-1, -2.429088E-1, 0.25708963, 0.75321598, 8.668775E-7, 
      3.311257, -7.454384E-1, -2.399678E-1, 0.26002939, 0.75454488, 1.733755E-6, 
      4.683439, -7.435445E-1, -2.358027E-1, 0.26419294, 0.75642041, 3.467510E-6, 
      6.625122, -7.408607E-1, -2.298976E-1, 0.27006855, 0.75909485, 6.935020E-6, 
      9.374266, -7.370327E-1, -2.215258E-1, 0.27840714, 0.76287934, 1.387004E-5, 
      13.27120, -7.315813E-1, -2.095807E-1, 0.29028625, 0.76824253, 2.774008E-5, 
      18.80817, -7.237455E-1, -1.924268E-1, 0.30731147, 0.77590179, 5.548016E-5, 
      26.71330, -7.123235E-1, -1.674356E-1, 0.33205924, 7.869703E-1, 1.109603E-4, 
      38.11516, -6.952130E-1, -1.299720E-1, 0.36910243, 0.80336132, 2.219206E-4, 
      54.69209, -6.696242E-1, -7.435328E-2, 0.42287647, 0.82760954, 4.438412E-4, 
      79.43539, -6.286702E-1, 1.536574E-2, 0.51448317, 0.86852586, 8.876825E-4, 
      1.177772E2, -5.580482E-1, 0.17079978, 0.67074024, 0.94112132, 1.775365E-3, 
      1.132958E2, -6.207945E-1, 3.198767E-2, 0.52933995, 0.87283897, 2.663047E-3, 
      1.000673E2, -6.683889E-1, -7.440722E-2, 4.168994E-1, 0.81815094, 3.550730E-3, 
      88.16909, -6.996204E-1, -1.453324E-1, 0.34263267, 0.78004829, 4.826095E-3, 
      73.63417, -7.302084E-1, -2.164941E-1, 2.647800E-1, 0.73777672, 5.144936E-3, 
      70.42146, -7.362155E-1, -2.306806E-1, 0.24883951, 0.72892832, 5.463777E-3, 
      67.35297, -7.417698E-1, -2.438752E-1, 0.23384265, 0.72052226, 6.101460E-3, 
      61.62057, -7.517461E-1, -2.677746E-1, 0.20629995, 0.70477492, 6.101567E-3, 
      46.97668, -7.500006E-1, -2.500015E-1, 2.499983E-1, 0.74999911, 6.101674E-3, 
      46.97604, -7.500012E-1, -2.500030E-1, 2.499966E-1, 0.74999821, 6.101888E-3, 
      46.97475, -7.500025E-1, -2.500060E-1, 2.499932E-1, 0.74999642, 6.102316E-3, 
      46.97217, -7.500050E-1, -2.500120E-1, 2.499864E-1, 0.74999285, 6.103172E-3, 
      46.96703, -7.500099E-1, -2.500239E-1, 2.499728E-1, 7.499857E-1, 6.104885E-3, 
      46.95673, -7.500198E-1, -2.500479E-1, 0.24994561, 0.74997141, 6.108310E-3, 
      46.93615, -7.500396E-1, -2.500957E-1, 0.24989125, 0.74994283, 6.115160E-3, 
      46.89502, -7.500791E-1, -2.501914E-1, 0.24978263, 0.74988572, 6.128860E-3, 
      46.81286, -7.501581E-1, -2.503823E-1, 0.24956578, 0.74977172, 6.156260E-3, 
      46.64898, -7.503154E-1, -2.507628E-1, 0.24913365, 0.74954452, 6.211061E-3, 
      46.32294, -7.506278E-1, -2.515184E-1, 0.24827556, 0.74909333, 6.320663E-3, 
      45.67772, -7.512442E-1, -2.530089E-1, 0.24658341, 0.74820352, 6.539866E-3, 
      44.41444, -7.524441E-1, -2.559105E-1, 0.24329031, 0.74647187, 6.978273E-3, 
      41.99430, -7.547239E-1, -2.614241E-1, 0.23703518, 7.431831E-1, 7.855086E-3, 
      37.55877, -7.588752E-1, -2.714704E-1, 2.256367E-1, 0.73718713, 9.608713E-3, 
      30.12541, -7.659482E-1, -2.886299E-1, 0.20612041, 0.72689006, 1.311597E-2, 
      19.65693, -7.769744E-1, -3.155805E-1, 1.751800E-1, 7.103853E-1, 1.662322E-2, 
      13.08528, -7.855291E-1, -3.367411E-1, 0.15048975, 0.69695322, 2.013047E-2, 
      8.844176, -7.895341E-1, -3.501393E-1, 0.13239985, 0.68640882, 2.363773E-2, 
      6.048807, -7.918065E-1, -3.572893E-1, 0.12098438, 6.787267E-1, 2.714498E-2, 
      4.207837, -7.966820E-1, -3.661695E-1, 0.11017622, 6.716016E-1, 3.065223E-2, 
      2.988024, -8.045808E-1, -3.843479E-1, 9.313377E-2, 6.632542E-1, 3.415949E-2, 
      2.181687, -8.132304E-1, -4.063657E-1, 6.763736E-2, 0.65006098, 3.671022E-2, 
      2.095439, -8.046342E-1, -3.832756E-1, 9.790295E-2, 0.66957858, 5.073923E-2, 
      1.951280, -7.829508E-1, -3.309273E-1, 0.15765474, 0.70219598, 6.476824E-2, 
      1.398690, -7.686586E-1, -2.947295E-1, 0.19999021, 0.72373022, 6.731897E-2, 
      1.300457, -7.674876E-1, -2.918944E-1, 0.20347745, 0.72603204, 8.134799E-2, 
      7.372262E-1, -7.664191E-1, -2.895516E-1, 0.20597533, 0.72789955, 8.836250E-2, 
      5.099616E-1, -7.678017E-1, -2.929037E-1, 0.20205293, 7.255643E-1, 9.537700E-2, 
      0.0, 0.0, 0.0, 0.0, 0.0};
      auto xs = out;
      for ( size_t i = 0; i < correctSCR.size(); ++i ){
        REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
      }
      REQUIRE( 225.78478730432727 == Approx(xs).epsilon(1e-6) );
    } // WHEN




    WHEN( "Higher initial energy (0.1 eV)" ){
      double enow = 1e-1;
      tol = 1e-1;
      jbeta = -7;
      for ( auto& val : scr ){ val = 0.0; }

      int ie = 0;
      double xlast = 0.0, ylast = 0.0;
      std::vector<double> xsi(100,0.0);
      auto out = do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);

      correctSCR = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.864013E-7, 2.036626E-2, 
      -7.494533E-1, -0.2487979, 0.251201, 0.750545, 1.37280E-6, 2.88021E-2, 
      -0.7492265, -0.2482998, 0.251698, 0.750771, 2.74560E-6, 4.07323E-2, 
      -0.7489055, -0.2475950, 0.252402, 0.751089, 5.49121E-6, 5.76037E-2, 
      -0.7484509, -0.2465978, 0.253396, 0.751539, 1.09824E-5, 8.14629E-2, 
      -0.7478068, -0.2451864, 0.254801, 0.752174, 2.19648E-5, 0.115202, -0.7468933, 
      -0.2431882, 0.256787, 0.753069, 4.39296E-5, 0.162912, -0.7455965, -0.2403575, 
      0.259594, 0.754329, 8.78593E-5, 0.230367, -0.7437523, -0.2363443, 0.263560, 
      0.756099, 1.75718E-4, 0.325717, -0.7411238, -0.2306471, 0.269151, 0.758589, 
      3.51437E-4, 0.460432, -0.7373473, -0.2225595, 0.277014, 0.762103, 7.02874E-4, 
      0.650580, -0.7319174, -0.2110147, 0.288131, 0.766983, 1.40575E-3, 0.918450, 
      -0.7240245, -0.1944645, 0.303826, 0.773772, 2.81149E-3, 1.294163, -0.7123918, 
      -0.1705464, 0.326018, 0.783146, 4.21724E-3, 1.579253, -0.7030419, -0.1516932, 
      0.343154, 0.790253, 4.92012E-3, 1.702698, -0.6988340, -0.1433086, 0.350682, 
      0.793341, 5.27156E-3, 1.760867, -0.6968153, -0.1393073, 0.354255, 0.794798, 
      5.44728E-3, 1.789165, -0.6958245, -0.1373485, 0.355999, 0.795508, 5.53513E-3, 
      1.803129, -0.6953335, -0.1363790, 0.356861, 0.795858, 5.57906E-3, 1.810066, 
      -0.6950891, -0.1358967, 0.357290, 0.796033, 5.60103E-3, 1.813523, -0.6949671, 
      -0.1356561, 0.357504, 0.796119, 5.61201E-3, 1.815249, -0.6949062, -0.1355359, 
      0.357611, 0.796163, 5.61750E-3, 1.816111, -0.6948758, -0.1354759, 0.357664, 
      0.796184, 5.62025E-3, 1.816542, -0.6948606, -0.1354459, 0.357691, 0.796195, 
      5.62162E-3, 1.816758, -0.6948530, -0.1354309, 0.357704, 0.796201, 5.62231E-3, 
      1.816866, -0.6948492, -0.1354234, 0.357711, 0.796203, 5.62265E-3, 1.816919, 
      -0.6948473, -0.1354196, 0.357714, 0.796205, 5.62282E-3, 1.816946, -0.6948463, 
      -0.1354177, 0.357716, 0.796205, 5.62291E-3, 1.816960, -0.6948458, -0.1354168, 
      0.357717, 0.796206, 5.62295E-3, 1.816967, -0.6948456, -0.1354163, 0.357717, 
      0.796206, 5.62297E-3, 1.816970, -0.6948455, -0.1354161, 0.357717, 0.796206, 
      5.62298E-3, 1.816972, -0.6948454, -0.1354160, 0.357717, 0.796206, 5.62299E-3, 
      1.816972, -0.6948454, -0.1354159, 0.357717, 0.796206, 5.62299E-3, 1.389091, 
     -0.7730128, -0.3296001, 0.141945, 0.683462, 1.96520E-2, 3.031403, -0.6584261, 
     -0.1438449, 0.249650, 0.704010, 3.36810E-2, 3.992577, -0.5952508, -0.0201336, 
      0.330225, 0.723319, 3.623176E-2, 4.104700, -0.5878491, -7.64257E-3, 0.334665, 
      0.722183, 6.428978E-2, 5.109331, -0.4935578, 0.136658, 0.388008, 0.685795, 
      6.684051E-2, 5.443877, -0.4637176, 0.169525, 0.408346, 0.686020, 0.080869, 
      9.192625, -0.1945170, 0.376827, 0.601918, 0.830342, 0.087884, 13.26475, 
     -0.024133, 0.503454, 0.716845, 0.893523, 0.094898, 20.72019, 0.158521, 
      0.634920,0.810799,0.942288, 0.097449, 25.56530, 0.243899, 0.717475, 
      0.876807,0.967969,0.098724, 26.92882, 0.268130, 0.741405, 0.896438, 0.978283, 
      0.099362,27.69197,0.280996, 0.753823, 0.906756, 0.983387, 0.099681, 28.08663, 
      0.287506,0.760056,0.911978, 0.985863, 0.099840, 28.28787, 0.290783, 0.763185, 
      0.914612,0.987079,0.099920, 28.37901, 0.292300, 0.764642, 0.915840, 0.987638, 
      0.099960,28.40346,0.292797, 0.765143, 0.916259, 0.987826, 0.100000, 34.40220, 
      0.305826,0.793149,0.929877, 0.986042, 0.100039, 28.36011, 0.292929, 0.765222,
      0.916287,0.987830,0.100079, 28.29237, 0.292567, 0.764802, 0.915895, 0.987646, 
      0.100159,28.11547,0.291319, 0.763508, 0.914726, 0.987097, 0.100318, 27.74551, 
      0.288576,0.760710,0.912212, 0.985901, 0.100637, 27.02355, 0.283149, 0.755169,
      0.907255,0.983479,0.101275, 25.64506, 0.272472, 0.744241, 0.897557, 0.978525, 
      0.102550,23.19311,0.252783, 0.723771, 0.879604, 0.968727, 0.105101, 17.67882, 
      0.191279,0.670074,0.832921, 0.945668, 0.112115, 8.391549, 0.0124316,0.551601, 
      0.745790,0.904137,0.119130, 4.525436,-0.149199, 0.466066, 0.659391, 0.854440, 
      0.126144,2.670650,-0.291271, 0.399669, 0.593693, 0.803774, 0.133159,1.665226, 
     -0.394152,0.312729,0.545130, 0.759130, 0.135710, 1.446525,-0.415016, 0.288925, 
      0.539501,0.762389,0.149739, 0.809176,-0.441209, 0.255551, 0.559359, 0.797353,
      0.163768,0.472591,-0.447064, 0.238353, 0.569192, 0.813019, 0.166318,0.428708, 
     -0.447854,0.236636,0.570986, 0.814478, 0.180347, 0.233970,-0.479907, 0.179081, 
      0.543565,0.803918,0.194377, 0, 0, 0, 0, 0 };
      auto xs = out;
      for ( size_t i = 0; i < correctSCR.size(); ++i ){
        REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
      }
      REQUIRE( 54.115991940853363 == Approx(xs).epsilon(1e-6) );
    } // WHEN

  WHEN( "High tolerance and high energy " ){
    double enow = 0.2;
    tol = 1e-1;
    jbeta = -7;
    for ( auto& val : scr ){ val = 0.0; }

    int ie = 0;
    double xlast = 0.0, ylast = 0.0;
    std::vector<double> xsi(100,0.0);
    auto out = do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);

    correctSCR = {0, 0, 0, 0, 0, 0, 8.05839E-7, 0.0131679, -0.7495806, -0.249078, 
    0.250920, 0.750418, 1.61167E-6, 0.0186222, -0.7494065, -0.2486961, 0.251302, 
    0.750590, 3.22335E-6, 0.0263356, -0.7491600, -0.2481554, 0.251840, 0.750834, 
    6.44671E-6, 0.0372439, -0.7488106, -0.2473902, 0.252602, 0.751178, 1.28934E-5, 
    0.0526699, -0.748315, -0.2463068, 0.253678, 0.751664, 2.57868E-5, 0.074483,
    -0.747611, -0.244772, 0.255197, 0.752347, 5.15737E-5, 0.105328, -0.746609,
    -0.242596, 0.257343, .753307, 1.03147E-4, 0.148935, -0.7451816, -0.239509, 
    0.260370, 0.754651, 2.06294E-4, 0.210565, -0.7431378, -0.235122, 0.264640, 
    0.756527, 4.12589E-4, 0.297612, -0.7401984, -0.228870, 0.270629, 0.759158, 
    8.25179E-4, 0.420400, -0.7359181, -0.219951, 0.279049, 0.762795, 1.65035E-3, 
    0.593182, -0.7296389, -0.207080, 0.290930, 0.767802, 3.30071E-3, 0.835018, 
    -0.720274, -0.188411, 0.307594, 0.774557, 6.60143E-3, 1.169834, -0.705983, 
    -0.160986, 0.330952, 0.783594, 1.32028E-2, 1.625559, -0.6829625, -0.118649, 
    0.365656, 0.796264, 2.64057E-2, 2.209573, -0.6458400, -5.568446E-2, 0.412059, 
    0.811785, 5.28115E-2, 2.937096, -0.5740339, 5.864191E-2, 0.497444, 0.839564, 
    0.0792172, 3.408197, -0.500947, 0.164217, 0.572751, 0.866473, 0.0924201, 
    3.591839, -0.463113, 0.215092, 0.607220, 0.878551, 9.90215E-2, 3.647072, 
    -0.446950, 0.235032, 0.625850, 0.886813, 0.102322, 3.683744, -0.437510, 
    0.247073, 0.634352, 0.889953, 0.103972, 3.701664, -0.432761, 0.253085, 
    0.638592, 0.891521, 0.104797, 3.710526, -0.430379, 0.256090, 0.640709, 
    0.892305, 0.105210, 3.714934, -0.429186, 0.257592, 0.641767, 0.892697, 
    0.105416, 3.717132, -0.428589, 0.258342, 0.642296, 0.892893, 0.105519, 
    3.718229, -0.428290, 0.258718, 0.642560, 0.892991, 0.105571, 3.718778, 
    -0.428141, 0.258906, 0.642692, 0.893040, 0.105597, 3.719052, -0.428066, 
    0.258999, 0.642758, 0.893065, 0.105610, 3.719189, -0.428029, 0.259046, 
    0.642791, 0.893077, 0.105616, 3.719258, -0.428010, 0.259070, 0.642808, 
    0.893083, 0.105619, 3.719292, -0.428001, 0.259082, 0.642816, 0.893086, 
    0.105621, 3.719309, -0.427996, 0.259087, 0.642820, 0.893088, 0.105622, 
    3.719317, -0.427994, 0.259090, 0.642822, 0.893089, 0.105622, 3.719322, 
    -0.427993, 0.259092, 0.642823, 0.893089, 0.105622, 3.719324, -0.427992, 
    0.259093, 0.642824, 0.893089, 0.105622, 3.719325, -0.427992, 0.259093, 
    0.642824, 0.893089, 0.105622, 3.719325, -0.427992, 0.259093, 0.642824, 
    0.893089, 0.105622, 3.719326, -0.427992, 0.259093, 0.642824, 0.893089, 
    0.105622, 3.719326, -0.427992, 0.259093, 0.642824, 0.893089, 0.105623, 
    2.973236, -0.517234, 0.104622, 0.473816, 0.766176, 0.133681, 3.682241, 
    -0.378941, 0.315937, 0.637128, 0.842343, 0.136231, 3.688598, -0.372817, 
    0.323154, 0.640697, 0.843247, 0.164289, 3.945966, -0.277831, 0.437559, 
    0.679771, 0.834652, 0.166840, 4.109539, -0.252372, 0.467508, 0.690227, 
    0.836427, 0.180869, 6.221135, -4.941113E-3, 0.659307, 0.78934, 0.910889, 
    0.187884, 8.609271, 0.182882, 0.732273, 0.850863, 0.9445554, 0.194898, 
    13.43754, 0.382317, 0.814861, 0.908577, 0.9705781, 0.19744927, 15.97323, 
    0.442959, 0.847824, 0.934566, 0.983121, 0.19872464, 16.72848, 0.461579, 
    0.859629, 0.944732, 0.988585, 0.199362, 17.16709, 0.4716975, 0.865960, 
    0.950088, 0.991220, 0.199681, 17.39746, 0.4768549, 0.869176, 0.952790, 
    0.992492, 0.199840, 17.51400, 0.479428, 0.870781, 0.954136,  0.993111, 
    0.199920, 17.55609, 0.480412, 0.871423, 0.954675, 0.9933547, 0.199960, 
    17.56363, 0.480656, 0.871612, 0.954835, 0.9934268, 0.19998008, 18.38137, 
    0.469944, 0.860670, 0.952171, 0.993069, 0.19999004, 22.07671, 0.525891, 
    0.887747, 0.953547, 0.991187, 0.199992, 22.12073, 0.5264864, 0.888049, 
    0.953780, 0.991354, 0.199993, 22.13113, 0.5266269, 0.888120, 0.953835, 
    0.991393, 0.199993, 22.13607, 0.526693, 0.888154, 0.953861, 0.991411, 
    0.199993, 22.13732, 0.526710, 0.888162, 0.953868, 0.9914164, 0.199993, 
    22.13763, 0.526714, 0.888165, 0.953869, 0.9914176, 0.19999358, 28.59911, 
    0.588375, 0.870643, 0.937584, 0.986687, 0.19999359, 28.59926, 0.588376, 
    0.870643, 0.937585, 0.986688, 0.199993, 28.59988, 0.5883818, 0.870646, 
    0.937588, 0.986690, 0.199993, 28.60217, 0.5884012, 0.870656, 0.937600, 
    0.986700, 0.199995, 28.61963, 0.588549, 0.870731, 0.937688, 0.986775, 
    0.199997, 28.64467, 0.588762, 0.870841, 0.937817, 0.9868832, 0.199998, 
    28.65102, 0.588817, 0.870870, 0.937852, 0.986911, 0.19999907, 28.65188, 
    0.588825, 0.870874, 0.937857, 0.986915, 0.19999911, 28.65197, 0.588826, 
    0.870874, 0.937857, 0.986916, 0.199999, 44.18280, 0.5683730, 0.797216, 
    0.896646, 0.974788, 0.199999, 44.18282, 0.5683731, 0.797216, 0.896646, 
    0.974788, 0.199999, 44.18286, 0.568373, 0.797217, 0.896646, 0.974788, 
    0.199999, 44.18299, 0.568373, 0.797217, 0.896647, 0.974789, 0.199999, 
    44.18319, 0.568374, 0.797218, 0.896649, 0.974791, 0.20000000, 44.18330, 
    0.568376, 0.797221, 0.896652, 0.974794, 0.20000063, 44.18216, 0.568375, 
    0.797218, 0.896649, 0.974791, 0.200000, 44.18168, 0.5683741, 0.797217, 
    0.896647, 0.974789, 0.200000, 44.18141, 0.5683734, 0.797216, 0.896646, 
    0.974788, 0.200000, 44.18137, 0.5683734, 0.797216, 0.896646, 0.974788, 
    0.200000, 28.65102, 0.588826, 0.870874, 0.937857, 0.986916, 0.200000, 
    28.65095, 0.588826, 0.870874, 0.937857, 0.986916, 0.20000094, 28.65085, 
    0.588825, 0.870874, 0.937857, 0.986915, 0.20000125, 28.64964, 0.588818, 
    0.870870, 0.937852, 0.986911, 0.200002, 28.64192, 0.5887636, 0.870841, 
    0.937817, 0.986882, 0.200004, 28.61415, 0.5885521, 0.870731, 0.937688, 
    0.986774, 0.200006, 28.59518, 0.588403, 0.870655, 0.937598, 0.986699, 
    0.200006, 28.59256, 0.588383, 0.870645, 0.937586, 0.986689, 0.200006, 
    28.59223, 0.588380, 0.870644, 0.937584, 0.986687, 0.20000643, 22.13222, 
    0.526720, 0.888166, 0.953870, 0.991417, 0.20000644, 22.13206, 0.526718, 
    0.888165, 0.953869, 0.991417, 0.200006, 22.13140, 0.5267103, 0.888161, 
    0.953866, 0.991414, 0.200006, 22.13024, 0.5266955, 0.888154, 0.953860, 
    0.991410, 0.200006, 22.12504, 0.526629, 0.888120, 0.953834, 0.991392, 
    0.200007, 22.11428, 0.526491, 0.888050, 0.953780, 0.991353, 0.200009, 
    22.06816, 0.525898, 0.887749, 0.953547, 0.991187, 0.20001993, 18.36728, 
    0.469961, 0.860677, 0.952173, 0.993069, 0.20003986, 17.53633, 0.480707, 
    0.871635, 0.954843, 0.993428, 0.200079, 17.50155, 0.4805144, 0.871469, 
    0.954691, 0.993357, 0.200159, 17.40542, 0.4796312, 0.870873, 0.954169, 
    0.993116, 0.200318, 17.18246, 0.477261, 0.869362, 0.952859, 0.992503, 
    0.200637, 16.74548, 0.472514, 0.866339, 0.950233, 0.991247, 0.201275, 
    15.91687, 0.463228, 0.860423, 0.945053, 0.988654, 0.20255073, 14.46048, 
    0.446313, 0.849542, 0.935322, 0.983328, 0.20510146, 11.03339, 0.390139, 
    0.819338, 0.910813, 0.971236, 0.212115, 5.380518, 0.2019028, 0.746750, 
    0.859307, 0.947590, 0.219130, 2.953821, 0.0315764, 0.684927, 0.806993, 
    0.918380, 0.226144, 1.798367, -0.089644, 0.610489, 0.765750, 0.887029, 
    0.233159, 1.148179, -0.181371, 0.521886, 0.732424, 0.859167, 0.235710, 
    1.001930, -0.200881, 0.498213, 0.726343, 0.859025, 0.24973923, 0.562796, 
    -0.225543, 0.462190, 0.725229, 0.873616, 0.26376824, 0.3273604, -0.232957, 
    0.447126, 0.721330, 0.879156, 0.266318, 0.2601356, -0.2925191, 0.368554, 
    0.674735, 0.883254, 0.280347, 0.149717, -0.3029577, 0.350598, 0.658237, 
    0.871978, 0.294377, 0.0, 0.0, 0.0, 0.0, 0.0 };
    auto xs = out;
    for ( size_t i = 0; i < correctSCR.size(); ++i ){
      REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
    }
    REQUIRE( 45.344506096878519 == Approx(xs).epsilon(1e-6) );

    } // WHEN
  } // GIVEN
} // TEST CASE







//    for ( size_t i = 0; i < correctscr.size(); ++i ){
//      //if ( (i-1)%(nbin+1) == 0 ){ 
//      //    continue; }
//        //std::cout << i << "   " << scr[i] << "   " << correctscr[i] << std::endl;
//      require( scr[i] == approx(correctscr[i]).epsilon(1e-6) );
//    }








