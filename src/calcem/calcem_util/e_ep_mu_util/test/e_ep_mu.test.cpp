#include "catch.hpp"
#include "calcem/calcem_util/e_ep_mu_util/e_ep_mu.h"
#include <range/v3/all.hpp>
#include "generalTools/testing.h"
#include <range/v3/all.hpp>

template <typename RangeInt, typename Range, typename Float>
void checkFirstEprime( const RangeInt& jbetaVec, int lat, const Float& enow, const Range& betas, const Range& x, const Float& tev, const RangeInt& finalJbeta, const Range& finalEp ){
  int jbeta;
  Float ep;
  for ( size_t i = 0; i < jbetaVec.size(); ++i ){
    jbeta = jbetaVec[i];
    ep = findFirstEprime( lat, jbeta, enow, betas, x, tev );
    REQUIRE( finalJbeta[i] == jbeta );
    REQUIRE( finalEp[i] == Approx(ep).epsilon(1e-6) );
  }
}




/*

TEST_CASE( "do we need a midpoint" ){ 
  std::vector<double> x(20,0.0), y(20*65,0.0); 
  
  std::vector<double> initialY { 195158.09939262934, -0.87238772679496734, -0.61817875518802279, -0.36545660682035069, -0.11418564421716945, 0.13568062577950979, 0.38420180765640111, 0.63141488906433418, 0.87738226704862166 };

  x[0] = 2.54E-3;
  
  for (size_t i = 0; i < initialY.size(); ++i){ 
    y[i*x.size()+0] = initialY[i]; 
  }



  double xm = 1.27e-3;
  std::vector<double> s { 235586.48147822541, -0.86806816809249565, -0.60677324533223020, -0.34926974510882292, -9.5577908119815064E-002, 0.15436521665672856, 0.40054354740949549, 0.64302993119542795, 0.88181200416435501, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  int i = 2;
  int nl = 9;
  double tol = 1.0;
  REQUIRE( needMidpoint(x,y,xm,i,nl,s,tol) == false );
  tol = 1e-2;
  REQUIRE( needMidpoint(x,y,xm,i,nl,s,tol) == true  );
  tol = 5e-1;
  REQUIRE( needMidpoint(x,y,xm,i,nl,s,tol) == true  );
  tol = 0.56;
  REQUIRE( needMidpoint(x,y,xm,i,nl,s,tol) == true  );
  tol = 0.59;
  REQUIRE( needMidpoint(x,y,xm,i,nl,s,tol) == false );


} // TEST CASE
*/




/*

TEST_CASE( "do 330" ){ 


  int imax = 20;
  std::vector<double> x(imax,0.0), y(imax*65,0.0), initialY { 194040.3395, 
                     -0.745374226, -0.240023402, 0.259736457, 0.754304965 };
  x[0] = 2.5607298E-3;
  for (size_t i = 0; i < initialY.size(); ++i){ y[i*x.size()+0] = initialY[i]; }

  int i = 2, lat = 0, iinc = 2, lasym = 0;
  double tev = 2.5507297688e-2, tol = 5.0E-2;
  double enow;
  std::vector<double> alphas { 1.1, 2.2, 3.3, 4.5, 5.8 },
                       betas { 0.1, 0.2, 1.3, 1.4, 2.5, 2.6, 3.7 },
                       sab { -0.18259619, -0.30201347, -3.93654779, -3.98809174, 
  -4.33545607, -4.39515402, -5.88934921, -0.76225291, -0.81658341, -3.14161459, 
  -3.30566186, -3.90554652, -3.96233362, -5.23696660, -1.19182884, -1.23155471, 
  -2.79610565, -2.95633099, -3.74989225, -3.80837585, -4.93373911, -1.58342860, 
  -1.61310713, -2.71233943, -2.84291608, -3.69699590, -3.75199349, -4.77433858, 
  -1.96121202, -1.98720663, -2.78454600, -2.88531460, -3.71288120, -3.77142141, 
  -4.71158392 };

  double az = 0.99917, sigma_b = 163.72792237, sigma_b2 = 0.0, teff = 0.120441926;
  int nnl = -5, nl = 5, jbeta = 1,j = 0;

  std::vector<double> scr(2*imax*65,0.0), xsi(100,0.0);
  double xlast = 0.0, ylast = 0.0;
  int ie = 0;
  


  double ulast, u2last, u3last;
  std::vector<double> correctX(imax), pdf(imax), mu1(imax), mu2(imax), mu3(imax), mu4(imax);


  GIVEN( "Small initial energy (E=1e-5 eV)" ){
    enow = 1e-5;

    THEN( "Returned x values, y vector, and moment values are correct" ){
      auto out = do_330(enow,x,y,i,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nnl,nl,jbeta,scr,xsi,ie,xlast,ylast);

      ulast  = std::get<0>(out); REQUIRE( 2609.673 == Approx(ulast ).epsilon(1e-6));
      u2last = std::get<1>(out); REQUIRE(-6650.153 == Approx(u2last).epsilon(1e-6));
      u3last = std::get<2>(out); REQUIRE( 358.7471 == Approx(u3last).epsilon(1e-6));

      correctX = { 2.560729E-3, 1.920547E-3, 1.280364E-3, 3.200912E-4, 1.600456E-4, 
      8.002281E-5, 4.001140E-5, 2.000570E-5, 1.000285E-5, 5.001426E-6, 2.500713E-6, 
      1.250356E-6, 6.251782E-7, 3.125891E-7, 1.562945E-7, 7.814728E-8, 3.907364E-8, 
      1.953682E-8, 9.768411E-9, 0.0 };
      pdf = { 194040.3, 213357.4, 234616.8, 270904.3, 278088.3, 281762.2, 
           284435.9, 284849.7, 281681.0, 201641.8, 142771.2, 100595.0, 71050.27, 
           50112.44, 35395.39, 25015.29, 17684.03, 12502.95, 8840.380, 0.0};
      mu1 = {     -0.7453742, -0.7422468, -0.7375231, -0.7158896, -0.6992124, 
      -0.6768329, -0.6449507, -0.6021970, -0.5463158, -0.6019580, -0.6442864, 
      -0.6756062, -0.6972283, -0.7129893, -0.7239285, -0.7315982, -0.7369996, 
      -0.7408188, -0.7435070, 0.00000000 };
      mu2 = {      -0.24002340, -0.23307917, -0.22265027, -0.17496084, -0.13820280, 
      -0.08941394, -0.02005056,  0.07379239,  0.19662745,  0.07431822, -0.01860502, 
      -0.08672420, -0.13381656, -0.16855131, -0.19263496, -0.20951361, -0.22139824, 
      -0.22977689, -0.23570553,  0.0 };
      mu3 = {    0.2597364, 0.2667551, 0.2772268, 0.3250109, 0.3618243, 0.4093513, 
      0.4769398, 0.5740460, 0.6965196, 0.5745724, 0.4783592, 0.4120090, 0.3662356, 
      0.3314537, 0.3073638, 0.2904852, 0.2786010, 0.2702225, 0.2643070, 0.0 };
      mu4 = {    0.7543049, 0.7574966, 0.7623170, 0.7840282, 0.8005880, 0.8224674, 
      0.8530495, 0.8969429, 0.9528127, 0.8971790, 0.8537006, 0.8236852, 0.8025615, 
      0.7869531, 0.7760527, 0.7683948, 0.7629976, 0.7591794, 0.7564790, 0.0 };

      REQUIRE( 1  == i );
      REQUIRE( 20 == j );
      REQUIRE( 2  == jbeta );

      REQUIRE( ranges::equal(x,correctX,equal) );
      std::vector<std::vector<double>> correct { pdf, mu1, mu2, mu3, mu4 };
      for ( size_t i = 0; i < correct.size(); ++i ){
        for ( size_t j = 0; j < correct[i].size(); ++j ){
          REQUIRE( correct[i][j] == Approx(y[i*x.size()+j]).epsilon(1e-6) );
        }
      }
      for ( size_t i = correct.size()*x.size(); i < y.size(); ++i){
        REQUIRE( 0.0 == Approx(y[i]).epsilon(1e-6) );
      }

      std::vector<double> correctSCR { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.768411E-9, 
      8.8403807E3,-7.435070E-1,-2.357055E-1, 2.643070E-1, 7.564790E-1, 1.953682E-8, 
      1.2502953E4,-7.408188E-1,-2.297769E-1, 2.702225E-1, 7.591794E-1, 3.907364E-8, 
      1.7684034E4,-7.369996E-1,-2.213982E-1, 2.786010E-1, 7.629976E-1, 7.814728E-8, 
      2.5015295E4,-7.315982E-1,-2.095136E-1, 2.904852E-1, 7.683948E-1, 1.562945E-7, 
      3.5395394E4,-7.239285E-1,-1.926349E-1, 3.073638E-1, 7.760527E-1, 3.125891E-7, 
      5.0112448E4,-7.129893E-1,-1.685513E-1, 3.314537E-1, 7.869531E-1, 6.251782E-7, 
      7.1050277E4,-6.972283E-1,-1.338165E-1, 3.662356E-1, 8.025615E-1, 1.250356E-6, 
      1.0059506E5,-6.756062E-1,-8.672421E-2, 4.120090E-1, 8.236852E-1, 2.500713E-6, 
      1.4277126E5,-6.442864E-1,-1.860502E-2, 4.783592E-1, 8.537006E-1, 5.001426E-6, 
      2.0164182E5,-6.019580E-1, 7.431822E-2, 5.745724E-1, 8.971790E-1, 1.000285E-5, 
      2.8168109E5,-5.463158E-1, 1.966274E-1, 6.965196E-1, 9.528127E-1, 2.000570E-5, 
      2.8484972E5,-6.021970E-1, 7.379239E-2, 5.740460E-1, 8.969429E-1, 4.001140E-5, 
      2.8443599E5,-6.449507E-1,-2.005056E-2, 4.769398E-1, 8.530495E-1, 8.002281E-5, 
      2.8176229E5,-6.768329E-1,-8.941394E-2, 4.093513E-1, 8.224674E-1, 1.600456E-4, 
      2.7808831E5,-6.992124E-1,-1.382028E-1, 3.618243E-1, 8.005880E-1, 3.200912E-4, 
      2.7090434E5,-7.158896E-1,-1.749608E-1, 3.250109E-1, 7.840282E-1, 6.401824E-4, 
      2.5808226E5,-7.280949E-1,-2.018525E-1, 2.980850E-1, 7.718158E-1, 1.280364E-3, 
      2.3461686E5,-7.375232E-1,-2.226502E-1, 2.772268E-1, 7.623170E-1, 1.920547E-3, 
      2.1335745E5,-7.422468E-1,-2.330791E-1, 2.667551E-1, 7.574966E-1 };

        for ( size_t i = 0; i < correctSCR.size(); ++i ){
          REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
        }

    } // THEN
  } // GIVEN



  GIVEN( "Medium initial energy (E=1e-3 eV)" ){
    enow = 1e-3;

    THEN( "Returned x values, y vector, and moment values are correct" ){

      auto out = do_330(enow,x,y,i,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nnl,nl,jbeta,scr,xsi,ie,xlast,ylast);

      ulast  = std::get<0>(out); REQUIRE( 2993.879 == Approx(ulast ).epsilon(1e-6));
      u2last = std::get<1>(out); REQUIRE(-240.7431 == Approx(u2last).epsilon(1e-6));
      u3last = std::get<2>(out); REQUIRE( 427.3755 == Approx(u3last).epsilon(1e-6));
  

      correctX = { 2.5607298E-3, 2.5607297E-3, 2.5607295E-3, 6.4018245E-4, 
      1.6004562E-4, 8.0022810E-5, 4.0011405E-5, 2.0005703E-5, 1.0002852E-5, 
      5.0014260E-6, 2.5007130E-6, 1.2503565E-6, 6.2517825E-7, 3.1258913E-7, 
      1.5629457E-7, 7.8147285E-8, 3.9073643E-8, 1.9536822E-8, 9.7684110E-9, 0.0 };
      pdf = { 194040.3, 22928.53, 22928.53, 22004.47, 10421.57, 7271.812, 
      5109.760, 3602.049, 2543.152, 1796.915, 1270.129, 897.9471, 634.8844, 
      448.9098, 317.4197, 224.4469, 158.7070, 112.2224, 79.35316, 0.0 };
      mu1 = {      -0.7453742, -0.6639123, -0.6639123, -0.5966787, -0.6825695, 
      -0.7041852,  -0.7182603, -0.7278000, -0.7343954, -0.7390024, -0.7422431, 
      -0.7445198,  -0.7461270, -0.7472623, -0.7480646, -0.7486316, -0.7490325, 
      -0.7493159,  -0.7495163, 0.0 };
      mu2 = {      -0.24002340, -0.06436183, -0.06436181, 0.08567835, -0.10222948, 
      -0.14962484, -0.18042466, -0.20130111, -0.21574559, -0.22584518, -0.23293962, 
      -0.23794773, -0.24148212, -0.24397868, -0.24574300, -0.24699014, -0.24787184, 
      -0.24849522, -0.24893599, 0.0 };
      mu3 = {    0.2597364, 0.4272364, 0.4272364, 0.5853635, 0.3965669, 0.3496719, 
      0.3192034, 0.2985083, 0.2841580, 0.2741063, 0.2670555, 0.2620485, 0.2585157, 
      0.2560201, 0.2542564, 0.2530096, 0.2521280, 0.2515047, 0.2510640, 0.0 };
      mu4 = {    0.7543049, 0.8233353, 0.8233353, 0.9011784, 0.8153225, 0.7947936, 
      0.7812307, 0.7719456, 0.7654775, 0.7609340, 0.7577044, 0.7554555, 0.7538610, 
      0.7527317, 0.7519323, 0.7513667, 0.7509666, 0.7506835, 0.7504834, 0.0 };

      REQUIRE( 1  == i );
      REQUIRE( 43 == j );
      REQUIRE( 2  == jbeta );


      REQUIRE( ranges::equal(x,correctX,equal) );
      std::vector<std::vector<double>> correct { pdf, mu1, mu2, mu3, mu4 };
      for ( size_t i = 0; i < correct.size(); ++i ){
        for ( size_t j = 0; j < pdf.size(); ++j ){
          REQUIRE( correct[i][j] == Approx(y[i*x.size()+j]).epsilon(1e-6) );
        }
      }
      for ( size_t i = correct.size()*x.size(); i < y.size(); ++i){
        REQUIRE( 0.0 == Approx(y[i]).epsilon(1e-6) );
      }
  
      std::vector<double> correctSCR {0.0, 0.0,  0.0,  0.0,  0.0,  0.0,  9.7684110E-9,  
      7.935317E1, -7.495163E-1, -2.489359E-1,  2.510640E-1,  0.7504834,  1.953682E-8,  
      1.122224E2, -7.493159E-1, -2.484952E-1,  2.515047E-1,  0.7506835,  3.907364E-8,  
      1.587070E2, -7.490325E-1, -2.478718E-1,  2.521281E-1,  0.7509666,  7.814728E-8,  
      2.244469E2, -7.486316E-1, -2.469901E-1,  2.530096E-1,  0.7513667,  1.562945E-7,  
      3.174197E2, -7.480646E-1, -2.457430E-1,  2.542564E-1,  0.7519323,  3.125891E-7,  
      4.489098E2, -7.472623E-1, -2.439786E-1,  2.560201E-1,  0.7527317,  6.251782E-7,  
      6.348844E2, -7.461270E-1, -2.414821E-1,  2.585157E-1,  0.7538610,  1.250356E-6,  
      8.979471E2, -7.445198E-1, -2.379477E-1,  2.620485E-1,  0.7554555,  2.500713E-6,  
      1.270129E3, -7.422431E-1, -2.329396E-1,  2.670555E-1,  0.7577044,  5.001426E-6,  
      1.796915E3, -7.390024E-1, -2.258451E-1,  2.741063E-1,  0.7609340,  1.000285E-5,  
      2.543152E3, -7.343954E-1, -2.157456E-1,  2.841580E-1,  0.7654776,  2.000570E-5,  
      3.602049E3, -7.278000E-1, -2.013011E-1,  2.985083E-1,  0.7719456,  4.001140E-5,  
      5.109760E3, -7.182603E-1, -1.804246E-1,  3.192034E-1,  0.7812307,  8.002281E-5,  
      7.271812E3, -7.041852E-1, -1.496248E-1,  3.496719E-1,  0.7947936,  1.600456E-4,  
      1.042157E4, -6.825695E-1, -1.022294E-1,  3.965669E-1,  0.8153225,  3.200912E-4,  
      1.505175E4, -6.496485E-1, -3.072243E-2,  4.657100E-1,  0.8468844,  6.401824E-4,  
      2.200447E4, -5.966787E-1,  8.567835E-2,  5.853635E-1,  0.9011784,  9.602736E-4,  
      2.786274E4, -5.468695E-1,  1.954414E-1,  6.954181E-1,  0.9523540,  1.280364E-3,  
      2.744101E4, -5.771819E-1,  1.285756E-1,  6.282528E-1,  0.9211990,  1.920547E-3,  
      2.500692E4, -6.313135E-1,  8.429071E-3,  5.050226E-1,  0.8609199,  2.240638E-3,  
      2.378573E4, -6.513582E-1, -3.717092E-2,  0.4529485, 0.8359541,  2.400684E-3,  
      2.346375E4, -6.564133E-1, -4.759721E-2,  0.4444134, 0.8318966,  2.480707E-3,  
      2.319436E4, -6.602429E-1, -5.614899E-2,  0.4356622, 0.8275429,  2.520718E-3,  
      2.306101E4, -6.620969E-1, -6.029621E-2,  0.4314102, 0.8254215,  2.540724E-3,  
      2.299466E4, -6.630093E-1, -6.233904E-2,  0.4293137, 0.8243741,  2.550727E-3,  
      2.296156E4, -6.634620E-1, -6.335292E-2,  0.4282727, 0.8238536,  2.555728E-3,  
      2.294504E4, -6.636874E-1, -6.385800E-2,  0.4277539, 0.8235942,  2.558229E-3,  
      2.293678E4, -6.637999E-1, -6.411007E-2,  0.4274950, 0.8234647,  2.559479E-3,  
      2.293265E4, -6.638561E-1, -6.423600E-2,  0.4273657, 0.8234000,  2.560104E-3,  
      2.293059E4, -6.638842E-1, -6.429893E-2,  0.4273010, 0.8233676,  2.560417E-3,  
      2.292956E4, -6.638983E-1, -6.433039E-2,  0.4272687, 0.8233514,  2.560573E-3,  
      2.292904E4, -6.639053E-1, -6.434612E-2,  0.4272525, 0.8233434,  2.560651E-3,  
      2.292878E4, -6.639088E-1, -6.435398E-2,  0.4272445, 0.8233393,  2.560690E-3,  
      2.292865E4, -6.639105E-1, -6.435791E-2,  0.4272404, 0.8233373,  2.560710E-3,  
      2.292859E4, -6.639114E-1, -6.435988E-2,  0.4272384, 0.8233363,  2.560720E-3,  
      2.292856E4, -6.639119E-1, -6.436086E-2,  0.4272374, 0.8233358,  2.560725E-3,  
      2.292854E4, -6.639121E-1, -6.436136E-2,  0.4272369, 0.8233355,  2.560727E-3,  
      2.292853E4, -6.639122E-1, -6.436160E-2,  0.4272366, 0.8233354,  2.560728E-3,  
      2.292853E4, -6.639122E-1, -6.436172E-2,  0.4272365, 0.8233353,  2.560729E-3,  
      2.292853E4, -6.639123E-1, -6.436178E-2,  0.4272365, 0.8233353,  2.560729E-3,  
      2.292853E4, -6.639123E-1, -6.436181E-2,  0.4272364, 0.8233353,  2.560729E-3,  
      2.292853E4, -6.639123E-1, -6.436183E-2,  0.4272364, 0.8233353,  0.0,  0.0};
        for ( size_t i = 0; i < correctSCR.size(); ++i ){
          REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
        }






    } // THEN 
  } // GIVEN

} // TEST CASE
*/

/*

TEST_CASE( "313" ) {
  int lat = 1, jbeta = -7;
  double enow, ep, tev = 2.5507297688E-2;
  std::vector<double> betas { 0.1, 0.2, 1.3, 1.4, 2.5, 2.6, 3.7 }, x(20,0.0);


  GIVEN( "Various jbeta values, fixed enow" ){ 
    std::vector<int> jbetaVec(15), finalJbeta(15);
    std::vector<double> finalEp(15);

    jbetaVec    = ranges::view::iota(-7,8);

    enow = 1e-5;
    finalJbeta = {1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7};
    finalEp    = {2.54e-3, 2.54e-3, 2.54e-3, 2.54e-3, 2.54e-3, 2.54e-3, 2.54e-3, 
                   2.54e-3, 2.54e-3, 5.07e-3, 3.29e-2, 3.543e-2, 6.326e-2, 
                   6.579e-2, 9.362e-2};
    checkFirstEprime( jbetaVec, lat, enow, betas, x, tev, finalJbeta, finalEp );


    enow = 1e-3;
    finalJbeta = {1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7};
    finalEp    = {3.53e-3, 3.53e-3, 3.53e-3, 3.53e-3, 3.53e-3, 3.53e-3, 3.53e-3, 
                  3.53e-3, 3.53e-3, 6.06e-3, 3.389e-2, 3.642e-2, 6.425e-2, 
                  6.678e-2, 9.461e-2};
    checkFirstEprime( jbetaVec, lat, enow, betas, x, tev, finalJbeta, finalEp );


    enow = 1e-1;
    finalJbeta = {-7, -6, -5, -4, -3, -2, -1, 1, 1, 2, 3, 4, 5, 6, 7 };
    finalEp    = {6.39000153e-3, 3.4220001e-2, 3.6750001e-2, 6.4580001e-2, 
                  6.7110001e-2, 9.4940001e-2, 9.7470001e-2, 0.10253,  0.10253, 
                  0.10506, 0.13289, 0.13542, 0.16325, 0.16578, 0.19361 };
    checkFirstEprime( jbetaVec, lat, enow, betas, x, tev, finalJbeta, finalEp );

  } // GIVEN



} // TEST CASE


*/








TEST_CASE( "do 330 (and some things around it)" ){ 
  int imax = 20, lat = 0, iinc = 2, lasym = 0;
  double tev = 2.5507297688e-2, tol = 5.0E-2;
  std::vector<double> alphas { 1.1, 2.2, 3.3, 4.5, 5.8 },
                       betas { 0.1, 0.2, 1.3, 1.4, 2.5, 2.6, 3.7 },
                       sab {-0.18259619, -0.30201347, -3.93654779, -3.98809174, 
  -4.33545607, -4.39515402, -5.88934921, -0.76225291, -0.81658341, -3.14161459, 
  -3.30566186, -3.90554652, -3.96233362, -5.23696660, -1.19182884, -1.23155471, 
  -2.79610565, -2.95633099, -3.74989225, -3.80837585, -4.93373911, -1.58342860, 
  -1.61310713, -2.71233943, -2.84291608, -3.69699590, -3.75199349, -4.77433858, 
  -1.96121202, -1.98720663, -2.78454600, -2.88531460, -3.71288120, -3.77142141, 
  -4.71158392 };

  double az = 0.99917, sigma_b = 163.72792237, sigma_b2 = 0.0, teff = 0.120441926;
  int nbin = 4, jbeta = 1,j = 0;

  std::vector<double> scr(65*imax*8,0.0);
  std::vector<double> xsi(100,0.0);
  int ie = 0;
  double xlast = 0.0, ylast = 0.0;




GIVEN( "2 bins requested" ){
    double enow,tol;
    nbin = 2;
    /*
    WHEN( "small energy, high tolerance" ){
    enow = 1e-6;
    tol = 5e-1;
    for ( auto& val : scr ){ val = 0.0; }

    do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);

    std::vector<double> correctSCR { 0.0, 0.0, 0.0, 0.0, 1.245962E-6, 1.349500E2, 
-1.876409E-1, 0.80663435, 2.491924E-6, 1.347343E2, -2.752335E-1, 0.72264533, 
4.983848E-6, 1.336925E2, -3.407188E-1, 0.65809276, 9.967695E-6, 1.317394E2, 
-3.917430E-1, 0.60806033, 1.993539E-5, 1.309234E2, -4.247796E-1, 0.57516619, 
3.987078E-5, 1.302870E2, -4.474311E-1, 0.55254981, 7.974156E-5, 1.294080E2, 
-4.633257E-1, 0.53666644, 1.594831E-4, 1.278354E2, -4.746473E-1, 0.52534821, 
3.189662E-4, 1.248242E2, -4.828510E-1, 0.51714441, 6.379325E-4, 1.190482E2, 
-4.889590E-1, 0.51103333, 1.275865E-3, 1.083016E2, -4.937214E-1, 0.50626439, 
2.551730E-3, 8.963757E1, -4.977176E-1, 5.022543E-1, 3.827095E-3, 7.419671E1, 
-4.998946E-1, 0.50006329, 5.102460E-3, 6.141592E1, -5.014298E-1, 0.49851398, 
1.211697E-2, 1.907564E1, -5.017302E-1, 0.49825742, 1.913147E-2, 8.602442E0, 
-5.027530E-1, 0.49722554, 3.316049E-2, 2.080990E0, -5.040439E-1, 0.49592504, 
3.571122E-2, 2.032783E0, -5.033939E-1, 0.49658361, 6.376924E-2, 1.440228E0, 
-5.010712E-1, 0.49892435, 6.631997E-2, 1.339506E0, -5.010211E-1, 0.49897454, 
9.437800E-2, 0.0, 0.0, 0.0 };

    std::cout.precision(15);
    for ( size_t i = 0; i < correctSCR.size(); ++i ){
      //if ( (i-1)%(nbin+1) == 0 ){ 
      //    continue; }
        //std::cout << i << "   " << scr[i] << "   " << correctSCR[i] << std::endl;
      REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
    }

    } // WHEN
    */


    WHEN( "high energy, high tolerance" ){
    enow = 5.0;
      AND_WHEN( "various tolerances considered" ){
        {
          tol = 2.0;
          jbeta = -7;
          for ( auto& val : scr ){ val = 0.0; }
          do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);
          std::vector<double> correctSCR {0.0, 0.0, 0.0, 0.0, 4.905623, 0.3738189, 
          0.92562835, 0.98346033, 4.933681, 0.4331810, 0.93583759, 0.98796534,
          4.93623180, 0.4255284, 0.93552199, 0.98793803, 4.96428980, 0.2888843, 
          0.92532154, 0.98293761, 4.96684050, 0.2321081, 0.9176651, 0.98219298,
          4.99489850, 1.459286, 0.97557141, 0.99733363, 4.99744930, 1.787917, 
          0.97932248, 0.99826944, 5.00255070, 1.617792, 0.97933333, 0.99827031,
          5.00510150, 1.194692, 0.97559563, 0.9973362, 5.03315950, 0.06322774,
          0.91825819, 0.98231736, 5.03571020, 0.07113415, 0.92582987, 0.98305085,
          5.06376820, 0.03497788, 0.93642842, 0.98808143, 5.066319, 0.03222442,
          0.93677869, 0.98811284, 5.094377, 0.0, 0.0, 0.0};
          for ( size_t i = 0; i < correctSCR.size(); ++i ){
            REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
          }

        }

        {
            std::cout.precision(15);
      j = 0;
      tol = 1e-1;
      jbeta = -7;
      xlast = 0; ylast = 0;
      enow = 5.0;
      for ( auto& val : scr ){ val = 0.0; }
      for ( auto& val : xsi ){ val = 0.0; }
      //std::cout << enow << "     " << j << "    " << tev << "  " << tol << "    " << lat << std::endl;
      //std::cout << enow << "     " << j << "    " << tev << "  " << tol << "    " << lat << std::endl;
      do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);
      std::vector<double> correctSCR {0.0, 0.0, 0.0, 0.0, 1.871347E-5, 2.944622E-3, 
-0.4993199, 0.50065421, 3.742694E-5, 4.164083E-3, -0.4990306, 0.50091766, 
7.485388E-5, 5.888259E-3, -0.4986129, 0.50128474, 1.497078E-4, 8.325408E-3, 
-0.4980102, 0.50178128, 2.994155E-4, 0.01176888, -0.4971202, 0.50246661, 
5.988310E-4, 0.01662918, -0.4958088, 0.5033600, 1.197662E-3, 0.02347597, 
-0.4938368, 0.50449748, 2.395324E-3, 0.03308343, -0.4908072, 0.50586158, 
4.790648E-3, 0.04645942, -0.4860256, 0.50732349, 9.581296E-3, 0.06479283, 
-0.4782261, 0.50852259, 0.01916259, 0.08915056, -0.4650057, 0.50869387, 
0.03832518, 0.1195840, -0.4416457, 0.50658601, 0.07665037, 0.1533431, 
-0.3987844, 0.50118074, 0.15330073, 0.1849972, -0.3152362, 0.49681761, 
0.30660145, 0.2024309, -0.1711983, 0.49799967, 0.6132029, 0.2072637, 
0.03663909, 0.52363114, 1.22640580, 0.2087073, 0.28392311, 0.60636978, 
2.45281150, 0.2070737, 0.56917537, 0.76080077, 4.905623, 0.1744720, 
0.93345051, 0.98500059, 4.933681, 0.1995178, 0.94095592, 0.98962478, 
4.93623180, 0.1787305, 0.93694317, 0.98820205, 4.96428980, 0.2022650, 
0.94770496, 0.99036651, 4.96684050, 0.2098963, 0.94974137, 0.99066601, 
4.98086950, 0.3068081, 0.9611090, 0.99392992, 4.987884, 0.4165255, 
0.96936032, 0.99582954, 4.99489850, 0.6469506, 0.97622384, 0.9975090, 
4.99744930, 0.7539878, 0.9807766, 0.99831745, 4.99872470, 0.7939039, 
0.98168665, 0.99863823, 4.99936240, 0.8136945, 0.98211632, 0.99878923, 
4.99968120, 0.8195101, 0.98225636, 0.99884187, 4.99984060, 0.8201348, 
0.98228503, 0.99885613, 4.99992030, 0.8197313, 0.98228679, 0.99885964, 
4.99996020, 0.8194586, 0.98228643, 0.99886103, 4.99997020, 0.8341264, 
0.98084894, 0.99885112, 4.99997520, 0.8535878, 0.98113427, 0.99888725, 
4.99997770, 0.8663098, 0.9813636, 0.99894564, 4.99997890, 0.8748520, 
0.98151461, 0.99898305, 4.99997950, 0.9445163, 0.98065742, 0.99884153, 
4.99997980, 1.082571, 0.97725493, 0.99846751, 4.99997990, 1.370069, 
0.96626361, 0.99736158, 4.999980, 1.370998, 0.96628032, 0.99736932, 
4.99998010, 1.976504, 0.93757855, 0.99304632, 4.99998020, 1.977461, 
0.93759681, 0.99306157, 4.99998030, 5.743719, 0.74294678, 0.94799262, 
4.99998050, 5.745691, 0.74299025, 0.94805627, 4.99998080, 5.748759, 
0.74305786, 0.94815514, 4.99998140, 5.755301, 0.74320186, 0.94836529, 
4.99998260, 5.770053, 0.74352593, 0.94883598, 4.99998510, 5.808005, 
0.74435631, 0.95002808, 4.99999010, 5.906783, 0.74650144, 0.95301616, 
5.0, 6.042281, 0.74942325, 0.95688036, 5.000010, 5.902344, 
0.74645558, 0.95295363, 5.000015, 5.802889, 0.74431924, 0.9499753, 
5.00001750, 5.764778, 0.7434971, 0.94879423, 5.00001880, 5.748816, 
0.74315259, 0.94829344, 5.00001940, 5.742325, 0.7430125, 0.94808883, 
5.00001970, 5.739280, 0.74294682, 0.94799268, 5.00001980, 1.975926, 
0.93759685, 0.99306159, 5.00001990, 1.974962, 0.9375786, 0.99304634, 
5.000020, 1.369924, 0.96628038, 0.99736934, 5.00002070, 0.9420444, 
0.98062903, 0.99883358, 5.00002130, 0.8725752, 0.98148749, 0.99897637, 
5.00002250, 0.8642918, 0.98134128, 0.99894002, 5.000025, 0.8519854, 
0.98112034, 0.99888362, 5.000030, 0.8267462, 0.98072691, 0.99881639, 
5.00003990, 0.8181753, 0.9822865, 0.99886101, 5.00007980, 0.8171737, 
0.98228707, 0.99885965, 5.00015950, 0.8150269, 0.98228558, 0.99885614, 
5.00031890, 0.8093357, 0.98225744, 0.99884191, 5.00063770, 0.7935563, 
0.98211917, 0.99878948, 5.00127540, 0.7551537, 0.98169186, 0.99863864, 
5.00255070, 0.6822433, 0.98078702, 0.99831829, 5.00510150, 0.5297062, 
0.97624965, 0.9975116, 5.012116, 0.2590321, 0.96943977, 0.99584017, 
5.01913050, 0.1448987, 0.9612635, 0.9939544, 5.026145, 0.08862387, 
0.95486947, 0.99223102, 5.03315950, 0.05720631, 0.95007513, 0.99072758, 
5.03571020, 0.04986802, 0.9480768, 0.99043384, 5.04973920, 0.02825961, 
0.94385521, 0.99018648, 5.05675370, 0.01818513, 0.93648244, 0.98809535, 
5.06376820, 0.01633891, 0.94206067, 0.98983788, 5.066319, 0.01481446, 
0.94180094, 0.98976005, 5.080348, 8.194329E-3, 0.93831597, 0.98833949, 
5.08736250, 5.518491E-3, 0.93261952, 0.98594691, 5.094377, 0.0, 
0.0, 0.0};
      for ( size_t i = 0; i < correctSCR.size(); ++i ){
      //if ( (i-1)%6 == 0 ){ 
      //    continue; }
      //std::cout << i << "   " << scr[i]  << "     " << correctSCR[i] << std::endl;

        REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
      }


        }



      } // AND WHEN
    } // WHEN




    WHEN( "higher energy, high tolerance" ){
    enow = 0.5;
    tol = 5e-1;
    jbeta = -7;
    for ( auto& val : scr ){ val = 0.0; }

    do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);

    std::vector<double> correctSCR {0.0, 0.0, 0.0, 0.0, 0.2028115, 2.088333, 
-0.01783934, 0.7206971, 0.4056230, 1.684778, 0.27368437, 0.82765682, 
0.43368103, 1.922670, 0.37435759, 0.87702307, 0.43623176, 1.894687, 
0.37353349, 0.87668823, 0.46428978, 2.185131, 0.4746145, 0.90013995, 
0.46684051, 2.254948, 0.49003372, 0.90299355, 0.49489854, 6.813146, 
0.77938092, 0.97416537, 0.49744927, 8.425869, 0.81416163, 0.98293213, 
0.49872464, 8.878005, 0.82319159, 0.98608178, 0.49936232, 9.109986, 
0.82757493, 0.98761996, 0.49968116, 9.227942, 0.82974107, 0.9883891, 
0.49984058, 9.277499, 0.8306710, 0.98872816, 0.49992029, 9.288740, 
0.83093453, 0.98883606, 0.49996015, 9.288837, 0.83098458, 0.98886516, 
0.50, 34.13863, 0.72139009, 0.93870834, 0.50003986, 9.274387, 
0.83099514, 0.98886584, 0.50007972, 9.259794, 0.83095636, 0.98883757, 
0.50015943, 9.219706, 0.83071546, 0.98873138, 0.50031885, 9.113413, 
0.82982995, 0.98839565, 0.50063769, 8.885335, 0.82775433, 0.98763383, 
0.50127537, 8.445616, 0.82355867, 0.98611309, 0.50255073, 7.624984, 
0.81493075, 0.98301135, 0.50510146, 5.583066, 0.78129677, 0.97442274, 
0.51913048, 1.526250, 0.6328023, 0.93944225, 0.53315949, 0.6126634, 
0.52172474, 0.90937846, 0.53571022, 0.5388225, 0.50319672, 0.90693096, 
0.56376824, 0.1573923, 0.4364279, 0.89057004, 0.56631897, 0.1447658, 
0.43995396, 0.89130895, 0.5943770, 0.0, 0.0, 0.0};

    std::cout.precision(15);
    for ( size_t i = 0; i < correctSCR.size(); ++i ){
      //if ( (i-1)%(nbin+1) == 0 ){ 
      //    continue; }
        //std::cout << i << "   " << scr[i] << "   " << correctSCR[i] << std::endl;
      REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
    }

    } // WHEN

    WHEN( "higher energy, high tolerance" ){
    double enow = 2.0;
    double tol = 5e-1;
    jbeta = -7;
    for ( auto& val : scr ){ val = 0.0; }

    do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);

    std::vector<double> correctSCR {0.0, 0.0, 0.0, 0.0, 0.9528115, 0.6600700, 
0.41591224, 0.76143763, 1.905623, 0.5200086, 0.8095309, 0.95812864, 
1.933681, 0.5852891, 0.83389085, 0.96993457, 1.93623180, 0.5762765, 
0.83332956, 0.96982464, 1.96428980, 0.6584649, 0.85828274, 0.97538989, 
1.96684050, 0.6791924, 0.86234369, 0.97609299, 1.99489850, 2.087298, 
0.93960146, 0.99328778, 1.99744930, 2.510947, 0.94809796, 0.99553994, 
1.99872470, 2.634583, 0.95041258, 0.99638421, 1.99936240, 2.701458, 
0.95159362, 0.99680105, 1.99968120, 2.730235, 0.9521026, 0.99698241, 
1.99984060, 2.736710, 0.95224354, 0.9970395, 1.99992030, 2.736691, 
0.95226661, 0.99705437, 1.99996020, 2.735888, 0.95226684, 0.99705857, 
2.0, 18.67175, 0.73967177, 0.94374636, 2.00003990, 2.731618, 
0.95226766, 0.99705858, 2.00007980, 2.728161, 0.95226838, 0.99705443, 
2.00015950, 2.719684, 0.95224706, 0.99703963, 2.00031890, 2.696297, 
0.95211016, 0.99698286, 2.00063770, 2.634811, 0.95160851, 0.99680187, 
2.00127540, 2.506125, 0.95044377, 0.99638635, 2.00255070, 2.272072, 
0.9481634, 0.99554539, 2.00510150, 1.708756, 0.93974712, 0.99330214, 
2.01913050, 0.4577529, 0.89879654, 0.9845347, 2.03315950, 0.1849826, 
0.86470053, 0.97649551, 2.03571020, 0.1622566, 0.86089216, 0.9758334, 
2.06376820, 0.04736575, 0.83905382, 0.97076276, 2.066319, 0.04354448, 
0.83984759, 0.97090057, 2.094377, 0.0, 0.0, 0.0 };


    std::cout.precision(15);
    for ( size_t i = 0; i < correctSCR.size(); ++i ){
      //if ( (i-1)%(nbin+1) == 0 ){ 
      //    continue; }
        //std::cout << i << "   " << scr[i] << "   " << correctSCR[i] << std::endl;
      REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
    }

    } // WHEN




  } // GIVEN 








GIVEN( "Small energy and small tolerance" ){
    double enow = 1e-6;
    double tol = 5e-1;
    for ( auto& val : scr ){ val = 0.0; }

    do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);

    std::vector<double> correctSCR {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
1.245962E-6, 134.9500, -0.5531997, 0.17791796, 0.67289807, 0.94037063, 
2.491924E-6, 134.7343, -0.6091367, 5.866965E-2, 0.55729521, 0.88799546, 
4.983848E-6, 133.6925, -0.6506585, -3.077921E-2, 0.46987851, 0.84630702, 
9.967695E-6, 131.7394, -0.6824023, -0.1010836, 0.39909523, 0.81702542, 
1.993539E-5, 130.9234, -0.7030051, -0.1465541, 0.35347282, 0.79685956, 
3.987078E-5, 130.2870, -0.7171496, -0.1777126, 0.32228831, 0.7828113, 
7.974156E-5, 129.4080, -0.7270800, -0.1995713, 0.30042653, 0.77290635, 
1.594831E-4, 127.8354, -0.7341547, -0.2151399, 0.28485763, 0.76583879, 
3.189662E-4, 124.8242, -0.7392812, -0.2264208, 0.27357568, 0.76071314, 
6.379325E-4, 119.0482, -0.7431013, -0.2348166, 0.26519185, 0.75687469, 
1.275865E-3, 108.3016, -0.7460733, -0.2413695, 0.2586222, 0.75390657, 
2.551730E-3, 89.63757, -0.7485668, -0.2468684, 0.25310755, 0.75140105, 
3.827095E-3, 74.19671, -0.7499239, -0.2498653, 0.25009783, 0.75002876, 
5.102460E-3, 61.41592, -0.7508800, -0.2519797, 0.24797102, 0.74905694, 
1.211697E-2, 19.07564, -0.7510783, -0.2523821, 0.24760698, 0.74890785, 
1.913147E-2, 8.602442, -0.7517153, -0.2537907, 0.24619046, 0.74826062, 
3.316049E-2, 2.080990, -0.7525198, -0.2555681, 0.24440473, 0.74744536, 
3.571122E-2, 2.032783, -0.7521157, -0.2546722, 0.24530807, 0.74785916, 
6.376924E-2, 1.440228, -0.7506683, -0.2514740, 0.24852203, 0.74932668, 
6.631997E-2, 1.339506, -0.7506371, -0.2514052, 0.24859099, 0.74935809, 
9.437800E-2, 0.0, 0.0, 0.0, 0.0, 0.0 };

    for ( size_t i = 0; i < correctSCR.size(); ++i ){
      REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
    }

  } // GIVEN 


GIVEN( "Initial energy E = 1e-5 eV" ){
    double enow = 1e-5;
    for ( auto& val : scr ){ val = 0.0; }

    do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);

    std::vector<double> correctSCR { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.768411E-9, 
    4.428672E0, -7.435070E-1, -2.357055E-1, 0.26430706, 0.75647904, 1.953682E-8, 
    6.263472E0, -7.408188E-1, -2.297769E-1, 0.27022259, 0.75917947, 3.907364E-8, 
    8.858983E0, -7.369996E-1, -2.213982E-1, 0.27860108, 0.76299763, 7.814729E-8, 
    1.253165E1, -7.315983E-1, -2.095136E-1, 2.904852E-1, 0.76839487, 1.562946E-7, 
    1.773166E1, -7.239286E-1, -1.926350E-1, 0.30736385, 0.77605279, 3.125891E-7, 
    2.510430E1, -7.129893E-1, -1.685513E-1, 0.33145375, 0.78695311, 6.251783E-7, 
    3.559330E1, -6.972284E-1, -1.338166E-1, 0.36623567, 0.80256153, 1.250357E-6, 
    5.039404E1, -6.756062E-1, -8.672421E-2, 0.41200901, 0.82368525, 2.500713E-6, 
    7.152261E1, -6.442864E-1, -1.860503E-2, 0.47835921, 0.85370067, 5.001426E-6, 
    1.010144E2, -6.019581E-1, 7.431823E-2, 0.57457246, 8.971790E-1, 1.000285E-5, 
    1.411108E2, -5.463158E-1, 0.19662746, 0.69651961, 9.528127E-1, 2.000570E-5, 
    1.426981E2, -6.021971E-1, 7.379239E-2, 0.57404606, 0.89694298, 4.001141E-5, 
    1.424909E2, -6.449508E-1, -2.005056E-2, 0.47693985, 0.85304958, 8.002281E-5, 
    1.411515E2, -6.768329E-1, -8.941395E-2, 0.40935137, 0.82246748, 1.600456E-4, 
    1.393110E2, -6.992125E-1, -1.382028E-1, 0.36182434, 0.80058802, 3.200912E-4, 
    1.357121E2, -7.158896E-1, -1.749608E-1, 0.32501093, 0.78402829, 6.401825E-4, 
    1.292887E2, -7.280950E-1, -2.018526E-1, 0.29808506, 0.77181586, 1.280365E-3, 
    1.175335E2, -7.375232E-1, -2.226503E-1, 0.27722683, 0.76231708, 1.920547E-3, 
    1.068834E2, -7.422468E-1, -2.330792E-1, 0.26675518, 0.75749668, 2.560730E-3, 
    9.720633E1, -7.453742E-1, -2.400234E-1, 0.25973646, 0.75430497, 3.198412E-3, 
    8.844101E1, -7.477164E-1, -2.452313E-1, 0.25446347, 0.75188839, 3.836095E-3, 
    8.046737E1, -7.496037E-1, -2.494359E-1, 0.25019686, 0.74992331, 5.111460E-3, 
    6.661351E1, -7.525702E-1, -2.560654E-1, 0.24344522, 0.74679907, 5.111567E-3, 
    4.863349E1, -7.500001E-1, -2.500002E-1, 0.24999982, 0.74999992, 5.111674E-3, 
    4.863286E1, -7.500002E-1, -2.500004E-1, 0.24999964, 0.74999984, 5.111888E-3, 
    4.863160E1, -7.500003E-1, -2.500007E-1, 0.24999929, 0.74999967, 5.112316E-3, 
    4.862909E1, -7.500006E-1, -2.500014E-1, 0.24999857, 0.74999934, 5.113172E-3, 
    4.862405E1, -7.500013E-1, -2.500028E-1, 0.24999714, 0.74999869, 5.114885E-3, 
    4.861399E1, -7.500025E-1, -2.500056E-1, 0.24999429, 0.74999737, 5.118310E-3, 
    4.859387E1, -7.500051E-1, -2.500113E-1, 0.24998858, 0.74999474, 5.125160E-3, 
    4.855364E1, -7.500101E-1, -2.500225E-1, 0.24997717, 0.74998949, 5.138860E-3, 
    4.847326E1, -7.500202E-1, -2.500450E-1, 2.499544E-1, 0.74997901, 5.166260E-3, 
    4.831283E1, -7.500403E-1, -2.500897E-1, 0.24990905, 0.74995812, 5.221061E-3, 
    4.799323E1, -7.500801E-1, -2.501784E-1, 0.24981905, 0.74991669, 5.330663E-3, 
    4.735917E1, -7.501585E-1, -2.503531E-1, 0.24964185, 7.498351E-1, 5.549866E-3, 
    4.611191E1, -7.503107E-1, -2.506922E-1, 2.492980E-1, 7.496768E-1, 5.988273E-3, 
    4.370278E1, -7.505983E-1, -2.513328E-1, 0.24864845, 0.74937774, 6.865086E-3, 
    3.923052E1, -7.511177E-1, -2.524895E-1, 0.24747558, 0.74883772, 8.618713E-3, 
    3.160939E1, -7.519948E-1, -2.544435E-1, 0.24549408, 0.74792514, 1.212597E-2, 
    2.069604E1, -7.533613E-1, -2.574904E-1, 0.24240123, 0.74649937, 1.563322E-2, 
    1.377782E1, -7.544366E-1, -2.598920E-1, 0.23995895, 0.74537162, 1.914047E-2, 
    9.333232E0, -7.553412E-1, -2.619156E-1, 2.378971E-1, 0.74441781, 2.264773E-2, 
    6.427451E0, -7.561320E-1, -2.636877E-1, 0.23608797, 0.74357938, 2.615498E-2, 
    4.494250E0, -7.568408E-1, -2.652788E-1, 0.23446062, 0.74282387, 2.966223E-2, 
    3.156512E0, -7.563538E-1, -2.641408E-1, 0.23567667, 0.74341138, 3.316949E-2, 
    2.258159E0, -7.578482E-1, -2.675061E-1, 0.23222259, 0.74180269, 3.572022E-2, 
    2.205466E0, -7.566034E-1, -2.647018E-1, 2.351020E-1, 0.74314423, 4.974923E-2, 
    2.144491E0, -7.542702E-1, -2.594970E-1, 0.24038819, 0.74558222, 5.676374E-2, 
    1.880905E0, -7.526384E-1, -2.559083E-1, 0.24390065, 7.470732E-1, 6.377824E-2, 
    1.561732E0, -7.520956E-1, -2.546458E-1, 0.24531479, 0.74785391, 6.632897E-2, 
    1.452495E0, -7.519976E-1, -2.544288E-1, 0.24553334, 0.74795393, 8.035799E-2, 
    8.258413E-1, -7.520148E-1, -2.544723E-1, 0.24548373, 0.74792881, 8.737250E-2, 
    5.720349E-1, -7.520276E-1, -2.544978E-1, 0.24546106, 7.479197E-1, 9.438700E-2, 
    0.0, 0.0, 0.0, 0.0, 0.0 } ;

    for ( size_t i = 0; i < correctSCR.size(); ++i ){
      REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
    }

  } // GIVEN 


  GIVEN( "Initial energy E = 1e-3 eV" ){
    double enow = 1e-3;
    enow =    1.000000E-3;
    for ( auto& val : scr ){ val = 0.0; }

    int ie = 0;
    double xlast = 0.0, ylast = 0.0;
    std::vector<double> xsi(100,0.0);
    do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);

    std::vector<double> correctSCR {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.354496E-8, 
    4.138537E-1, -7.494305E-1, -2.487471E-1, 0.25125295, 0.75056922, 2.708992E-8, 
    5.852787E-1, -7.491945E-1, -2.482280E-1, 0.25177195, 0.75080491, 5.417985E-8, 
    8.277124E-1, -7.488607E-1, -2.474939E-1, 0.25250595, 0.75113815, 1.083597E-7, 
    1.170572E0, -7.483887E-1, -2.464556E-1, 0.25354405, 0.75160924, 2.167194E-7, 
    1.655465E0, -7.477208E-1, -2.449869E-1, 0.25501239, 7.522751E-1, 4.334387E-7, 
    2.341258E0, -7.467758E-1, -2.429088E-1, 0.25708963, 0.75321598, 8.668775E-7, 
    3.311257E0, -7.454384E-1, -2.399678E-1, 0.26002939, 0.75454488, 1.733755E-6, 
    4.683439E0, -7.435445E-1, -2.358027E-1, 0.26419294, 0.75642041, 3.467510E-6, 
    6.625122E0, -7.408607E-1, -2.298976E-1, 0.27006855, 0.75909485, 6.935020E-6, 
    9.374266E0, -7.370327E-1, -2.215258E-1, 0.27840714, 0.76287934, 1.387004E-5, 
    1.327120E1, -7.315813E-1, -2.095807E-1, 0.29028625, 0.76824253, 2.774008E-5, 
    1.880817E1, -7.237455E-1, -1.924268E-1, 0.30731147, 0.77590179, 5.548016E-5, 
    2.671330E1, -7.123235E-1, -1.674356E-1, 0.33205924, 7.869703E-1, 1.109603E-4, 
    3.811516E1, -6.952130E-1, -1.299720E-1, 0.36910243, 0.80336132, 2.219206E-4, 
    5.469209E1, -6.696242E-1, -7.435328E-2, 0.42287647, 0.82760954, 4.438412E-4, 
    7.943539E1, -6.286702E-1, 1.536574E-2, 0.51448317, 0.86852586, 8.876825E-4, 
    1.177772E2, -5.580482E-1, 0.17079978, 0.67074024, 0.94112132, 1.775365E-3, 
    1.132958E2, -6.207945E-1, 3.198767E-2, 0.52933995, 0.87283897, 2.663047E-3, 
    1.000673E2, -6.683889E-1, -7.440722E-2, 4.168994E-1, 0.81815094, 3.550730E-3, 
    8.816909E1, -6.996204E-1, -1.453324E-1, 0.34263267, 0.78004829, 4.826095E-3, 
    7.363417E1, -7.302084E-1, -2.164941E-1, 2.647800E-1, 0.73777672, 5.144936E-3, 
    7.042146E1, -7.362155E-1, -2.306806E-1, 0.24883951, 0.72892832, 5.463777E-3, 
    6.735297E1, -7.417698E-1, -2.438752E-1, 0.23384265, 0.72052226, 6.101460E-3, 
    6.162057E1, -7.517461E-1, -2.677746E-1, 0.20629995, 0.70477492, 6.101567E-3, 
    4.697668E1, -7.500006E-1, -2.500015E-1, 2.499983E-1, 0.74999911, 6.101674E-3, 
    4.697604E1, -7.500012E-1, -2.500030E-1, 2.499966E-1, 0.74999821, 6.101888E-3, 
    4.697475E1, -7.500025E-1, -2.500060E-1, 2.499932E-1, 0.74999642, 6.102316E-3, 
    4.697217E1, -7.500050E-1, -2.500120E-1, 2.499864E-1, 0.74999285, 6.103172E-3, 
    4.696703E1, -7.500099E-1, -2.500239E-1, 2.499728E-1, 7.499857E-1, 6.104885E-3, 
    4.695673E1, -7.500198E-1, -2.500479E-1, 0.24994561, 0.74997141, 6.108310E-3, 
    4.693615E1, -7.500396E-1, -2.500957E-1, 0.24989125, 0.74994283, 6.115160E-3, 
    4.689502E1, -7.500791E-1, -2.501914E-1, 0.24978263, 0.74988572, 6.128860E-3, 
    4.681286E1, -7.501581E-1, -2.503823E-1, 0.24956578, 0.74977172, 6.156260E-3, 
    4.664898E1, -7.503154E-1, -2.507628E-1, 0.24913365, 0.74954452, 6.211061E-3, 
    4.632294E1, -7.506278E-1, -2.515184E-1, 0.24827556, 0.74909333, 6.320663E-3, 
    4.567772E1, -7.512442E-1, -2.530089E-1, 0.24658341, 0.74820352, 6.539866E-3, 
    4.441444E1, -7.524441E-1, -2.559105E-1, 0.24329031, 0.74647187, 6.978273E-3, 
    4.199430E1, -7.547239E-1, -2.614241E-1, 0.23703518, 7.431831E-1, 7.855086E-3, 
    3.755877E1, -7.588752E-1, -2.714704E-1, 2.256367E-1, 0.73718713, 9.608713E-3, 
    3.012541E1, -7.659482E-1, -2.886299E-1, 0.20612041, 0.72689006, 1.311597E-2, 
    1.965693E1, -7.769744E-1, -3.155805E-1, 1.751800E-1, 7.103853E-1, 1.662322E-2, 
    1.308528E1, -7.855291E-1, -3.367411E-1, 0.15048975, 0.69695322, 2.013047E-2, 
    8.844176E0, -7.895341E-1, -3.501393E-1, 0.13239985, 0.68640882, 2.363773E-2, 
    6.048807E0, -7.918065E-1, -3.572893E-1, 0.12098438, 6.787267E-1, 2.714498E-2, 
    4.207837E0, -7.966820E-1, -3.661695E-1, 0.11017622, 6.716016E-1, 3.065223E-2, 
    2.988024E0, -8.045808E-1, -3.843479E-1, 9.313377E-2, 6.632542E-1, 3.415949E-2, 
    2.181687E0, -8.132304E-1, -4.063657E-1, 6.763736E-2, 0.65006098, 3.671022E-2, 
    2.095439E0, -8.046342E-1, -3.832756E-1, 9.790295E-2, 0.66957858, 5.073923E-2, 
    1.951280E0, -7.829508E-1, -3.309273E-1, 0.15765474, 0.70219598, 6.476824E-2, 
    1.398690E0, -7.686586E-1, -2.947295E-1, 0.19999021, 0.72373022, 6.731897E-2, 
    1.300457E0, -7.674876E-1, -2.918944E-1, 0.20347745, 0.72603204, 8.134799E-2, 
    7.372262E-1, -7.664191E-1, -2.895516E-1, 0.20597533, 0.72789955, 8.836250E-2, 
    5.099616E-1, -7.678017E-1, -2.929037E-1, 0.20205293, 7.255643E-1, 9.537700E-2, 
    0.0, 0.0, 0.0, 0.0, 0.0};
    for ( size_t i = 0; i < correctSCR.size(); ++i ){
      //std::cout << i << "   " << scr[i]  << "     " << correctSCR[i] << std::endl;
      REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
    }




  } // GIVEN


  GIVEN( "Higher tolerance and E = 1e-1 eV" ){
    double enow = 1e-1;
    tol = 1e-1;
    jbeta = -7;
    for ( auto& val : scr ){ val = 0.0; }

    int ie = 0;
    double xlast = 0.0, ylast = 0.0;
    std::vector<double> xsi(100,0.0);
    do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);

    std::vector<double> correctSCR {0.0, 0.0, 0.0, 
    0.0, 0.0, 0.0, 6.864013E-7, 2.036626E-2, -7.494533E-1, 
    -2.487979E-1, 0.25120138, 7.505455E-1, 1.372803E-6, 2.880219E-2, -7.492265E-1, 
    -2.482998E-1, 2.516988E-1, 7.507711E-1, 2.745605E-6, 4.073231E-2, -7.489055E-1, 
    -2.475950E-1, 0.25240205, 0.75108981, 5.491210E-6, 5.760379E-2, -7.484509E-1, 
    -2.465978E-1, 0.25339623, 0.75153983, 1.098242E-5, 8.146294E-2, -7.478068E-1, 
    -2.451864E-1, 0.25480151, 0.75217483, 2.196484E-5, 1.152028E-1, -7.468933E-1, 
    -2.431882E-1, 2.567876E-1, 0.75306994, 4.392968E-5, 1.629125E-1, -7.455965E-1, 
    -2.403575E-1, 0.25959421, 0.75432982, 8.785936E-5, 2.303678E-1, -7.437523E-1, 
    -2.363443E-1, 2.635602E-1, 0.75609904, 1.757187E-4, 3.257179E-1, -7.411238E-1, 
    -2.306471E-1, 0.26915166, 0.75858943, 3.514374E-4, 4.604329E-1, -7.373473E-1, 
    -2.225595E-1, 0.27701411, 0.76210374, 7.028749E-4, 6.505804E-1, -7.319174E-1, 
    -2.110147E-1, 0.28813198, 0.76698351, 1.405750E-3, 9.184508E-1, -7.240245E-1, 
    -1.944645E-1, 0.30382652, 0.77377253, 2.811499E-3, 1.294163E+0, -7.123918E-1, 
    -1.705464E-1, 0.32601883, 0.78314613, 4.217249E-3, 1.579253E+0, -7.030419E-1, 
    -1.516932E-1, 0.34315477, 0.79025392, 4.920124E-3, 1.702698E+0, -6.988340E-1, 
    -1.433086E-1, 0.35068228, 0.79334106, 5.271561E-3, 1.760867E+0, -6.968153E-1, 
    -1.393073E-1, 0.35425506, 7.947986E-1, 5.447280E-3, 1.789165E+0, -6.958245E-1, 
    -1.373485E-1, 0.35599951, 0.79550846, 5.535139E-3, 1.803129E+0, -6.953335E-1, 
    -1.363790E-1, 0.35686187, 0.79585894, 5.579069E-3, 1.810066E+0, -6.950891E-1, 
    -1.358967E-1, 0.35729065, 7.960331E-1, 5.601034E-3, 1.813523E+0, -6.949671E-1, 
    -1.356561E-1, 0.35750445, 0.79611991, 5.612016E-3, 1.815249E+0, -6.949062E-1, 
    -1.355359E-1, 0.35761121, 0.79616325, 5.617507E-3, 1.816111E+0, -6.948758E-1, 
    -1.354759E-1, 0.35766455, 7.961849E-1, 5.620253E-3, 1.816542E+0, -6.948606E-1, 
    -1.354459E-1, 0.35769121, 0.79619572, 5.621626E-3, 1.816758E+0, -6.948530E-1, 
    -1.354309E-1, 0.35770454, 0.79620114, 5.622312E-3, 1.816866E+0, -6.948492E-1, 
    -1.354234E-1, 3.577112E-1, 0.79620384, 5.622655E-3, 1.816919E+0, -6.948473E-1, 
    -1.354196E-1, 0.35771453, 0.79620519, 5.622827E-3, 1.816946E+0, -6.948463E-1, 
    -1.354177E-1, 3.577162E-1, 0.79620587, 5.622913E-3, 1.816960E+0, -6.948458E-1, 
    -1.354168E-1, 0.35771703, 0.79620621, 5.622956E-3, 1.816967E+0, -6.948456E-1, 
    -1.354163E-1, 0.35771745, 0.79620638, 5.622977E-3, 1.816970E+0, -6.948455E-1, 
    -1.354161E-1, 0.35771766, 0.79620646, 5.622988E-3, 1.816972E+0, -6.948454E-1, 
    -1.354160E-1, 0.35771776, 7.962065E-1, 5.622993E-3, 1.816972E+0, -6.948454E-1, 
    -1.354159E-1, 0.35771781, 0.79620652, 5.622999E-3, 1.389091E+0, -7.730128E-1, 
    -3.296001E-1, 0.14194516, 0.68346233, 1.965201E-2, 3.031403E+0, -6.584261E-1, 
    -1.438449E-1, 0.24965002, 0.70401099, 3.368103E-2, 3.992577E+0, -5.952508E-1, 
    -2.013369E-2, 0.33022598, 0.72331996, 3.623176E-2, 4.104700E+0, -5.878491E-1, 
    -7.642578E-3, 0.33466528, 0.72218382, 6.428978E-2, 5.109331E+0, -4.935578E-1, 
    1.366586E-1, 0.38800822, 0.68579585, 6.684051E-2, 5.443877E+0, -4.637176E-1, 
    0.16952509, 0.40834649, 0.68602072, 8.086953E-2, 9.192625E+0, -1.945170E-1, 
    0.37682738, 0.60191811, 0.83034275, 8.788403E-2, 1.326475E+1, -2.413363E-2, 
    0.50345402, 0.71684552, 0.89352312, 9.489854E-2, 2.072019E+1, 0.15852169, 
    0.63492083, 0.81079971, 0.94228852, 9.744927E-2, 2.556530E+1, 0.24389987, 
    0.71747528, 0.87680799, 0.96796903, 9.872464E-2, 2.692882E+1, 0.26813044, 
    0.74140598, 0.89643801, 0.97828375, 9.936232E-2, 2.769197E+1, 0.28099617, 
    0.75382316, 0.90675653, 0.98338783, 9.968116E-2, 2.808663E+1, 0.28750607, 
    0.76005642, 0.91197833, 0.98586305, 9.984058E-2, 2.828787E+1, 0.29078395, 
    7.631855E-1, 0.91461283, 0.98707994, 9.992029E-2, 2.837901E+1, 0.29230072, 
    0.76464221, 0.91584015, 0.98763809, 9.996015E-2, 2.840346E+1, 0.29279769, 
    0.76514377, 0.91625981, 0.98782639, 1.000000E-1, 3.440220E+1, 0.30582672, 
    0.79314916, 0.92987737, 0.98604249, 0.10003986, 2.836011E+1, 2.929292E-1, 
    0.76522285, 0.91628711, 0.98783035, 0.10007972, 2.829237E+1, 0.29256779, 
    0.76480258, 0.91589566, 0.98764625, 0.10015943, 2.811547E+1, 0.29131929, 
    0.76350881, 0.91472604, 0.98709725, 0.10031885, 2.774551E+1, 0.28857604, 
    0.76071061, 0.91221211, 0.98590126, 0.10063769, 2.702355E+1, 0.28314945, 
    0.75516914, 0.90725514, 0.98347901, 0.10127537, 2.564506E+1, 0.27247246, 
    0.74424116, 0.89755701, 0.97852543, 0.10255073, 2.319311E+1, 0.25278334, 
    7.237711E-1, 0.87960492, 0.96872793, 0.10510146, 1.767882E+1, 0.19127951, 
    0.67007433, 0.83292116, 0.94566889, 0.11211597, 8.391549E+0, 1.243163E-2, 
    0.55160131, 0.74579034, 0.90413718, 0.11913048, 4.525436E+0, -1.491991E-1, 
    0.46606686, 0.65939168, 0.85444076, 0.12614499, 2.670650E+0, -2.912712E-1, 
    0.39966931, 0.59369337, 8.037740E-1, 0.13315949, 1.665226E+0, -3.941523E-1, 
    0.31272914, 5.451306E-1, 0.75913061, 0.13571022, 1.446525E+0, -4.150164E-1, 
    0.28892534, 0.53950115, 0.76238975, 0.14973923, 8.091762E-1, -4.412098E-1, 
    0.25555157, 5.593595E-1, 0.79735345, 0.16376824, 4.725918E-1, -4.470644E-1, 
    0.23835322, 0.56919207, 0.81301938, 0.16631897, 4.287083E-1, -4.478542E-1, 
    0.23663686, 0.57098666, 8.144786E-1, 0.18034799, 2.339703E-1, -4.799073E-1, 
    0.17908187, 0.54356522, 0.80391892, 1.943770E-1, 0.0, 0.0, 
    0.0, 0.0, 0.0 };
    for ( size_t i = 0; i < correctSCR.size(); ++i ){
      //if ( (i-1)%6 == 0 ){ 
      //    continue; }
      //std::cout << i << "   " << scr[i] << std::endl;
      REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
    }




  } // GIVEN

  GIVEN( "High tolerance and high energy " ){
    double enow = 0.2;
    tol = 1e-1;
    jbeta = -7;
    for ( auto& val : scr ){ val = 0.0; }

    int ie = 0;
    double xlast = 0.0, ylast = 0.0;
    std::vector<double> xsi(100,0.0);
    do_330_extra(enow,j,tev,tol,lat,iinc,lasym,alphas,betas,sab,az,sigma_b,sigma_b2,teff,nbin,jbeta,scr,xsi,ie,xlast,ylast);

    std::vector<double> correctSCR {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
8.058397E-7, 1.316792E-2, -7.495806E-1, -2.490782E-1, 2.509209E-1, 0.75041802, 
1.611679E-6, 1.862221E-2, -7.494065E-1, -2.486961E-1, 0.25130209, 0.75059079, 
3.223359E-6, 2.633566E-2, -7.491600E-1, -2.481554E-1, 0.25184091, 0.75083473, 
6.446717E-6, 3.724391E-2, -7.488106E-1, -2.473902E-1, 2.526024E-1, 0.75117894, 
1.289343E-5, 5.266990E-2, -7.483150E-1, -2.463068E-1, 0.25367832, 0.75166418, 
2.578687E-5, 7.448379E-2, -7.476111E-1, -2.447722E-1, 0.25519797, 7.523473E-1, 
5.157374E-5, 1.053284E-1, -7.466097E-1, -2.425969E-1, 0.25734346, 0.75330707, 
1.031475E-4, 1.489353E-1, -7.451816E-1, -2.395099E-1, 0.26037094, 0.75465165, 
2.062949E-4, 2.105654E-1, -7.431378E-1, -2.351223E-1, 0.26464073, 0.75652724, 
4.125899E-4, 2.976124E-1, -7.401984E-1, -2.288705E-1, 0.27062946, 0.75915816, 
8.251797E-4, 4.204009E-1, -7.359181E-1, -2.199510E-1, 0.27904938, 0.76279568, 
1.650359E-3, 5.931825E-1, -7.296389E-1, -2.070800E-1, 0.29093024, 7.678022E-1, 
3.300719E-3, 8.350184E-1, -7.202740E-1, -1.884111E-1, 3.075949E-1, 7.745574E-1, 
6.601438E-3, 1.169834E0, -7.059832E-1, -1.609863E-1, 0.33095227, 0.78359431, 
1.320288E-2, 1.625559E0, -6.829625E-1, -1.186497E-1, 0.36565637, 0.79626494, 
2.640575E-2, 2.209573E0, -6.458400E-1, -5.568446E-2, 0.41205929, 0.81178508, 
5.281150E-2, 2.937096E0, -5.740339E-1, 5.864191E-2, 4.974449E-1, 0.83956473, 
7.921725E-2, 3.408197E0, -5.009474E-1, 0.16421786, 0.57275156, 0.86647343, 
9.242013E-2, 3.591839E0, -4.631137E-1, 0.21509233, 0.60722083, 0.87855184, 
9.902156E-2, 3.647072E0, -4.469508E-1, 0.23503274, 0.62585031, 8.868137E-1, 
0.10232228, 3.683744E0, -4.375104E-1, 0.24707318, 0.63435257, 0.88995308, 
0.10397264, 3.701664E0, -4.327614E-1, 0.25308546, 0.63859214, 0.89152185, 
0.10479782, 3.710526E0, -4.303794E-1, 0.25609005, 0.64070933, 0.89230597, 
0.10521041, 3.714934E0, -4.291864E-1, 0.25759202, 0.64176732, 0.89269797, 
0.10541671, 3.717132E0, -4.285895E-1, 0.25834295, 0.64229617, 0.89289395, 
0.10551986, 3.718229E0, -4.282909E-1, 2.587184E-1, 0.64256057, 0.89299194, 
0.10557143, 3.718778E0, -4.281416E-1, 2.589061E-1, 0.64269274, 0.89304093, 
0.10559722, 3.719052E0, -4.280669E-1, 0.25899997, 0.64275884, 0.89306542, 
0.10561011, 3.719189E0, -4.280296E-1, 0.25904688, 0.64279187, 0.89307767, 
0.10561656, 3.719258E0, -4.280109E-1, 0.25907036, 6.428084E-1, 8.930838E-1, 
0.10561978, 3.719292E0, -4.280016E-1, 0.25908208, 0.64281666, 0.89308685, 
0.10562139, 3.719309E0, -4.279969E-1, 0.25908794, 0.64282078, 0.89308838, 
1.056222E-1, 3.719317E0, -4.279946E-1, 0.25909089, 0.64282286, 0.89308915, 
1.056226E-1, 3.719322E0, -4.279934E-1, 0.25909234, 0.64282388, 0.89308953, 
1.056228E-1, 3.719324E0, -4.279928E-1, 0.25909307, 6.428244E-1, 0.89308972, 
1.056229E-1, 3.719325E0, -4.279926E-1, 0.25909344, 0.64282465, 0.89308982, 
0.10562295, 3.719325E0, -4.279924E-1, 0.25909362, 0.64282478, 0.89308987, 
0.10562298, 3.719326E0, -4.279923E-1, 0.25909373, 0.64282486, 0.89308989, 
0.10562299, 3.719326E0, -4.279923E-1, 0.25909376, 0.64282488, 8.930899E-1, 
1.056230E-1, 2.973236E0, -5.172348E-1, 0.10462264, 0.47381672, 0.76617613, 
0.13368103, 3.682241E0, -3.789418E-1, 0.31593706, 0.63712824, 0.84234314, 
0.13623176, 3.688598E0, -3.728173E-1, 0.32315476, 0.64069789, 0.84324795, 
0.16428978, 3.945966E0, -2.778314E-1, 0.43755943, 0.67977147, 0.83465211, 
0.16684051, 4.109539E0, -2.523725E-1, 0.46750822, 0.69022767, 8.364274E-1, 
0.18086953, 6.221135E0, -4.941113E-3, 0.65930719, 0.78934066, 0.91088953, 
0.18788404, 8.609271E0, 0.18288229, 0.73227351, 0.85086393, 0.94455541, 
0.19489854, 1.343754E1, 0.38231747, 0.81486189, 0.90857729, 0.97057813, 
0.19744927, 1.597323E1, 0.44295958, 0.84782412, 0.93456643, 0.98312195, 
0.19872464, 1.672848E1, 0.46157913, 0.85962969, 0.94473274, 0.98858597, 
0.19936232, 1.716709E1, 4.716975E-1, 0.86596006, 9.500881E-1, 0.99122088, 
0.19968116, 1.739746E1, 0.47685499, 0.86917667, 0.95279085, 0.99249279, 
0.19984058, 1.751400E1, 0.47942883, 0.87078178, 9.541364E-1, 9.931110E-1, 
0.19992029, 1.755609E1, 0.48041296, 0.87142365, 0.95467532, 0.99335472, 
0.19996015, 1.756363E1, 0.48065657, 0.87161265, 0.95483576, 0.99342683, 
0.19998008, 1.838137E1, 0.46994417, 0.86067099, 0.95217146, 0.99306912, 
0.19999004, 2.207671E1, 0.52589108, 0.88774754, 0.95354742, 0.99118772, 
0.19999253, 2.212073E1, 0.52648647, 0.88804936, 0.95378039, 0.99135418, 
0.19999316, 2.213113E1, 0.52662694, 0.88812058, 0.95383543, 0.99139324, 
0.19999347, 2.213607E1, 0.52669363, 8.881544E-1, 0.95386157, 0.99141176, 
0.19999355, 2.213732E1, 0.52671055, 0.88816298, 0.95386821, 0.99141646, 
0.19999357, 2.213763E1, 0.52671476, 0.88816512, 0.95386986, 0.99141763, 
0.19999358, 2.859911E1, 0.58837535, 0.87064313, 0.93758455, 0.98668763, 
0.19999359, 2.859926E1, 0.58837666, 8.706438E-1, 0.93758533, 0.98668829, 
0.19999363, 2.859988E1, 0.58838186, 0.87064645, 0.93758845, 0.98669091, 
0.19999378, 2.860217E1, 0.58840121, 8.706563E-1, 0.93760007, 0.98670068, 
0.19999502, 2.861963E1, 5.885490E-1, 0.87073166, 0.93768892, 0.98677527, 
0.19999751, 2.864467E1, 0.58876218, 0.87084107, 0.93781798, 9.868832E-1, 
0.19999876, 2.865102E1, 0.58881757, 0.87087006, 0.93785224, 0.98691177, 
0.19999907, 2.865188E1, 0.58882541, 0.87087429, 0.93785724, 0.98691594, 
0.19999911, 2.865197E1, 0.58882624, 0.87087474, 0.93785778, 9.869164E-1, 
0.19999912, 4.418280E1, 0.56837301, 0.79721674, 0.89664642, 0.97478858, 
0.19999913, 4.418282E1, 5.683731E-1, 0.79721684, 0.89664655, 9.747887E-1, 
0.19999915, 4.418286E1, 0.56837328, 0.79721704, 0.89664681, 0.97478895, 
0.19999923, 4.418299E1, 0.56837393, 0.79721779, 0.89664777, 0.97478988, 
0.19999938, 4.418319E1, 0.56837495, 0.79721899, 0.89664931, 0.97479137, 
2.000000E-1, 4.418330E1, 0.56837643, 0.79722115, 0.89665214, 0.97479413, 
0.20000063, 4.418216E1, 0.56837517, 0.79721894, 0.89664923, 0.97479129, 
0.20000079, 4.418168E1, 0.56837413, 0.79721764, 0.89664755, 0.97478966, 
0.20000087, 4.418141E1, 0.56837349, 0.79721688, 0.89664657, 0.97478871, 
0.20000088, 4.418137E1, 0.56837341, 0.79721678, 0.89664644, 0.97478859, 
0.20000089, 2.865102E1, 0.58882699, 0.87087487, 0.93785784, 0.98691641, 
0.20000091, 2.865095E1, 5.888266E-1, 0.87087465, 0.93785758, 0.98691619, 
0.20000094, 2.865085E1, 0.58882598, 8.708743E-1, 0.93785717, 0.98691585, 
0.20000125, 2.864964E1, 0.58881833, 0.87087009, 0.93785214, 0.98691164, 
2.000025E-1, 2.864192E1, 0.58876369, 0.87084113, 0.93781779, 0.98688295, 
0.20000499, 2.861415E1, 0.58855212, 0.87073183, 9.376886E-1, 0.98677482, 
0.20000624, 2.859518E1, 0.58840392, 8.706559E-1, 0.93759896, 0.98669951, 
2.000064E-1, 2.859256E1, 0.58838337, 0.87064539, 0.93758655, 0.98668907, 
0.20000642, 2.859223E1, 0.58838078, 0.87064406, 0.93758499, 0.98668776, 
0.20000643, 2.213222E1, 0.52672082, 0.88816694, 0.95387045, 0.99141778, 
0.20000644, 2.213206E1, 0.52671872, 0.88816587, 0.95386963, 0.99141719, 
0.20000648, 2.213140E1, 0.52671032, 0.88816161, 0.95386632, 0.99141485, 
0.20000655, 2.213024E1, 0.52669555, 8.881541E-1, 0.95386051, 0.99141073, 
0.20000686, 2.212504E1, 0.52662904, 0.88812031, 0.95383435, 0.99139219, 
0.20000748, 2.211428E1, 0.52649123, 0.88805033, 0.95378019, 0.99135372, 
0.20000997, 2.206816E1, 5.258980E-1, 0.88774912, 0.95354738, 0.99118726, 
0.20001993, 1.836728E1, 0.46996167, 0.86067725, 0.95217374, 0.99306924, 
0.20003986, 1.753633E1, 0.48070729, 0.87163553, 0.95484398, 0.99342802, 
0.20007972, 1.750155E1, 0.48051447, 0.87146951, 0.95469184, 0.99335713, 
0.20015943, 1.740542E1, 0.47963126, 0.87087319, 0.95416972, 0.99311605, 
0.20031885, 1.718246E1, 0.47726144, 0.86936203, 0.95285962, 0.99250392, 
0.20063769, 1.674548E1, 0.47251409, 0.86633913, 0.95023325, 9.912471E-1, 
0.20127537, 1.591687E1, 0.46322857, 0.86042319, 0.94505332, 0.98865497, 
0.20255073, 1.446048E1, 0.44631383, 0.84954291, 9.353227E-1, 0.98332876, 
0.20510146, 1.103339E1, 3.901399E-1, 0.81933801, 0.91081315, 0.97123672, 
0.21211597, 5.380518E0, 0.20190281, 0.74675037, 0.85930748, 0.94759004, 
0.21913048, 2.953821E0, 3.157649E-2, 0.68492758, 0.80699363, 0.91838068, 
0.22614499, 1.798367E0, -8.964498E-2, 0.61048987, 0.76575033, 0.88702991, 
0.23315949, 1.148179E0, -1.813717E-1, 0.52188669, 0.73242475, 0.85916738, 
0.23571022, 1.001930E0, -2.008812E-1, 0.49821371, 7.263431E-1, 0.85902555, 
0.24973923, 5.627961E-1, -2.255435E-1, 0.46219082, 0.72522986, 0.87361655, 
0.26376824, 3.273604E-1, -2.329576E-1, 0.44712649, 0.72133092, 0.87915622, 
0.26631897, 2.601356E-1, -2.925191E-1, 0.36855421, 0.67473587, 0.88325444, 
0.28034799, 1.497179E-1, -3.029577E-1, 0.35059878, 0.65823754, 0.87197892, 
2.943770E-1, 0.0, 0.0, 0.0, 0.0, 0.0 };
    //for ( size_t i = 0; i < scr.size(); ++i ){
    for ( size_t i = 0; i < correctSCR.size(); ++i ){
      //if ( (i-1)%6 == 0 ){ 
      //    continue; }
      //std::cout << i << "   " << scr[i]  << "     " << correctSCR[i] << std::endl;
      REQUIRE( scr[i] == Approx(correctSCR[i]).epsilon(1e-6) );
    }




  } // GIVEN
} // TEST CASE














