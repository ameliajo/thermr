#define CATCH_CONFIG_MAIN 
#include "catch.hpp"
#include "calcem/calcem_util/e_ep_mu.h"


TEST_CASE( "Branch to handle E-E'-mu ordering" ){
  std::vector<double> alpha(40),beta(80);
  GIVEN( "inputs" ){
    int ncds = 0, iinc = 1, lat = 1, 
        lasym = 0, nnl = -9, nl = 9, jmax = 55550, nne = 94, iprint=2;
    double teff = 400.0, teff2 = 290.0, za = 6000.0, awr = 11.8969, emax = 1.2, 
        cliq = 0.0, t = 350.0, tol = 5e-2, az = 11.9, az2 = 0.0, 
        sb = 12.5, sb2 = 6.6;
    std::vector<double> scr( 500000, 0.0 ), esi( 95, 0.0 ), xsi( 95, 0.0 );
    for (size_t i = 0; i < alpha.size(); ++i ){
      alpha[i] = 0.8 * i * ( i%2 ) + 0.01;
    }

    for (size_t i = 0; i < beta.size(); ++i ){
      beta[i] = i * ( i%5 );
    }



    std::vector<std::vector<double>> sab ( alpha.size(), std::vector<double> (beta.size()));
    for ( size_t i = 0; i < alpha.size(); ++i ){
      for ( size_t j = 0; j < beta.size(); ++j ){
        sab[i][j] = 0.5*i + 0.1*j;
      }
    }

    std::setprecision(15);

    e_ep_mu( teff, teff2, scr, za, awr, ncds, emax, cliq, iinc, lat, esi, xsi, 
      lasym, alpha, beta, sab, t, tol, az, az2, sb, sb2, nnl, nl, jmax, nne, 
      iprint );
    //std::cout << "okay got to here" << std::endl;
    std::vector<double> correctScr { 0.0, 1.28, 0.0, 0.0, 700.0, 10.0, 0.0, 
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.41999998, 1.86091186e-5, 
      -0.993673181, -0.979950652, -0.964086648, -0.945337416, -0.922198835, 
      -0.891773326, -0.846221565, -0.723293595, 0.42999998, 3.31071489e-5, 
      -0.993493779, -0.979383894, -0.963087599, -0.943846907, -0.920141883, 
      -0.889031503, -0.842657626, -0.717702551, 0.43999998, 5.76134241e-5, 
      -0.993324958, -0.978854787, -0.962167157, -0.942496063, -0.918325733, 
      -0.886725080, -0.840001394, -0.727515386, 0.44999998, 9.87713641e-5, 
      -0.993121817, -0.978212003, -0.961032283, -0.940793067, -0.915955741, 
      -0.883525659, -0.835684599, -0.721752188, 0.45999998, 1.66389557e-4, 
      -0.992905215, -0.977526067, -0.959820270, -0.938969802, -0.913408636, 
      -0.880067088, -0.830946391, -0.714300974, 0.46999998, 2.75422727e-4, 
      -0.992679031, -0.976810225, -0.958557041, -0.937070779, -0.910757514, 
      -0.876472314, -0.826029054, -0.706592419, 0.47999997, 4.48233312e-4, 
      -0.992442724, -0.976062894, -0.957239646, -0.935092103, -0.907997314, 
      -0.872733912, -0.820923754, -0.698615423, 0.48999997, 7.21085023e-4, 
      -0.992183359, -0.975382888, -0.956268152, -0.933570840, -0.905651280, 
      -0.869352832, -0.816102308, -0.690785103, 0.49999997, 1.1389945e-3, 
      -0.99190297, -0.97449207 };
    std::vector<double> correctScr1 { -0.3890641, -0.1695764, 4.89617247e-5, 
      0.144907884, 0.278640555, 0.413700704, 0.592911403, 1.4918875, 
      2.33536181e-2, -0.759132348, -0.437944124, -0.222739429, -5.35609208e-2, 
      9.241568050e-2, 0.228432220, 0.367470258, 0.554825727, 1.50770, 
      1.36085803e-2, -0.78487292, -0.48256178, -0.27246902, -0.10453066, 
      4.19479314e-2, 0.179762790, 0.322321968, 0.517320331, 1.5187688, 
      9.30751916e-3, -0.799721524, -0.510577788, -0.304899713, -0.138420933, 
      7.9610362e-3, 0.146675355, 0.291346897, 0.491241739, 1.5298375, 
      6.34130017e-3, -0.813874571, -0.538090548, -0.337376884, -0.172605628, 
      -2.46293574e-2, 0.115246117, 0.261483675, 0.465679561, 1.5409063, 
      4.33017348e-3, -0.826429861, -0.563045366, -0.367141500, -0.204318272, 
      -5.70576828e-2, 8.31990281e-2, 0.231144071, 0.439578634, 1.551975, 
      2.95412185e-3, -0.837991561, -0.586589999, -0.395631728, -0.234962172, 
      -8.86058021e-2, 5.18921232e-2, 0.201358273, 0.413834273, 1.56304381, 
      2.01919256e-3, -0.849870088, -0.612329787, -0.425675327, -0.266583607, 
      -0.12078306, 2.02287431e-2, 0.171343306, 0.387947403, 1.5741125, 
      1.37348255e-3, -0.859289585, -0.632233269, -0.450969606, -0.294630657, 
      -0.150247802, -9.39852098e-3, 0.142741672, 0.362801945, 1.5851813, 
      9.3327807e-4, -0.868046673, -0.651115042, -0.475217293, -0.321742679, 
      -0.178911628, -3.83474448e-2, 0.114635166, 0.337899339, 1.59625, 
      6.33473677e-4, -0.876180786, -0.669008586 };
    std::vector<double> correctScr2 { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
      2.2667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.6968, 0.0, 0.0, 
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.2028, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
      0.0, 0.0, 0.0, 3.7088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
      4.2148, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.7208, 0.0, 0.0, 
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.2268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
      0.0, 0.0, 0.0, 5.7328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
      6.2388, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.7448, 0.0, 0.0, 
      0.0 };
    std::vector<double> correctXsi { 192.687087, 144.587184, 122.116012, 
      103.351869, 86.6428460, 73.4138564, 61.6597845, 55.1254231, 49.1203882, 
      44.1521286, 39.4992293, 36.6542985, 33.9883485, 31.2791233, 28.7648233, 
      26.4233654, 24.3133111, 22.8785501, 21.5459909, 20.0027451, 18.6150044, 
      17.4907314, 16.8218726, 16.2378360, 15.6243957, 15.0247278, 14.4749265, 
      14.0568394, 13.7535570, 13.4544673, 13.1754706, 12.8964981, 12.6359733, 
      12.4270856, 12.2366701, 12.1041033, 12.0302101, 11.9911510, 11.9016151, 
      11.8248312, 11.7600254, 11.7064295, 11.6434703, 11.5506739, 11.4892506, 
      11.4706132, 11.4440353, 11.3615172, 11.3215197, 11.2608880, 11.2251223, 
      11.1608024, 11.1298850, 11.1022731, 11.0907970, 11.0671577, 11.0547462, 
      11.0203999, 10.9966705, 10.9754017, 10.9588056, 10.9532091, 10.9722820, 
      11.0136795, 10.9965650, 10.9150020, 10.8958882, 10.8823116, 10.8753335, 
      10.8744784, 10.8629479, 10.8534989, 10.8461076, 10.8369720, 10.8001389, 
      10.7932652, 10.7880668, 10.7756652, 10.7731218, 10.7702643, 10.7734821, 
      10.7683389, 10.7593202, 10.7537044, 10.7471225, 10.7615844, 10.7589499, 
      10.7436237, 10.7433339, 10.7075284, 10.7083305, 10.7159086, 10.7068117, 
      10.7220208, 0.0 };


    for ( size_t i = 0; i < correctScr.size(); ++i ){
      REQUIRE( correctScr[i] == Approx(scr[i]).epsilon(1e-6) );
    }
    for ( size_t i = 0; i < correctScr2.size(); ++i ){
      REQUIRE( correctScr2[i] == Approx(scr[i+699]).epsilon(1e-6) );
    }
    for ( size_t i = 0; i < correctScr1.size(); ++i ){
      REQUIRE( correctScr1[i] == Approx(scr[i+499]).epsilon(1e-6) );
    }

    REQUIRE( 8.0048000000007988 == Approx(scr[1026]).epsilon(1e-6) );
    for ( size_t i = 1027; i < scr.size(); ++i ){
      REQUIRE( 0.0 == Approx(scr[i]).epsilon(1e-6) );
    }

    for ( size_t i = 0; i < xsi.size(); ++i ){
      REQUIRE( correctXsi[i] == Approx(xsi[i]).epsilon(1e-6) );
    }

  } // GIVEN

  GIVEN( "inputs" ){
    int ncds = 0, iinc = 1, lat = 1, 
        lasym = 0, nnl = -9, nl = 9, jmax = 55550, nne = 94, iprint=2;
    double teff = 713.39, teff2 = 0.0, za = 6000.0, awr = 11.8969, emax = 1.2, 
        cliq = 0.0, t = 296.0, tol = 5e-2, az = 11.9, az2 = 0.0, 
        sb = 5.5348570016241778, sb2 = 0.0;
    std::vector<double> scr( 500000, 0.0 ), esi( 95, 0.0 ), xsi( 95, 0.0 );

    std::vector<double> alpha(40),beta(80);
    for (size_t i = 0; i < alpha.size(); ++i ){
      alpha[i] = 0.8 * i * ( i%2 ) + 0.01;
    }

    for (size_t i = 0; i < beta.size(); ++i ){
      beta[i] = i * ( i%5 );
    }

    std::vector<std::vector<double>> sab ( alpha.size(), std::vector<double> (beta.size()));
    for ( size_t i = 0; i < alpha.size(); ++i ){
      for ( size_t j = 0; j < beta.size(); ++j ){
        sab[i][j] = 0.01*i*(j%4) + 0.1*j;
      }
    }

    std::setprecision(15);

    e_ep_mu( teff, teff2, scr, za, awr, ncds, emax, cliq, iinc, lat, esi, xsi, lasym, alpha, beta, sab, t, tol, az, az2, sb, sb2, nnl, nl, jmax, nne, iprint );
    //std::cout << "okay got to here" << std::endl;
    std::vector<double> correctScr { 0.0, 1.28, 0.0, 0.0, 690.0, 10.0, 0.0, 
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.47, 2.4354583e-5, 
      -0.993689667,  -0.980009981, -0.964211595, -0.945562896, -0.922587663, 
      -0.892459506, -0.847589701, -0.728393399, 0.47999997, 4.30344428e-5, 
      -0.993482897, -0.979354062, -0.963047473, -0.943809713, -0.920132779, 
      -0.889102644, -0.842956378, -0.719356756, 0.48999997, 7.42634735e-5, 
      -0.993296035, -0.978767579, -0.962024693, -0.942302900, -0.918094004, 
      -0.886481321, -0.839826763, -0.728091336, 0.49999997, 1.26241341e-4, 
      -0.993073786, -0.978064260, -0.960782612, -0.940437623, -0.915494656, 
      -0.882963365, -0.835047333, -0.721337200, 0.50999997, 2.10794878e-4, 
      -0.992838492, -0.977318654, -0.959468181, -0.938462014, -0.912737520, 
      -0.879224965, -0.829935369, -0.713333747, 0.51999997, 3.45817915e-4, 
      -0.992591843, -0.976539652, -0.958093140, -0.936397059, -0.909858041, 
      -0.875326526, -0.824613978, -0.705030646, 0.52999997, 5.60532614e-4, 
      -0.992319469, -0.975817196, -0.957055683, -0.934791975, -0.907392369, 
      -0.871780607, -0.819565471, -0.696851926, 0.53999997, 8.88391765e-4, 
      -0.992052401, -0.974973040, -0.955547371, -0.932508378, -0.904232524, 
      -0.867537457, -0.813840440, -0.688250171, 0.54999997, 1.38993636e-3, 
      -0.9917447, -0.973996522 };
    std::vector<double> correctScr1 { -9.65073907e-2, 6.34362317e-2, 
      0.198218920, 0.321905500, 0.446191795, 0.611654767, 1.46816880, 
      7.58905843e-3, -0.690866704, -0.336041024, -0.125295375, 3.48547143e-2, 
      0.170556112, 0.295635865, 0.422151677, 0.591969316, 1.47607500, 
      5.53351154e-3, -0.708029672, -0.362942918, -0.15347845, 6.74025692e-3, 
      0.143235544, 0.269608671, 0.398248234, 0.572276831, 1.4839813, 
      4.03325561e-3, -0.724221062, -0.388954159, -0.181043531, -2.08965774e-2, 
      0.116268309, 0.243835529, 0.374493207, 0.552590379, 1.49188750, 
      2.93865753e-3, -0.739481356, -0.414069011, -0.207973379, -4.80404098e-2, 
      8.96710091e-2, 0.218334239, 0.350905969, 0.532945243, 1.50770000, 
      1.55984860e-3, -0.767365911, -0.463339992, -0.261190195, -0.101738519, 
      3.69347172e-2, 0.167656009, 0.303842560, 0.493293268, 1.5187688, 
      9.99126783e-4, -0.784947455, -0.494138472, -0.295723477, -0.137304217, 
      1.53802099e-3, 0.133319079, 0.271682035, 0.465976866, 1.5298375, 
      6.39972194e-4, -0.802644055, -0.524667727, -0.329841076, -0.172455091, 
      -3.34959209e-2, 9.92878620e-2, 0.239723580, 0.438693275, 1.54090630, 
      4.07902468e-4, -0.81757662, -0.552952735, -0.362850573, -0.206957298, 
      -6.64008903e-2, 6.73070572e-2, 0.209200198, 0.412416799, 1.55197500, 
      2.60588240e-4, -0.83078535, -0.578601545, -0.393118815, -0.239078162, 
      -9.92374141e-2, 3.48946010e-2, 0.17840620100, 0.38612063200, 1.5630438000, 
      1.65998517e-4, -0.843136275, -0.603297476, -0.422800217 };
    std::vector<double> correctScr2 { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.6968, 
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.2028, 0.0, 0.0, 0.0, 0.0, 
      0.0, 0.0, 0.0, 0.0, 0.0, 3.7088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
      0.0, 4.2148, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.7208, 0.0, 
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.2268, 0.0, 0.0, 0.0, 0.0, 0.0, 
      0.0, 0.0, 0.0, 0.0, 5.7328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
      6.2388, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.7448, 0.0, 0.0, 
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2508, 0.0, 0.0, 0.0, 0.0 };
    std::vector<double> correctXsi { 78.4941480, 58.9107862, 49.7668683, 
      42.1262700, 35.3271576, 29.9466141, 25.1672092, 22.5097416, 20.0761627, 
      18.0532405, 16.1717158, 15.0215136, 13.9522246, 12.8590731, 11.8630813, 
      10.9158257, 10.0675041, 9.49478778, 8.96066210, 8.34406854, 7.79738841, 
      7.35233485, 7.09049622, 6.85582972, 6.61679130, 6.38558314, 6.16690866, 
      5.99412388, 5.87381557, 5.76381404, 5.65812920, 5.56215719, 5.46571351, 
      5.38067494, 5.33001068, 5.28008148, 5.24726814, 5.21176565, 5.18025867, 
      5.18404669, 5.16203839, 5.14150595, 5.11628619, 5.08154300, 5.03560619, 
      5.02757389, 5.01384772, 4.99969405, 4.97651071, 4.95769265, 4.94220510, 
      4.92048548, 4.91510160, 4.89735306, 4.88801536, 4.87871041, 4.87250271, 
      4.86940392, 4.86206689, 4.85806103, 4.85318976, 4.84611692, 4.83960006, 
      4.81103563, 4.80610063, 4.80144884, 4.79981585, 4.79735438, 4.79089560, 
      4.79739115, 4.79469846, 4.78503046, 4.77968069, 4.77560423, 4.77386631, 
      4.76816121, 4.76419399, 4.76597801, 4.76538910, 4.76347816, 4.75976915, 
      4.75834621, 4.75655845, 4.76105709, 4.75789923, 4.75232770, 4.75353550, 
      4.74365164, 4.74182716, 4.74157888, 4.73946821, 4.74945520, 4.74341907, 
      4.74250652, 0.0 };


    for ( size_t i = 0; i < correctScr.size(); ++i ){
      REQUIRE( correctScr[i] == Approx(scr[i]).epsilon(1e-6) );
    }

    for ( size_t i = 0; i < correctScr1.size(); ++i ){
      REQUIRE( correctScr1[i] == Approx(scr[i+500]).epsilon(1e-6) );
    }

    for ( size_t i = 0; i < correctScr2.size(); ++i ){
      REQUIRE( correctScr2[i] == Approx(scr[i+700]).epsilon(1e-6) );
    }

    REQUIRE( 7.9948178 == Approx(scr[966]).epsilon(1e-6) );
    for ( size_t i = 967; i < scr.size(); ++i ){
      REQUIRE( 0.0 == Approx(scr[i]).epsilon(1e-6) );
    }

    for ( size_t i = 0; i < xsi.size(); ++i ){
      REQUIRE( correctXsi[i] == Approx(xsi[i]).epsilon(1e-6) );
    }
    std::cout << std::setprecision(15) << xsi[0] << "     " << correctXsi[0] << std::endl;






  } // GIVEN
  GIVEN( "inputs" ){
    int ncds = 0, iinc = 1, lat = 1, 
        lasym = 0, nnl = -9, nl = 9, jmax = 55550, nne = 94, iprint=2;
    double teff = 713.39, teff2 = 0.0, za = 6000.0, awr = 11.8969, emax = 1.2, 
        cliq = 0.0, t = 296.0, tol = 5e-2, az = 11.9, az2 = 0.0, 
        sb = 5.5348570016241778, sb2 = 0.0;
    std::vector<double> scr( 500000, 0.0 ), esi( 95, 0.0 ), xsi( 95, 0.0 );

    std::vector<double> alpha(40),beta(80);
    for (size_t i = 0; i < alpha.size(); ++i ){
      alpha[i] = 0.8 * i * ( i%2 ) + 0.01;
    }

    for (size_t i = 0; i < beta.size(); ++i ){
      beta[i] = i * ( i%5 );
    }

    std::vector<std::vector<double>> sab ( alpha.size(), std::vector<double> (beta.size()));
    for ( size_t i = 0; i < alpha.size(); ++i ){
      for ( size_t j = 0; j < beta.size(); ++j ){
        sab[i][j] = 0.01*i*(j%4) + 0.1*j;
      }
    }

    std::setprecision(15);

    e_ep_mu( teff, teff2, scr, za, awr, ncds, emax, cliq, iinc, lat, esi, xsi, lasym, alpha, beta, sab, t, tol, az, az2, sb, sb2, nnl, nl, jmax, nne, iprint );
    //std::cout << "okay got to here" << std::endl;
    std::vector<double> correctScr { 0.0, 1.28, 0.0, 0.0, 690.0, 10.0, 0.0, 
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.47, 2.4354583e-5, 
      -0.993689667,  -0.980009981, -0.964211595, -0.945562896, -0.922587663, 
      -0.892459506, -0.847589701, -0.728393399, 0.47999997, 4.30344428e-5, 
      -0.993482897, -0.979354062, -0.963047473, -0.943809713, -0.920132779, 
      -0.889102644, -0.842956378, -0.719356756, 0.48999997, 7.42634735e-5, 
      -0.993296035, -0.978767579, -0.962024693, -0.942302900, -0.918094004, 
      -0.886481321, -0.839826763, -0.728091336, 0.49999997, 1.26241341e-4, 
      -0.993073786, -0.978064260, -0.960782612, -0.940437623, -0.915494656, 
      -0.882963365, -0.835047333, -0.721337200, 0.50999997, 2.10794878e-4, 
      -0.992838492, -0.977318654, -0.959468181, -0.938462014, -0.912737520, 
      -0.879224965, -0.829935369, -0.713333747, 0.51999997, 3.45817915e-4, 
      -0.992591843, -0.976539652, -0.958093140, -0.936397059, -0.909858041, 
      -0.875326526, -0.824613978, -0.705030646, 0.52999997, 5.60532614e-4, 
      -0.992319469, -0.975817196, -0.957055683, -0.934791975, -0.907392369, 
      -0.871780607, -0.819565471, -0.696851926, 0.53999997, 8.88391765e-4, 
      -0.992052401, -0.974973040, -0.955547371, -0.932508378, -0.904232524, 
      -0.867537457, -0.813840440, -0.688250171, 0.54999997, 1.38993636e-3, 
      -0.9917447, -0.973996522 };
    std::vector<double> correctScr1 { -9.65073907e-2, 6.34362317e-2, 
      0.198218920, 0.321905500, 0.446191795, 0.611654767, 1.46816880, 
      7.58905843e-3, -0.690866704, -0.336041024, -0.125295375, 3.48547143e-2, 
      0.170556112, 0.295635865, 0.422151677, 0.591969316, 1.47607500, 
      5.53351154e-3, -0.708029672, -0.362942918, -0.15347845, 6.74025692e-3, 
      0.143235544, 0.269608671, 0.398248234, 0.572276831, 1.4839813, 
      4.03325561e-3, -0.724221062, -0.388954159, -0.181043531, -2.08965774e-2, 
      0.116268309, 0.243835529, 0.374493207, 0.552590379, 1.49188750, 
      2.93865753e-3, -0.739481356, -0.414069011, -0.207973379, -4.80404098e-2, 
      8.96710091e-2, 0.218334239, 0.350905969, 0.532945243, 1.50770000, 
      1.55984860e-3, -0.767365911, -0.463339992, -0.261190195, -0.101738519, 
      3.69347172e-2, 0.167656009, 0.303842560, 0.493293268, 1.5187688, 
      9.99126783e-4, -0.784947455, -0.494138472, -0.295723477, -0.137304217, 
      1.53802099e-3, 0.133319079, 0.271682035, 0.465976866, 1.5298375, 
      6.39972194e-4, -0.802644055, -0.524667727, -0.329841076, -0.172455091, 
      -3.34959209e-2, 9.92878620e-2, 0.239723580, 0.438693275, 1.54090630, 
      4.07902468e-4, -0.81757662, -0.552952735, -0.362850573, -0.206957298, 
      -6.64008903e-2, 6.73070572e-2, 0.209200198, 0.412416799, 1.55197500, 
      2.60588240e-4, -0.83078535, -0.578601545, -0.393118815, -0.239078162, 
      -9.92374141e-2, 3.48946010e-2, 0.17840620100, 0.38612063200, 1.563043800, 
      1.65998517e-4, -0.843136275, -0.603297476, -0.422800217 };
    std::vector<double> correctScr2 { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.6968, 
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.2028, 0.0, 0.0, 0.0, 0.0, 
      0.0, 0.0, 0.0, 0.0, 0.0, 3.7088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
      0.0, 4.2148, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.7208, 0.0, 
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.2268, 0.0, 0.0, 0.0, 0.0, 0.0, 
      0.0, 0.0, 0.0, 0.0, 5.7328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
      6.2388, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.7448, 0.0, 0.0, 
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2508, 0.0, 0.0, 0.0, 0.0 };
    std::vector<double> correctXsi { 78.4941480, 58.9107862, 49.7668683, 
      42.1262700, 35.3271576, 29.9466141, 25.1672092, 22.5097416, 20.0761627, 
      18.0532405, 16.1717158, 15.0215136, 13.9522246, 12.8590731, 11.8630813, 
      10.9158257, 10.0675041, 9.49478778, 8.96066210, 8.34406854, 7.79738841, 
      7.35233485, 7.09049622, 6.85582972, 6.61679130, 6.38558314, 6.16690866, 
      5.99412388, 5.87381557, 5.76381404, 5.65812920, 5.56215719, 5.46571351, 
      5.38067494, 5.33001068, 5.28008148, 5.24726814, 5.21176565, 5.18025867, 
      5.18404669, 5.16203839, 5.14150595, 5.11628619, 5.08154300, 5.03560619, 
      5.02757389, 5.01384772, 4.99969405, 4.97651071, 4.95769265, 4.94220510, 
      4.92048548, 4.91510160, 4.89735306, 4.88801536, 4.87871041, 4.87250271, 
      4.86940392, 4.86206689, 4.85806103, 4.85318976, 4.84611692, 4.83960006, 
      4.81103563, 4.80610063, 4.80144884, 4.79981585, 4.79735438, 4.79089560, 
      4.79739115, 4.79469846, 4.78503046, 4.77968069, 4.77560423, 4.77386631, 
      4.76816121, 4.76419399, 4.76597801, 4.76538910, 4.76347816, 4.75976915, 
      4.75834621, 4.75655845, 4.76105709, 4.75789923, 4.75232770, 4.75353550, 
      4.74365164, 4.74182716, 4.74157888, 4.73946821, 4.74945520, 4.74341907, 
      4.74250652, 0.0 };


    for ( size_t i = 0; i < correctScr.size(); ++i ){
      REQUIRE( correctScr[i] == Approx(scr[i]).epsilon(1e-6) );
    }

    for ( size_t i = 0; i < correctScr1.size(); ++i ){
      REQUIRE( correctScr1[i] == Approx(scr[i+500]).epsilon(1e-6) );
    }

    for ( size_t i = 0; i < correctScr2.size(); ++i ){
      REQUIRE( correctScr2[i] == Approx(scr[i+700]).epsilon(1e-6) );
    }

    REQUIRE( 7.9948178 == Approx(scr[966]).epsilon(1e-6) );
    for ( size_t i = 967; i < scr.size(); ++i ){
      REQUIRE( 0.0 == Approx(scr[i]).epsilon(1e-6) );
    }

    for ( size_t i = 0; i < xsi.size(); ++i ){
      REQUIRE( correctXsi[i] == Approx(xsi[i]).epsilon(1e-6) );
    }


  } // GIVEN

} // TEST CASE
