#include "catch.hpp"
#include "calcem/calcem_util/sigu.h"


TEST_CASE( "sigu" ){
  GIVEN( "inputs" ){
    int lasym = 0, lat = 1, iinc = 2, nemax = 5000;

    std::cout << std::setprecision(10) ;
    double e = 1.0e-6, tev = 1.5e-4, az = 11.9,
      tevz = 2.2e-4, az2 = 0.0, teff2 = 0.0, cliq = 1.0, sb = 5.53, sb2 = 0.0,
      teff = 6.14e-2, tolin = 5e-2, u = 0.1;

    std::vector<double> alpha(40),beta(80),s(2*nemax,0.0);
    for ( int i = 0; i < 40;     ++i ){ alpha[i] = 0.1*i + 0.001; }
    for ( int i = 0; i < 80;     ++i ){ beta[i]  = 0.2*i + 0.025; }
    for ( int i = 0; i < 80;     ++i ){ beta[i]  = 10.5*i + 10.5; }
    for ( int i = 0; i < 100000; ++i ){ s[i]     = 0.01  + i%12; }

    std::vector<std::vector<double>> sab(alpha.size(), std::vector<double>(beta.size(),0));
    for ( size_t i = 0; i < alpha.size(); ++i ){
      for ( size_t j = 0; j < beta.size(); ++j ){
        sab[i][j] = 0.2*i + 0.4*j + (i+j)%5;
      } 
    } 


    sigu( nemax, e, u, tev, alpha, beta, sab, s, tolin, az, tevz, iinc, 
        lat, lasym, /*az2, teff2,*/ cliq, sb, sb2, teff );




    //std::vector<double> correctS {  614757195474.47119, 431.0 };
    //std::vector<double> correctS { 1174.2958039475825, 52.0 };
    std::vector<double> correctS { 1174.2958039475825, 52.0, 0.0, 0.0, 
      4.5136720000004504e-6, 7.9667611490571083e-2, 6.7705080000006768e-6, 
      0.26639656534087930, 9.0273440000009007e-6, 0.60063893481001063, 
      1.1284180000001128e-5, 1.1103909115305708, 1.3541016000001354e-5, 
      1.8205145865559995, 1.8054688000001801e-5, 3.9314239506017423, 
      2.2568360000002256e-5, 7.0993596806809567, 2.7082032000002707e-5, 
      11.475208745752839, 3.6109375000003607e-5, 24.407710114179125, 
      4.5136719000004509e-5, 43.784505818912315, 5.4164063000005412e-5, 
      70.597927221726295, 7.2218750000007214e-5, 150.34013168115280, 
      9.0273440000009024e-5, 271.10064054643499, 1.0832813000001082e-4, 
      440.27923914479925, 1.4443750000001440e-4, 954.00981953385872, 
      1.8054688000001805e-4, 1753.9176778669741, 2.1665625000002165e-4, 
      2906.9586344575760, 2.5276563000002525e-4, 4485.8893425961742, 
      2.8887500000002880e-4, 6570.2376469395012, 3.6109375000003608e-4, 
      12612.409686545541, 4.3331250000004331e-4, 21838.152040725177, 
      5.0553125000005054e-4, 35216.614346757058, 5.7775000000005760e-4, 
      53912.381167930333, 6.4996875000006488e-4, 79320.398069799776, 
      7.2218750000007216e-4, 113105.75049430141, 7.9440625000007934e-4, 
      165570.56515999799, 8.1246094000008112e-4, 300628.44634561130, 
      8.3051563000008290e-4, 533434.13269137184, 8.4857032000008469e-4, 
      925685.28788165934, 8.6662500000008662e-4, 1554564.8833292203, 
      1.0110625000001011e-3, 2007121.9100631122, 1.0471719000001048e-3, 
      2135882.3178081256, 1.0832813000001083e-3, 1333745.1166183802, 
      1.1193907000001120e-3, 712821.83140361239, 1.1555000000001154e-3, 
      380761.33622921346, 1.1916094000001191e-3, 203283.11663873371, 
      1.2277188000001228e-3, 108477.65602143780, 1.2638282000001263e-3, 
      41894.794192799709, 1.2818829000001283e-3, 23007.037092165556, 
      1.2999375000001300e-3, 12808.549161717869, 1.3179922000001317e-3, 
      7255.3170901038202, 1.3360469000001337e-3, 7678.2022049014104, 
      1.3721563000001372e-3, 8587.6201896354232, 1.4443750000001445e-3, 
      10687.307726530495, 1.5888125000001589e-3, 16252.332955483278, 
      1.7332500000001732e-3, 24205.012524589642, 1.8776875000001876e-3, 
      35423.425091770419, 2.0221250000002021e-3, 51074.152088908559 };
   for ( size_t i = 0; i < correctS.size(); ++i ){ 
     REQUIRE( correctS[i] == Approx(s[i]).epsilon(1e-5) );
   }


    /*
   */

    REQUIRE( true );
  } // GIVEN
} // TEST CASE

