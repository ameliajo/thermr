#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include "coh/coh_util/sigcoh.h"


TEST_CASE( "sigcoh" ){
  int k = 0;
  std::vector<double> p(6);
  GIVEN( "input energy is 0" ){
    std::vector<double> wrk_1_100 (100), s (6, 0.0), fl {};
    double e = 0, enext = 0, temp = 296, emax;
    int nl = 1, lat = 1, natom = 1;
    std::vector<double> wrk(10000,0.0);
    int nbragg;


    std::vector<double> odd_1_500 { 8.794479E15, 8.794479E15, 3.517791E16, 3.517791E16, 7.915031E16, 7.915031E16, 8.717302E16, 8.717302E16, 8.717302E16, 9.596750E16, 9.596750E16, 9.596750E16, 1.223509E17, 1.223509E17, 1.223509E17, 1.407116E17, 1.407116E17, 1.663233E17, 1.663233E17, 1.663233E17, 2.198619E17, 2.198619E17, 2.278846E17, 2.278846E17, 2.278846E17, 2.615190E17, 2.615190E17, 2.703135E17, 2.703135E17, 2.966969E17, 2.966969E17, 3.070350E17, 3.070350E17, 3.070350E17, 3.166012E17, 3.166012E17, 3.406693E17, 3.406693E17, 3.486920E17, 3.486920E17, 3.486920E17, 3.574865E17, 3.574865E17, 3.574865E17, 3.838700E17, 3.838700E17, 3.838700E17, 4.022307E17, 4.022307E17, 4.037742E17, 4.037742E17, 4.037742E17, 4.278424E17, 4.278424E17, 4.278424E17, 4.309294E17, 4.309294E17, 4.813810E17, 4.813810E17, 4.894037E17, 4.894037E17, 4.894037E17, 5.181025E17, 5.181025E17, 5.181025E17, 5.628466E17, 5.628466E17, 5.685540E17, 5.685540E17, 5.685540E17, 5.781203E17, 5.781203E17, 6.102111E17, 6.102111E17, 6.102111E17, 6.190056E17, 6.190056E17, 6.190056E17, 6.453890E17, 6.453890E17, 6.453890E17, 6.500196E17, 6.500196E17, 6.500196E17, 6.652933E17, 6.652933E17, 6.652933E17, 6.893614E17, 6.893614E17, 6.893614E17, 6.924485E17, 6.924485E17, 7.123528E17, 7.123528E17, 7.509228E17, 7.509228E17, 7.509228E17, 7.796215E17, 7.796215E17, 7.796215E17, 7.845572E17, 7.845572E17, 7.845572E17, 7.933516E17, 7.933516E17, 7.933516E17, 7.995258E17, 7.995258E17, 7.995258E17, 8.197351E17, 8.197351E17, 8.197351E17, 8.243657E17, 8.243657E17, 8.300731E17, 8.300731E17, 8.300731E17, 8.637075E17, 8.637075E17, 8.637075E17, 8.794479E17, 8.794479E17, 9.115387E17, 9.115387E17, 9.115387E17, 9.252688E17, 9.252688E17, 9.252688E17, 9.268124E17, 9.268124E17, 9.268124E17, 9.666209E17, 1.041140E18, 1.061044E18, 1.064131E18, 1.125226E18, 1.133249E18, 1.140967E18, 1.151305E18, 1.212399E18, 1.215486E18, 1.228140E18, 1.266405E18, 1.347403E18, 1.353578E18, 1.429946E18, 1.486267E18, 1.564178E18, 1.573440E18, 1.656287E18, 1.664005E18, 1.723717E18, 1.810890E18, 1.909783E18, 1.957615E18, 1.978757E18, 2.087216E18, 2.096478E18, 2.107121E18, 2.214503E18, 2.251386E18, 2.368640E18, 2.393480E18, 2.399187E18, 2.458900E18, 2.508275E18, 2.541604E18, 2.670272E18, 2.702363E18, 2.710081E18, 2.742172E18, 2.763315E18, 2.849411E18, 3.003691E18, 3.018965E18, 3.035943E18, 3.174807E18, 3.358090E18, 3.373526E18, 3.517791E18, 3.701075E18, 3.866483E18, 3.878365E18, 4.077389E18, 4.082020E18, 4.128002E18, 4.139884E18, 4.158083E18, 4.227057E18, 4.256527E18, 4.488576E18, 4.491340E18, 4.569575E18, 4.605220E18, 4.652279E18, 4.886014E18, 4.912560E18, 5.000971E18, 5.065620E18, 5.326348E18, 5.327139E18, 5.335610E18, 5.354132E18, 5.414312E18, 5.496549E18, 5.785528E18, 5.798935E18, 5.845241E18, 5.945068E18, 6.249159E18, 6.250236E18, 6.281106E18, 6.293760E18, 6.411175E18, 6.743193E18, 6.759867E18, 6.894871E18, 7.243078E18, 7.243563E18, 7.396157E18, 7.766116E18, 7.767983E18, 7.773367E18, 7.789269E18, 7.790508E18, 7.805943E18, 7.915031E18, 8.326953E18, 8.327419E18, 8.428484E18, 8.451494E18, 8.876536E18, 8.886712E18, 8.896297E18, 8.905235E18, 8.923757E18, 9.005546E18, 9.457438E18, 9.549404E18, 9.575482E18, 9.577187E18, 1.006147E19, 1.009435E19, 1.016641E19, 1.068109E19, 1.068265E19, 1.077323E19, 1.131477E19, 1.131754E19, 1.139764E19, 1.197357E19, 1.197481E19, 1.199024E19, 1.203964E19, 1.264985E19, 1.269362E19, 1.269922E19, 1.335105E19, 1.336958E19, 1.337640E19, 1.405215E19, 1.406572E19, 1.407116E19, 1.478351E19, 1.554352E19, 1.555572E19, 1.556807E19, 1.560063E19, 1.626099E19, 1.708591E19, 1.711328E19, 1.780882E19, 1.870183E19, 1.870598E19, 1.880963E19, 1.888372E19, 1.895547E19, 1.895781E19, 1.942700E19, 2.040281E19, 2.042585E19, 2.043479E19, 2.043741E19, 2.053247E19, 2.061117E19, 2.111554E19, 2.217405E19, 2.217825E19, 2.220710E19, 2.224771E19, 2.231629E19, 2.233489E19, 2.287444E19, 2.316462E19, 4.24789E-86, 1.39804E-76, 4.58551E-72, 8.98210E-67, 6.01357E-154, 1.96946E-62, 1.39804E-76, 1.50483E-153, 2.17664E-76, 6.03978E-154, 1.50425E-153, 1.39804E-76, 2.32497E-57, 4.65698E-33, 1.35654E-153, 2.16566E-57, 1.82918E-76, 4.96688E-91, 1.57609E-52, 6.00601E-67, 1.15643E-100, 1.30472E-76, 1.39872E-76, 3.44359E-86, 1.48539E-76, 1.39804E-76, 0.000000000, 0.000000000, 4.58550E-72, 1.08247E-71, 1.39804E-76, 4.58551E-72, 2.09129E-76, 1.57883E-153, 1.96804E-62, 1.39804E-76, 1.57941E-153, 4.18581E-62, 1.41929E-52, 1.28196E-153, 1.39972E-76, 1.52369E-52, 1.19877E-71, 1.15643E-100, 9.16885E-72, 2.08826E-76, 4.96687E-91, 1.57711E-52, 1.39804E-76, 1.65747E-76, 5.60012E-67, 1.39838E-76, 4.24790E-86, 1.39804E-76, 4.18296E-62, 3.64454E-86, 1.39905E-76, 1.29101E-57, 1.39804E-76, 1.19854E-71, 1.94953E-62, 5.05119E-38, 1.57883E-153, 1.40073E-76, 1.52369E-52, 2.44224E-154, 3.88885E-33, 1.41929E-52, 1.74282E-76, 4.96688E-91, 1.56059E-259, 1.42516E-71, 1.15643E-100, 1.30438E-76, 1.39805E-76, 2.88755E-57, 6.77100E-43, 1.39804E-76, 4.44898E-86, 1.65915E-76, 2.99063E-67, 3.84575E-86, 1.39804E-76, 2.38151E-38, 1.74619E-76, 6.01357E-154, 1.96993E-62, 1.39804E-76, 1.57941E-153, 2.21378E-52, 6.03978E-154, 1.65341E-153, 1.39837E-76, 1.52369E-52, 3.21493E-57, 1.35654E-153, 9.30147E-48, 1.74281E-76, 4.96684E-91, 2.40554E-57, 6.00601E-67, 1.15643E-100, 6.76925E-43, 1.39805E-76, 3.84575E-86, 1.48539E-76, 1.39804E-76, 3.64467E-86, 1.39905E-76, 1.97041E-62, 1.08247E-71, 1.39804E-76, 3.00588E-67, 1.39838E-76, 1.65341E-153, 1.96804E-62, 1.39804E-76, 1.57941E-153, 2.09062E-76, 9.30147E-48, 1.28196E-153, 1.40006E-76, 1.52369E-52, 1.25536E-71, 1.15643E-100, 9.16885E-72, 1.57009E-76, 4.96684E-91, 1.03317E-47, 1.39804E-76, 1.65747E-76, 4.43802E-38, 1.39805E-76, 3.84575E-86, 1.39804E-76, 4.18296E-62, 4.24777E-86, 1.40006E-76, 1.97041E-62, 1.39805E-76, 1.19854E-71, 5.48747E-48, 2.09130E-76, 1.65341E-153, 1.39939E-76, 1.52369E-52, 2.44442E-154, 2.10978E-52, 9.30147E-48, 1.39737E-76, 4.96684E-91, 2.04870E-259, 2.10693E-52, 1.15643E-100, 1.57751E-52, 1.39804E-76, 1.73807E-76, 3.67057E-62, 1.39804E-76, 3.44359E-86, 1.40108E-76, 1.28446E-57, 3.84575E-86, 1.39804E-76, 4.58662E-72, 1.83120E-76, 6.01357E-154, 1.97088E-62, 1.39973E-76, 1.57941E-153, 5.05115E-38, 6.03978E-154, 1.72800E-153, 1.39939E-76, 1.52369E-52, 4.01147E-57, 1.35654E-153, 6.09581E-43, 2.21134E-52, 4.96684E-91, 4.43687E-38, 6.00601E-67, 1.15643E-100, 6.76925E-43, 1.39804E-76, 3.64468E-86, 1.48539E-76, 1.39804E-76, 3.44359E-86, 1.39906E-76, 3.00733E-67, 1.08247E-71, 1.39804E-76, 3.00588E-67, 1.74349E-76, 6.01347E-154, 1.96804E-62, 6.01347E-154, 6.01347E-154, 6.01347E-154, 6.01347E-154, 1.28196E-153, 6.01347E-154, 6.01347E-154, 6.01347E-154, 6.01347E-154 }; 

    wrk_1_100 ={ 8.7944793e15, 0.00000000, 8.794479e15, 0.000000000, 3.517791e16, 
    2.098463e-8, 3.517791e16, 2.098463e-8, 7.915031e16, 0.000000000, 7.915031e16, 
    0.000000000, 8.717302e16, 1.626950e-9, 8.717302e16, 1.626950e-9, 8.717302e16, 
    1.626950e-9, 9.596750e16, 9.266133e-9, 9.596750e16, 9.266133e-9, 9.596750e16, 
    9.266133e-9, 1.223509e17, 2.702514e-9, 1.223509e17, 2.702514e-9, 1.223509e17, 
    2.702514e-9, 1.407116e17, 9.995415e-9, 1.407116e17, 9.995415e-9, 1.663233e17, 
    6.814547e-9, 1.663233e17, 6.814547e-9, 1.663233e17, 6.814547e-9, 2.198619e17, 
    0.000000000, 2.198619e17, 0.000000000, 2.278846e17, 1.886442e-9, 2.278846e17, 
    1.886442e-9, 2.278846e17, 1.886442e-9, 2.615190e17, 1.387152e-8, 2.615190e17, 
    2.774304e-8, 2.703135e17, 0.000000000, 2.703135e17, 1.41867e-37, 2.966969e17, 
    2.562864e-8, 2.966969e17, 5.125729e-8, 3.070350e17, 4.701382e-9, 3.070350e17, 
    4.701382e-9, 3.070350e17, 4.701382e-9, 3.166012e17, 6.145991e-9, 3.166012e17, 
    6.145991e-9, 3.406693e17, 0.000000000, 3.406693e17, 1.22350e-37, 3.486920e17, 
    7.21323e-10, 3.486920e17, 7.21323e-10, 3.486920e17, 7.21323e-10, 3.574865e17, 
    4.257127e-9, 3.574865e17, 4.257127e-9, 3.574865e17, 4.257127e-9, 3.838700e17, 
    1.352899e-9, 3.838700e17, 1.352899e-9, 3.838700e17, 1.352899e-9, 4.022307e17, 
    4.193764e-8, 4.022307e17, 2.096882e-8, 4.037742e17, 1.307116e-9 }; 
  

    std::vector<double> wrk_101_200;
    wrk_101_200 = { 4.037742E17, 1.307116E-9, 4.037742E17, 1.307116E-9, 
    4.278424E17, 3.767537E-9, 4.278424E17, 3.767537E-9, 4.278424E17, 3.767537E-9, 
    4.309294E17, 0.000000000, 4.309294E17, 0.000000000, 4.813810E17, 0.000000000, 
    4.813810E17, 3.97004E-34, 4.894037E17, 1.141440E-9, 4.894037E17, 1.141440E-9, 
    4.894037E17, 1.141440E-9, 5.181025E17, 3.284509E-9, 5.181025E17, 3.284509E-9, 
    5.181025E17, 3.284509E-9, 5.628466E17, 4.116125E-9, 5.628466E17, 4.116125E-9, 
    5.685540E17, 3.063511E-9, 5.685540E17, 3.063511E-9, 5.685540E17, 3.063511E-9, 
    5.781203E17, 1.613188E-8, 5.781203E17, 3.226376E-8, 6.102111E17, 9.67000E-10, 
    6.102111E17, 9.67000E-10, 6.102111E17, 9.67000E-10, 6.190056E17, 5.737398E-9, 
    6.190056E17, 5.737398E-9, 6.190056E17, 5.737398E-9, 6.453890E17, 1.850387E-9, 
    6.453890E17, 1.850387E-9, 6.453890E17, 1.850387E-9, 6.500196E17, 9.19931E-10, 
    6.500196E17, 9.19931E-10, 6.500196E17, 9.19931E-10, 6.652933E17, 9.02948E-10, 
    6.652933E17, 9.02948E-10, 6.652933E17, 9.02948E-10, 6.893614E17, 5.263707E-9, 
    6.893614E17, 5.263707E-9, 6.893614E17, 5.263707E-9, 6.924485E17, 3.00403E-34, 
    6.924485E17, 0.000000000, 7.123528E17, 0.000000000, 7.123528E17, 0.000000000, 
    7.509228E17, 1.634200E-9, 7.509228E17, 1.634200E-9, 7.509228E17, 1.634200E-9, 
    7.796215E17, 2.374227E-9, 7.796215E17, 2.374227E-9, 7.796215E17, 2.374227E-9};

    std::vector<double> wrk_301_400;
    wrk_301_400 = { 1.664005E18, 3.55223E-08, 1.723717E18, 1.08708E-08, 
    1.810890E18, 6.48701E-08, 1.909783E18, 1.42732E-08, 1.957615E18, 3.02210E-08, 
    1.978757E18, 3.16336E-08, 2.087216E18, 4.77266E-09, 2.096478E18, 4.74187E-09, 
    2.107121E18, 3.37862E-08, 2.214503E18, 2.18044E-09, 2.251386E18, 2.56310E-08, 
    2.368640E18, 1.42925E-08, 2.393480E18, 2.06481E-08, 2.399187E18, 7.56813E-09, 
    2.458900E18, 1.33323E-08, 2.508275E18, 2.38384E-08, 2.541604E18, 1.55647E-08, 
    2.670272E18, 8.60645E-09, 2.702363E18, 5.26869E-10, 2.710081E18, 2.40743E-08, 
    2.742172E18, 1.53062E-09, 2.763315E18, 1.20400E-08, 2.849411E18, 2.17052E-08, 
    3.003691E18, 8.70192E-10, 3.018965E18, 8.61914E-10, 3.035943E18, 4.87628E-08, 
    3.174807E18, 2.73442E-08, 3.358090E18, 6.95854E-10, 3.373526E18, 3.07499E-08, 
    3.517791E18, 3.92303E-08, 3.701075E18, 2.63412E-08, 3.866483E18, 2.57924E-10, 
    3.878365E18, 2.42334E-08, 4.077389E18, 3.64728E-09, 4.082020E18, 7.72361E-09, 
    4.128002E18, 4.42686E-10, 4.139884E18, 2.51825E-35, 4.158083E18, 1.00049E-08, 
    4.227057E18, 8.33930E-10, 4.256527E18, 2.72397E-08, 4.488576E18, 1.07905E-09, 
    4.491340E18, 1.23403E-08, 4.569575E18, 3.71767E-09, 4.605220E18, 1.83415E-09, 
    4.652279E18, 2.38537E-08, 4.886014E18, 8.34468E-34, 4.912560E18, 5.75221E-09, 
    5.000971E18, 1.00928E-08, 5.065620E18, 2.10681E-08, 5.326348E18, 6.73928E-10};



    std::vector<double> wrk_401_500;
    wrk_401_500 = { 5.327139E18, 1.79635E-09, 5.335610E18, 4.77775E-09, 
    5.354132E18, 3.14648E-09, 5.414312E18, 4.04778E-09, 5.496549E18, 1.93835E-08, 
    5.785528E18, 5.23574E-10, 5.798935E18, 3.27535E-09, 5.845241E18, 9.00499E-09, 
    5.945068E18, 1.47686E-08, 6.249159E18, 2.17105E-09, 6.250236E18, 1.14758E-09, 
    6.281106E18, 5.97140E-10, 6.293760E18, 4.33414E-09, 6.411175E18, 1.20139E-08, 
    6.743193E18, 1.75607E-09, 6.759867E18, 2.88790E-09, 6.894871E18, 1.46760E-08, 
    7.243078E18, 7.98099E-11, 7.243563E18, 4.45305E-09, 7.396157E18, 9.40212E-09, 
    7.766116E18, 6.06022E-11, 7.767983E18, 6.05429E-11, 7.773367E18, 9.64776E-10, 
    7.789269E18, 8.98070E-11, 7.790508E18, 4.75194E-10, 7.805943E18, 2.72496E-09, 
    7.915031E18, 8.26345E-09, 8.326953E18, 1.59554E-34, 8.327419E18, 2.78215E-09, 
    8.428484E18, 3.62467E-10, 8.451494E18, 6.43188E-09, 8.876536E18, 3.40224E-11, 
    8.886712E18, 1.01532E-10, 8.896297E18, 5.00307E-35, 8.905235E18, 1.00567E-10, 
    8.923757E18, 1.27815E-09, 9.005546E18, 5.89880E-09, 9.457438E18, 3.43224E-10, 
    9.549404E18, 6.19969E-10, 9.575482E18, 3.56326E-11, 9.577187E18, 5.32238E-09, 
    1.006147E19, 9.24668E-11, 1.009435E19, 3.85898E-10, 1.016641E19, 3.98730E-09, 
    1.068109E19, 1.08237E-10, 1.068265E19, 4.33485E-10, 1.077323E19, 3.04279E-09, 
    1.131477E19, 1.57170E-10, 1.131754E19, 3.83569E-10, 1.139764E19, 2.37407E-09};

    std::vector<double> wrk_500_600 (100);
    wrk_500_600={2.37407e-09, 1.197357e19, 7.05389e-12, 1.197481e19, 1.10519e-38, 
    1.199024e19, 2.08084e-10, 1.203964e19, 1.75703e-09, 1.264985e19, 6.49758e-11, 
    1.269362e19, 3.93617e-11, 1.269922e19, 1.53321e-09, 1.335105e19, 1.06384e-11, 
    1.336958e19, 5.27048e-12, 1.337640e19, 1.16342e-09, 1.405215e19, 4.00668e-11, 
    1.406572e19, 1.24370e-12, 1.407116e19, 7.84609e-10, 1.478351e19, 6.58829e-10, 
    1.554352e19, 9.59600e-12, 1.555572e19, 2.98028e-12, 1.556807e19, 1.05992e-11, 
    1.560063e19, 3.72276e-10, 1.626099e19, 3.57909e-10, 1.708591e19, 2.41781e-11, 
    1.711328e19, 2.17720e-10, 1.780882e19, 1.64308e-10, 1.870183e19, 7.68023e-13, 
    1.870598e19, 2.56775e-11, 1.880963e19, 9.86659e-12, 1.888372e19, 7.92667e-12, 
    1.895547e19, 5.65656e-13, 1.895781e19, 5.90950e-11, 1.942700e19, 9.37657e-11, 
    2.040281e19, 6.72804e-13, 2.042585e19, 2.10614e-12, 2.043479e19, 1.10410e-13, 
    2.043741e19, 1.12496e-11, 2.053247e19, 2.99440e-12, 2.061117e19, 3.19944e-11, 
    2.111554e19, 4.63431e-11, 2.217405e19, 8.92606e-41, 2.217825e19, 9.49683e-13, 
    2.220710e19, 3.70005e-13, 2.224771e19, 1.50062e-12, 2.231629e19, 3.43035e-13, 
    2.233489e19, 1.64378e-11, 2.287444e19, 1.87596e-11, 2.403245e19, 1.55807e-13, 
    2.404001e19, 5.28609e-13, 2.408712e19, 1.12778e-12, 2.412896e19, 7.57310e-12, 
    2.470369e19, 9.76622e-12, 2.594473e19, 7.78168e-15, 2.595959e19, 1.25947e-13 };
 
  
    std::vector<double> wrk_800_870( 70 );
    wrk_800_870={6.60118e-23, 8.104992e19, 1.07395e-22, 8.510639e19, 1.98695e-26, 
    8.510759e19, 1.05911e-25, 8.510833e19, 3.96523e-26, 8.511524e19, 2.63813e-26, 
    8.511695e19, 4.75228e-25, 8.519036e19, 2.35170e-25, 8.524673e19, 6.74868e-24, 
    8.619469e19, 1.04449e-23, 9.050527e19, 1.61030e-27, 9.050532e19, 8.92522e-26, 
    9.058577e19, 1.10744e-26, 9.060354e19, 1.07133e-25, 9.079569e19, 1.76472e-25, 
    9.108302e19, 1.06353e-26, 9.110725e19, 2.06843e-25, 9.149776e19, 9.10921e-25, 
    9.607443e19, 1.20786e-28, 9.607611e19, 2.81276e-28, 9.608563e19, 4.28299e-27, 
    9.614388e19, 7.05293e-27, 9.634850e19, 3.18871e-27, 9.642828e19, 1.53334e-28, 
    9.643885e19, 3.13525e-27, 9.651585e19, 1.97593e-26, 9.695913e19, 7.59005e-26, 
    1.018090e20, 8.40362e-30, 1.018096e20, 4.19525e-30, 1.018212e20, 8.35623e-30, 
    1.018262e20, 2.05886e-28, 1.018578e20, 3.26765e-28, 1.019529e20, 6.16437e-28, 
    1.020827e20, 1.54168e-27, 1.025788e20, 5.06820e-27, 1.061711e20, 5.06820e-27};

   
    WHEN( "smal value for emax" ){
      emax = 0.05;
      THEN ( "loops ranges are small (~4)" ){
       nbragg = sigcoh( e, enext, s, wrk, nl, lat, temp, emax, natom, fl, p, k );
        REQUIRE( nbragg == 132 );


        for ( size_t i = 0; i < 100; ++i ){ 
          REQUIRE( wrk_1_100[i] == Approx( wrk[i] ).epsilon(1e-6) );
        }
  

        for ( size_t i = 100; i < 200; ++i ){ 
          REQUIRE( wrk_101_200[i-100] == Approx( wrk[i] ).epsilon(1e-6) );
        }
 



        std::vector<double> wrk_200_265( 65);
        wrk_200_265 = { 2.3742272e-9, 7.8455721e17, 6.2970216e-9, 7.8455721e17, 
          6.2970216e-9, 7.8455721e17, 6.2970216e-9, 7.9335169e17, 3.255566e-38, 
          7.9335169e17, 3.255566e-38, 7.9335169e17, 1.302226e-37, 7.9952584e17, 
          2.3231321e-9, 7.9952584e17, 2.3231321e-9, 7.9952584e17, 2.3231321e-9, 
          8.1973513e17, 1.2123197e-8, 8.1973513e17, 1.2123197e-8, 8.1973513e17, 
          1.2123197e-8, 8.2436574e17, 2.4126785e-8, 8.2436574e17, 1.2063392e-8, 
          8.3007315e17, 4.4963798e-9, 8.3007315e17, 4.4963798e-9, 8.3007315e17, 
          4.4963798e-9, 8.6370753e17, 3.020849e-38, 8.6370753e17, 3.020849e-38, 
          8.6370753e17, 1.208339e-37, 8.7944793e17, 2.8468646e-9, 8.7944793e17, 
          2.8468646e-9, 9.1153877e17, 6.888381e-10, 9.1153877e17, 6.888381e-10, 
          9.1153877e17, 6.888381e-10, 9.2526888e17, 1.0870497e-8, 9.2526888e17, 
          1.0870497e-8, 9.2526888e17, 1.0870497e-8, 9.2681242e17, 1.3567171e-9, 
          9.2681242e17, 1.3567171e-9, 9.2681242e17, 1.3567171e-9, 9.6519234e17, 
          1.3567171e-9, 0.00000000000 }; 
        for ( int i = 0; i < 65; ++i ){ 
          REQUIRE( wrk_200_265[i] == Approx( wrk[199+i] ).epsilon(1e-6) );
        }
 
        for ( size_t  i = 264; i < wrk.size(); ++i ){ 
          REQUIRE( 0.0 == Approx( wrk[i] ).epsilon(1e-6) );
        }
       /*
        */
      } // THEN 
    } // WHEN

  
    WHEN( "Medium value for emax" ){
      emax = 1.2;
      THEN ( "loops ranges are moderate (~17)" ){
       auto nbragg = sigcoh( e, enext, s, wrk, nl, lat, temp, emax, natom, fl, p, k );
        REQUIRE( nbragg == 294 );


        for ( int i = 0; i < nbragg; ++i ){
          REQUIRE( odd_1_500[i] == Approx( wrk[2*i] ).epsilon(1e-6) );
        } 



        for ( size_t i = 0; i < 100; ++i ){ 
          REQUIRE( wrk_1_100[i] == Approx( wrk[i] ).epsilon(1e-6) );
        }

        for ( size_t i = 100; i < 200; ++i ){ 
          REQUIRE( wrk_101_200[i-100] == Approx( wrk[i] ).epsilon(1e-6) );
        }



        for ( size_t i = 300; i < 400; ++i ){ 
          REQUIRE( wrk_301_400[i-300] == Approx( wrk[i] ).epsilon(1e-6) );
        }
  
        for ( size_t i = 400; i < 500; ++i ){ 
          REQUIRE( wrk_401_500[i-400] == Approx( wrk[i] ).epsilon(1e-6) );
        }



 
        std::vector<double> wrk_500_600 (100);
        wrk_500_600 = { 2.374077e-09, 1.1973575e19, 7.053895e-12, 1.1974813e19, 
          1.105192e-38, 1.1990248e19, 2.080840e-10, 1.2039642e19, 1.757036e-09, 
          1.2649853e19, 6.497581e-11, 1.2693627e19, 3.936175e-11, 1.2699228e19, 
          1.533214e-09, 1.3351059e19, 1.063848e-11, 1.3369581e19, 5.270483e-12, 
          1.3376403e19, 1.163428e-09, 1.4052159e19, 4.006684e-11, 1.4065727e19, 
          1.243702e-12, 1.4071166e19, 7.846096e-10, 1.4783519e19, 6.588293e-10, 
          1.5543523e19, 9.596001e-12, 1.5555728e19, 2.980286e-12, 1.5568076e19, 
          1.059922e-11, 1.5600634e19, 3.722768e-10, 1.6260992e19, 3.579090e-10, 
          1.7085912e19, 2.417811e-11, 1.7113284e19, 2.177208e-10, 1.7808820e19, 
          1.643088e-10, 1.8701836e19, 7.680230e-13, 1.8705982e19, 2.567755e-11, 
          1.8809630e19, 9.866590e-12, 1.8883720e19, 7.926673e-12, 1.8955476e19, 
          5.656563e-13, 1.8957810e19, 5.909501e-11, 1.9427004e19, 9.376579e-11, 
          2.0402813e19, 6.728049e-13, 2.0425859e19, 2.106142e-12, 2.0434797e19, 
          1.104108e-13, 2.0437417e19, 1.124968e-11, 2.0532470e19, 2.994409e-12, 
          2.0611172e19, 3.199448e-11, 2.1115544e19, 4.634311e-11, 2.2174057e19, 
          8.926069e-41, 2.2178258e19, 9.496831e-13, 2.2207100e19, 3.700054e-13, 
          2.2247717e19, 1.500625e-12, 2.2316294e19, 3.430352e-13, 2.2334890e19, 
          1.643782e-11, 2.2874440e19, 4.589983e-12, 2.3164615e19, 4.589983e-12, 
          0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 
          0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000, 
          0.0000000000, 0.0000000000 };
        for ( int i = 0; i < 100; ++i ){ 
          REQUIRE( wrk_500_600[i] == Approx( wrk[499+i] ).epsilon(1e-6) );
        }
        for ( size_t  i = 599; i < wrk.size(); ++i ){ 
          REQUIRE( 0.0 == Approx( wrk[i] ).epsilon(1e-6) );
        }
  
      } // THEN 
    } // WHEN
    WHEN( "large value for emax" ){
      emax = 5.5;
      THEN ( "loops ranges are large (~35)" ){
       auto nbragg = sigcoh( e, enext, s, wrk, nl, lat, temp, emax, natom, fl, p, k );
       REQUIRE( nbragg == 435 );
  

        for ( size_t i = 0; i < 100; ++i ){ 
          REQUIRE( wrk_1_100[i] == Approx( wrk[i] ).epsilon(1e-6) );
        }
        for ( size_t i = 100; i < 200; ++i ){ 
          REQUIRE( wrk_101_200[i-100] == Approx( wrk[i] ).epsilon(1e-6) );
        }

        for ( size_t i = 300; i < 400; ++i ){ 
          REQUIRE( wrk_301_400[i-300] == Approx( wrk[i] ).epsilon(1e-6) );
        }

        for ( size_t i = 400; i < 500; ++i ){ 
          REQUIRE( wrk_401_500[i-400] == Approx( wrk[i] ).epsilon(1e-6) );
        }


  
       for ( size_t i = 0; i < 100; ++i ){ 
          REQUIRE( wrk_500_600[i] == Approx( wrk[499+i] ).epsilon(1e-6) );
        }


        for ( int i = 0; i < 70; ++i ){ 
          REQUIRE( wrk_800_870[i] == Approx( wrk[799+i] ).epsilon(1e-6) );
        }

        for ( size_t  i = 869; i < wrk.size(); ++i ){ 
          REQUIRE( 0.0 == Approx( wrk[i] ).epsilon(1e-6) );
        }

  
      } // THEN 
    } // WHEN
  } // GIVEN

} // TEST CASE
