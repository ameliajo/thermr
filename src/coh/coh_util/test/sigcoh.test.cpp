#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include "coh/coh_util/sigcoh.h"


TEST_CASE( "sigcoh" ){
  int k = 0;
  std::vector<double> p(6);
  GIVEN( "input energy is 0" ){
    std::vector<double> s (6, 0.0), fl {};
    double e = 0, enext = 0, temp = 296, emax;
    int nl = 1, lat = 1, natom = 1;
    std::vector<double> vec1(5000,0.0), vec2(5000,0.0);
    int nbragg;


    std::vector<double> vec1_0_100, vec2_0_100;
    std::vector<double> vec1_100_200, vec2_100_200;
    std::vector<double> vec1_200_300, vec2_200_300;
    vec1_0_100 = { 8.7944793E15, 8.7944793E15, 3.5177917E16, 3.5177917E16, 7.9150314E16, 7.9150314E16, 8.7173024E16, 8.7173024E16, 8.7173024E16, 9.5967503E16, 9.5967503E16, 9.5967503E16, 1.2235094E17, 1.2235094E17, 1.2235094E17, 1.4071167E17, 1.4071167E17, 1.6632334E17, 1.6632334E17, 1.6632334E17, 2.1986198E17, 2.1986198E17, 2.2788469E17, 2.2788469E17, 2.2788469E17, 2.6151907E17, 2.6151907E17, 2.7031355E17, 2.7031355E17, 2.9669699E17, 2.9669699E17, 3.0703501E17, 3.0703501E17, 3.0703501E17, 3.1660126E17, 3.1660126E17, 3.4066939E17, 3.4066939E17, 3.4869210E17, 3.4869210E17, 3.4869210E17, 3.5748658E17, 3.5748658E17, 3.5748658E17, 3.8387001E17, 3.8387001E17, 3.8387001E17, 4.0223074E17, 4.0223074E17, 4.0377428E17, 4.0377428E17, 4.0377428E17, 4.2784241E17, 4.2784241E17, 4.2784241E17, 4.3092949E17, 4.3092949E17, 4.8138105E17, 4.8138105E17, 4.8940377E17, 4.8940377E17, 4.8940377E17, 5.1810251E17, 5.1810251E17, 5.1810251E17, 5.6284668E17, 5.6284668E17, 5.6855408E17, 5.6855408E17, 5.6855408E17, 5.7812033E17, 5.7812033E17, 6.1021117E17, 6.1021117E17, 6.1021117E17, 6.1900565E17, 6.1900565E17, 6.1900565E17, 6.4538909E17, 6.4538909E17, 6.4538909E17, 6.5001970E17, 6.5001970E17, 6.5001970E17, 6.6529335E17, 6.6529335E17, 6.6529335E17, 6.8936148E17, 6.8936148E17, 6.8936148E17, 6.9244856E17, 6.9244856E17, 7.1235282E17, 7.1235282E17, 7.5092284E17, 7.5092284E17, 7.5092284E17, 7.7962158E17, 7.7962158E17, 7.7962158E17 };
    vec2_0_100 = { 0.0000000E00, 0.0000000E00, 2.0984634E-8, 2.0984634E-8, 0.0000000E00, 0.0000000E00, 1.6269501E-9, 1.6269501E-9, 1.6269501E-9, 9.2661336E-9, 9.2661336E-9, 9.2661336E-9, 2.7025149E-9, 2.7025149E-9, 2.7025149E-9, 9.9954153E-9, 9.9954153E-9, 6.8145473E-9, 6.8145473E-9, 6.8145473E-9, 0.0000000E00, 0.0000000E00, 1.8864427E-9, 1.8864427E-9, 1.8864427E-9, 1.3871523E-8, 2.7743046E-8, 0.0000000E00, 5.8377728E-34, 2.5628650E-8, 5.1257300E-8, 4.7013823E-9, 4.7013823E-9, 4.7013823E-9, 6.1459917E-9, 6.1459917E-9, 0.0000000E00, 5.0346293E-34, 7.2132349E-10, 7.2132349E-10, 7.2132349E-10, 4.2571272E-9, 4.2571272E-9, 4.2571272E-9, 1.3528994E-9, 1.3528994E-9, 1.3528994E-9, 4.1937651E-8, 2.0968825E-8, 1.3071164E-9, 1.3071164E-9, 1.3071164E-9, 3.7675371E-9, 3.7675371E-9, 3.7675371E-9, 0.0000000E00, 0.0000000E00, 0.0000000E00, 3.9700453E-34, 1.1414408E-9, 1.1414408E-9, 1.1414408E-9, 3.2845096E-9, 3.2845096E-9, 3.2845096E-9, 4.1161251E-9, 4.1161251E-9, 3.0635112E-9, 3.0635112E-9, 3.0635112E-9, 1.6131881E-8, 3.2263761E-8, 9.6700093E-10, 9.6700093E-10, 9.6700093E-10, 5.7373987E-9, 5.7373987E-9, 5.7373987E-9, 1.8503873E-9, 1.8503873E-9, 1.8503873E-9, 9.1993184E-10, 9.1993184E-10, 9.1993184E-10, 9.0294818E-10, 9.0294818E-10, 9.0294818E-10, 5.2637080E-9, 5.2637080E-9, 5.2637080E-9, 3.0040355E-34, 0.0000000E00, 0.0000000E00, 0.0000000E00, 1.6342000E-9, 1.6342000E-9, 1.6342000E-9, 2.3742273E-9, 2.3742273E-9, 2.3742273E-9 };
    vec1_100_200 = {7.845572E17, 7.845572E17, 7.845572E17, 7.933517E17, 7.933517E17, 7.933517E17, 7.995258E17, 7.995258E17, 7.995258E17, 8.197351E17, 8.197351E17, 8.197351E17, 8.243657E17, 8.243657E17, 8.300732E17, 8.300732E17, 8.300732E17, 8.637075E17, 8.637075E17, 8.637075E17, 8.794479E17, 8.794479E17, 9.115388E17, 9.115388E17, 9.115388E17, 9.252689E17, 9.252689E17, 9.252689E17, 9.268124E17, 9.268124E17, 9.268124E17, 9.666210E17, 1.041141E18, 1.061045E18, 1.064132E18, 1.125227E18, 1.133249E18, 1.140967E18, 1.151305E18, 1.212400E18, 1.215487E18, 1.228140E18, 1.266405E18, 1.347404E18, 1.353578E18, 1.429946E18, 1.486267E18, 1.564179E18, 1.573440E18, 1.656287E18, 1.664005E18, 1.723718E18, 1.810891E18, 1.909784E18, 1.957615E18, 1.978758E18, 2.087217E18, 2.096478E18, 2.107121E18, 2.214504E18, 2.251387E18, 2.368640E18, 2.393480E18, 2.399188E18, 2.458900E18, 2.508275E18, 2.541605E18, 2.670273E18, 2.702364E18, 2.710081E18, 2.742172E18, 2.763315E18, 2.849411E18, 3.003691E18, 3.018965E18, 3.035944E18, 3.174807E18, 3.358091E18, 3.373526E18, 3.517792E18, 3.701076E18, 3.866484E18, 3.878365E18, 4.077390E18, 4.082020E18, 4.128003E18, 4.139884E18, 4.158083E18, 4.227057E18, 4.256528E18, 4.488577E18, 4.491340E18, 4.569575E18, 4.605220E18, 4.652280E18, 4.886015E18, 4.912560E18, 5.000972E18, 5.065620E18, 5.326349E18 };
    vec2_100_200 = {
6.297022E-09, 6.297022E-09, 6.297022E-09, 1.339646E-34, 1.339646E-34, 5.358582E-34, 2.323132E-09, 2.323132E-09, 2.323132E-09, 1.212320E-08, 1.212320E-08, 1.212320E-08, 2.412679E-08, 1.206339E-08, 4.496380E-09, 4.496380E-09, 4.496380E-09, 1.243061E-34, 1.243061E-34, 4.972243E-34, 2.846865E-09, 2.846865E-09, 6.888381E-10, 6.888381E-10, 6.888381E-10, 1.087050E-08, 1.087050E-08, 1.087050E-08, 1.356717E-09, 1.356717E-09, 1.356717E-09, 1.956592E-09, 2.543751E-08, 5.364514E-09, 5.565162E-08, 7.725589E-34, 1.673775E-09, 3.655870E-08, 3.694822E-08, 9.362360E-09, 5.348311E-34, 1.539183E-09, 1.545230E-08, 3.056441E-08, 3.196972E-08, 7.623414E-09, 2.291030E-08, 7.011805E-09, 2.603671E-08, 1.088589E-09, 3.552239E-08, 1.087080E-08, 6.487014E-08, 1.427322E-08, 3.022106E-08, 3.163363E-08, 4.772664E-09, 4.741879E-09, 3.378626E-08, 2.180442E-09, 2.563106E-08, 1.429256E-08, 2.064814E-08, 7.568139E-09, 1.333231E-08, 2.383841E-08, 1.556477E-08, 8.606455E-09, 5.268695E-10, 2.407434E-08, 1.530623E-09, 1.204005E-08, 2.170529E-08, 8.701920E-10, 8.619146E-10, 4.876281E-08, 2.734429E-08, 6.958541E-10, 3.074991E-08, 3.923037E-08, 2.634129E-08, 2.579241E-10, 2.423347E-08, 3.647288E-09, 7.723618E-09, 4.426861E-10, 2.518253E-35, 1.000496E-08, 8.339303E-10, 2.723976E-08, 1.079050E-09, 1.234038E-08, 3.717676E-09, 1.834158E-09, 2.385373E-08, 8.344680E-34, 5.752215E-09, 1.009280E-08, 2.106820E-08, 6.739287E-10 };
   

    vec1_200_300 = { 5.327139E+18, 5.335610E+18, 5.354133E+18, 5.414312E+18, 5.496550E+18, 5.785529E+18, 5.798936E+18, 5.845242E+18, 5.945068E+18, 6.249159E+18, 6.250236E+18, 6.281107E+18, 6.293760E+18, 6.411175E+18, 6.743194E+18, 6.759868E+18, 6.894872E+18, 7.243079E+18, 7.243564E+18, 7.396157E+18, 7.766117E+18, 7.767984E+18, 7.773368E+18, 7.789270E+18, 7.790508E+18, 7.805944E+18, 7.915031E+18, 8.326953E+18, 8.327420E+18, 8.428485E+18, 8.451495E+18, 8.876537E+18, 8.886713E+18, 8.896298E+18, 8.905235E+18, 8.923758E+18, 9.005547E+18, 9.457439E+18, 9.549404E+18, 9.575483E+18, 9.577188E+18, 1.006148E+19, 1.009436E+19, 1.016642E+19, 1.068109E+19, 1.068265E+19, 1.077324E+19, 1.131478E+19, 1.131754E+19, 1.139765E+19, 1.197358E+19, 1.197481E+19, 1.199025E+19, 1.203964E+19, 1.264985E+19, 1.269363E+19, 1.269923E+19, 1.335106E+19, 1.336958E+19, 1.337640E+19, 1.405216E+19, 1.406573E+19, 1.407117E+19, 1.478352E+19, 1.554352E+19, 1.555573E+19, 1.556808E+19, 1.560063E+19, 1.626099E+19, 1.708591E+19, 1.711328E+19, 1.780882E+19, 1.870184E+19, 1.870598E+19, 1.880963E+19, 1.888372E+19, 1.895548E+19, 1.895781E+19, 1.942700E+19, 2.040281E+19, 2.042586E+19, 2.043480E+19, 2.043742E+19, 2.053247E+19, 2.061117E+19, 2.111554E+19, 2.217406E+19, 2.217826E+19, 2.220710E+19, 2.224772E+19, 2.231629E+19, 2.233489E+19, 2.287444E+19, 2.403246E+19, 2.404001E+19, 2.408713E+19, 2.412896E+19, 2.470369E+19, 2.594474E+19, 2.595960E+19 };
    vec2_200_300 = { 
1.796357E-09, 4.777753E-09, 3.146486E-09, 4.047787E-09, 1.938353E-08, 5.235747E-10, 3.275358E-09, 9.004993E-09, 1.476868E-08, 2.171056E-09, 1.147584E-09, 5.971406E-10, 4.334148E-09, 1.201397E-08, 1.756079E-09, 2.887902E-09, 1.467609E-08, 7.980996E-11, 4.453057E-09, 9.402122E-09, 6.060221E-11, 6.054294E-11, 9.647770E-10, 8.980709E-11, 4.751943E-10, 2.724963E-09, 8.263452E-09, 1.595540E-34, 2.782153E-09, 3.624674E-10, 6.431882E-09, 3.402243E-11, 1.015327E-10, 5.003077E-35, 1.005671E-10, 1.278151E-09, 5.898805E-09, 3.432242E-10, 6.199692E-10, 3.563268E-11, 5.322387E-09, 9.246683E-11, 3.858984E-10, 3.987306E-09, 1.082373E-10, 4.334850E-10, 3.042798E-09, 1.571707E-10, 3.835691E-10, 2.374079E-09, 7.053900E-12, 4.724752E-35, 2.080842E-10, 1.757038E-09, 6.497586E-11, 3.936179E-11, 1.533216E-09, 1.063849E-11, 5.270488E-12, 1.163429E-09, 4.006687E-11, 1.243704E-12, 7.846102E-10, 6.588299E-10, 9.596009E-12, 2.980289E-12, 1.059923E-11, 3.722771E-10, 3.579094E-10, 2.417814E-11, 2.177211E-10, 1.643090E-10, 7.680238E-13, 2.567758E-11, 9.866601E-12, 7.926681E-12, 5.656569E-13, 5.909507E-11, 9.376590E-11, 6.728057E-13, 2.106145E-12, 1.104110E-13, 1.124970E-11, 2.994412E-12, 3.199452E-11, 4.634317E-11, 3.641339E-37, 9.496843E-13, 3.700059E-13, 1.500627E-12, 3.430356E-13, 1.643785E-11, 1.875971E-11, 1.558081E-13, 5.286100E-13, 1.127791E-12, 7.573111E-12, 9.766235E-12, 7.781698E-15, 1.259475E-13 };








    WHEN( "smal value for emax" ){
      emax = 0.05;
      THEN ( "loops ranges are small (~4)" ){
        nbragg = sigcoh( e, enext, s, nl, lat, temp, emax, natom, fl, p, k, vec1, vec2 );
        REQUIRE( nbragg == 132 );

        for ( size_t i = 0; i < 100; ++i ){ 
          REQUIRE( vec1_0_100[i] == Approx( vec1[i] ).epsilon(1e-6) );
          REQUIRE( vec2_0_100[i] == Approx( vec2[i] ).epsilon(1e-6) );
        }

        for ( int i = 100; i < nbragg-1; ++i ){ 
          REQUIRE( vec1_100_200[i-100] == Approx( vec1[i] ).epsilon(1e-6) );
          REQUIRE( vec2_100_200[i-100] == Approx( vec2[i] ).epsilon(1e-6) );
        }

        for ( size_t i = nbragg; i < vec1.size(); ++i ){ 
          REQUIRE( 0.0 == Approx( vec1[i] ).epsilon(1e-6) );
          REQUIRE( 0.0 == Approx( vec2[i] ).epsilon(1e-6) );
        }

      } // THEN 
    } // WHEN

  
    WHEN( "Medium value for emax" ){
      emax = 1.2;
      THEN ( "loops ranges are moderate (~17)" ){
       auto nbragg = sigcoh( e, enext, s, nl, lat, temp, emax, natom, fl, p, k, vec1, vec2 );
        REQUIRE( nbragg == 294 );

        for ( size_t i = 0; i < 100; ++i ){ 
          REQUIRE( vec1_0_100[i] == Approx( vec1[i] ).epsilon(1e-6) );
          REQUIRE( vec2_0_100[i] == Approx( vec2[i] ).epsilon(1e-6) );
        }

        for ( size_t i = 100; i < 200; ++i ){ 
          REQUIRE( vec1_100_200[i-100] == Approx( vec1[i] ).epsilon(1e-6) );
          REQUIRE( vec2_100_200[i-100] == Approx( vec2[i] ).epsilon(1e-6) );
        }

        for ( int i = 200; i < nbragg-1; ++i ){ 
          REQUIRE( vec1_200_300[i-200] == Approx( vec1[i] ).epsilon(1e-6) );
          REQUIRE( vec2_200_300[i-200] == Approx( vec2[i] ).epsilon(1e-6) );
        }

        for ( size_t i = nbragg; i < vec1.size(); ++i ){ 
          REQUIRE( 0.0 == Approx( vec1[i] ).epsilon(1e-6) );
          REQUIRE( 0.0 == Approx( vec2[i] ).epsilon(1e-6) );
        }
  
      } // THEN 
    } // WHEN
    WHEN( "large value for emax" ){
      emax = 5.5;
      THEN ( "loops ranges are large (~35)" ){
       auto nbragg = sigcoh( e, enext, s, nl, lat, temp, emax, natom, fl, p, k, vec1, vec2 );
       REQUIRE( nbragg == 435 );
  
        for ( size_t i = 0; i < 100; ++i ){ 
          REQUIRE( vec1_0_100[i] == Approx( vec1[i] ).epsilon(1e-6) );
          REQUIRE( vec2_0_100[i] == Approx( vec2[i] ).epsilon(1e-6) );
        }

        for ( size_t i = 100; i < 200; ++i ){ 
          REQUIRE( vec1_100_200[i-100] == Approx( vec1[i] ).epsilon(1e-6) );
          REQUIRE( vec2_100_200[i-100] == Approx( vec2[i] ).epsilon(1e-6) );
        }

       for ( int i = 200; i < 300; ++i ){ 
          REQUIRE( vec1_200_300[i-200] == Approx( vec1[i] ).epsilon(1e-6) );
          REQUIRE( vec2_200_300[i-200] == Approx( vec2[i] ).epsilon(1e-6) );
        }

        for ( size_t i = nbragg; i < vec1.size(); ++i ){ 
          REQUIRE( 0.0 == Approx( vec1[i] ).epsilon(1e-6) );
          REQUIRE( 0.0 == Approx( vec2[i] ).epsilon(1e-6) );
        }
  


  
      } // THEN 
    } // WHEN
    /*
        */
  } // GIVEN

} // TEST CASE
