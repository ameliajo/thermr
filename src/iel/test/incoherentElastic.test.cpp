#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include "iel/incoherentElastic.h"
#include <range/v3/all.hpp>
#include "generalTools/testing.h"

TEST_CASE( "get equiprobable scattering angles" ){
  GIVEN( "an initial energy (which is also the final energy here)" ){
    double E = 1e-2, debyeWaller = 10.0, sigma_b = 2.5, xs;
    int numAtoms = 1, numAngles = 8;
    std::vector<double> cosines ( numAngles, 0.0 );
    std::vector<double> energies {1e-5, 1e-4, 1e-3, 1e-2, 1e-1};
    std::vector<std::vector<double>> correctCosinesVec 
    {
      {-0.8749771,-0.6249396,-0.3749146,-0.1249021, 0.1250979, 0.3750854, 0.6250604, 0.8750229 },
      {-0.8747706,-0.6243953,-0.3741454,-0.1240207, 0.1259790, 0.3758537, 0.6256037, 0.8752289 },
      {-0.8726826,-0.6189088,-0.3664165,-0.1151928, 0.1347749, 0.3834992, 0.6309923, 0.8772663 },
      {-0.8493610,-0.5596117,-0.2857415,-2.60998E-2, 0.2207195, 0.4559238, 0.6805574, 0.8955298 },
      {-0.3270719, 0.1933194, 0.4351759, 0.5967253, 0.7184233, 0.8161444, 0.8978172, 0.9679844 },
    };
    for ( size_t i = 0; i < energies.size(); ++i ){
      getIncohElasticDataSingleEnergy(energies[i],debyeWaller,cosines);
      REQUIRE( ranges::equal( cosines, correctCosinesVec[i], equal ) );
    }
  } // GIVEN
} // TEST CASE



TEST_CASE( "incoherent elastic average scattering xs" ){
    double debyeWaller = 10.0, sigma_b = 2.5, xs;
    int numAtoms = 1;

    std::vector<double> 
      energyVec { 1e-5, 1e-4, 1e-3, 1e-2, 1e-1 },
      correctXS { 2.4995001, 2.4950067, 2.4506601, 2.0604997, 0.6135527 };

    for ( size_t i = 0; i < energyVec.size(); ++i ){
      REQUIRE( correctXS[i] == Approx(getIncohElasticXS(sigma_b,debyeWaller,
                                      energyVec[i],numAtoms)).epsilon(1e-6) );
    }
    

    debyeWaller = 34.957;
    sigma_b = 162.88;
    numAtoms = 1;

    energyVec = { 0.00001, 0.0000178, 0.000025, 0.000035, 0.00005, 0.00007, 
      0.0001, 0.000126, 0.00016, 0.0002, 0.000253, 0.000297, 0.00035, 0.00042, 
      0.000506, 0.000615, 0.00075, 0.00087, 0.001012, 0.00123, 0.0015, 0.0018, 
      0.00203, 0.002277, 0.0026, 0.003, 0.0035, 0.004048, 0.0045, 0.005, 0.0056, 
      0.006325, 0.0072, 0.0081, 0.009108, 0.01, 0.01063, 0.0115, 0.012397, 
      0.0133, 0.01417, 0.015, 0.016192, 0.0182, 0.0199, 0.020493, 0.0215, 0.0228, 
      0.0253, 0.028, 0.030613, 0.0338, 0.0365, 0.0395, 0.042757, 0.0465, 0.05, 
      0.056925, 0.0625, 0.069, 0.075, 0.081972, 0.09, 0.096, 0.1035, 0.111573, 
      0.12, 0.128, 0.1355, 0.145728, 0.16, 0.172, 0.184437, 0.2, 0.2277, 
      0.2510392, 0.2705304, 0.2907501, 0.3011332, 0.3206421, 0.3576813, 0.39, 
      0.4170351, 0.45, 0.5032575, 0.56, 0.625, 0.7 };

    correctXS = { 162.766177, 162.677469, 162.595642, 162.482084, 162.311945, 
      162.085463, 161.746530, 161.453553, 161.071497, 160.623565, 160.032615, 
      159.544222, 158.958574, 158.189480, 157.251404, 156.073138, 154.630197, 
      153.362606, 151.880641, 149.642888, 146.932757, 143.999042, 141.803628, 
      139.496539, 136.556492, 133.032434, 128.801762, 124.376802, 120.885466, 
      117.181960, 112.946452, 108.114287, 102.669377, 97.475420, 92.104811, 
      87.711433, 84.795662, 81.005013, 77.362184, 73.945169, 70.871378, 
      68.123109, 64.464103, 58.980092, 54.913544, 53.604411, 51.499027, 
      48.982806, 44.702911, 40.772715, 37.524707, 34.157953, 31.720115, 
      29.372364, 27.174729, 25.013159, 23.275766, 20.455913, 18.634770, 
      16.880935, 15.531029, 14.210309, 12.942841, 12.133937, 11.254677, 
      10.440335, 9.707164, 9.100466, 8.596750, 7.993383, 7.280373, 6.772440, 
      6.315759, 5.824298, 5.115765, 4.640151, 4.305837, 4.006395, 3.868254, 
      3.632897, 3.256697, 2.986820, 2.793193, 2.588577, 2.314639, 2.080107, 
      1.863775, 1.664085 };

    for ( size_t i = 0; i < energyVec.size(); ++i ){
      REQUIRE( correctXS[i] == Approx(getIncohElasticXS(sigma_b,debyeWaller,
                                      energyVec[i],numAtoms)).epsilon(1e-6) );
    }

} // TEST CASE




TEST_CASE( "get these cross sections on the desired grid" ){
std::vector<double> currentX { 1.0E-5, 1.78E-5, 2.5E-5, 3.5E-5, 5.0E-5, 7.0E-5, 1.0E-4, 1.26E-4, 1.6E-4, 2.0E-4, 2.53E-4, 2.97E-4, 3.5E-4, 4.2E-4, 5.06E-4, 6.15E-4, 7.5E-4, 8.7E-4, 1.012E-3, 1.23E-3, 1.5E-3, 1.8E-3, 2.03E-3, 2.277E-3, 2.6E-3, 3.0E-3, 3.5E-3, 4.048E-3, 4.5E-3, 5.0E-3, 5.6E-3, 6.325E-3, 7.2E-3, 8.1E-3, 9.108E-3, 1.0E-2, 1.063E-2, 1.15E-2, 1.2397E-2, 1.33E-2, 1.417E-2, 1.5E-2, 1.6192E-2, 1.82E-2, 1.99E-2, 2.0493E-2, 2.15E-2, 2.28E-2, 2.53E-2, 2.8E-2, 3.0613E-2, 3.38E-2, 3.65E-2, 3.95E-2, 4.2757E-2, 4.65E-2, 5.0E-2, 5.6925E-2, 6.25E-2, 6.9E-2, 7.5E-2, 8.1972E-2, 9.0E-2, 9.6E-2, 1.035E-1, 1.115730E-1, 1.2E-1, 1.28E-1, 1.355E-1, 1.457280E-1, 1.6E-1, 1.72E-1, 1.844370E-1, 2.0E-1, 2.277E-1, 2.510392E-1, 2.705304E-1, 2.907501E-1, 3.011332E-1, 3.206421E-1, 3.576813E-1, 3.9E-1, 4.170351E-1, 4.5E-1, 5.032575E-1, 5.6E-1, 6.25E-1, 7.0E-1 },

  currentY { 162.766177, 162.677469, 162.595642, 162.482084, 162.311945, 162.085463, 161.746530, 161.453553, 161.071497, 160.623565, 160.032615, 159.544222, 158.958574, 158.189480, 157.251404, 156.073138, 154.630197, 153.362606, 151.880641, 149.642888, 146.932757, 143.999042, 141.803628, 139.496539, 136.556492, 133.032434, 128.801762, 124.376802, 120.885466, 117.181960, 112.946452, 108.114287, 102.669377, 97.475420, 92.104811, 87.711433, 84.795662, 81.005013, 77.362184, 73.945169, 70.871378, 68.123109, 64.464103, 58.980092, 54.913544, 53.604411, 51.499027, 48.982806, 44.702911, 40.772715, 37.524707, 34.157953, 31.720115, 29.372364, 27.174729, 25.013159, 23.275766, 20.455913, 18.634770, 16.880935, 15.531029, 14.210309, 12.942841, 12.133937, 11.254677, 10.440335, 9.707164, 9.100466, 8.596750, 7.993383, 7.280373, 6.772440, 6.315759, 5.824298, 5.115765, 4.640151, 4.305837, 4.006395, 3.868254, 3.632897, 3.256697, 2.986820, 2.793193, 2.588577, 2.314639, 2.080107, 1.863775, 1.664085 },
    desiredX = {1.E-5, 1.0625E-5, 1.125E-5, 1.1875E-5, 1.25E-5, 1.375E-5, 
    1.5E-5, 1.625E-5, 1.75E-5, 1.875E-5, 2.E-5, 2.1875E-5, 2.375E-5, 2.5625E-5, 
    2.75E-5, 2.9375E-5, 3.125E-5, 3.3125E-5, 3.5E-5, 3.875E-5, 4.25E-5, 4.625E-5, 
    5.E-5, 5.3125E-5, 5.625E-5, 5.9375E-5, 6.25E-5, 6.875E-5, 7.5E-5, 8.125E-5, 
    8.75E-5, 9.375E-5, 1.E-4, 1.0625E-4, 1.125E-4, 1.1875E-4, 1.25E-4, 1.375E-4, 
    1.5E-4, 1.625E-4, 1.75E-4, 1.875E-4, 2.E-4, 2.1875E-4, 2.375E-4, 2.5625E-4, 
    2.75E-4, 2.9375E-4, 3.125E-4, 3.3125E-4, 3.5E-4, 3.875E-4, 4.25E-4, 4.625E-4, 
    5.E-4, 5.3125E-4, 5.625E-4, 5.9375E-4, 6.25E-4, 6.875E-4, 7.5E-4, 8.125E-4, 
    8.75E-4, 9.375E-4, 1.E-3, 1.0625E-3, 1.125E-3, 1.1875E-3, 1.25E-3, 1.375E-3, 
    1.5E-3, 1.625E-3, 1.75E-3, 1.875E-3, 2.E-3, 2.1875E-3, 2.375E-3, 2.5625E-3, 
    2.75E-3, 2.9375E-3, 3.125E-3, 3.3125E-3, 3.5E-3, 3.875E-3, 4.25E-3, 4.625E-3, 
    5.E-3, 5.3125E-3, 5.625E-3, 5.9375E-3, 6.25E-3, 6.875E-3, 7.5E-3, 8.125E-3, 
    8.75E-3, 9.375E-3, 1.E-2, 1.0625E-2, 1.125E-2, 1.1875E-2, 1.25E-2, 1.375E-2, 
    1.5E-2, 1.625E-2, 1.75E-2, 1.875E-2, 2.E-2, 2.1325E-2, 2.265E-2, 2.3975E-2, 
    2.53E-2, 2.684375E-2, 2.83875E-2, 3.1475E-2, 3.45625E-2, 3.765E-2, 4.07375E-2, 
    4.3825E-2, 4.69125E-2, 5.E-2, 5.3125E-2, 5.625E-2, 5.9375E-2, 6.25E-2, 
    6.875E-2, 7.5E-2, 8.125E-2, 8.75E-2, 9.375E-2, 1.E-1, 1.0625E-1, 1.125E-1, 
    1.1875E-1, 1.25E-1, 1.375E-1, 1.5E-1, 1.625E-1, 1.75E-1, 1.875E-1, 2.E-1, 
    2.1875E-1, 2.375E-1, 2.5625E-1, 2.75E-1, 2.9375E-1, 3.125E-1, 3.3125E-1, 
    3.5E-1, 3.875E-1, 4.25E-1, 5.E-1, 6.25E-1, 6.250062E-1 };

  std::vector<double> desiredY = getOnRightGrid( currentX, currentY, desiredX );

  std::vector<double> 
    correctY = {162.766177, 162.759067, 162.751957, 162.744847, 162.737738, 
    162.723521, 162.709305, 162.695092, 162.680880, 162.666669, 162.652460, 
    162.631150, 162.609844, 162.588541, 162.567242, 162.545947, 162.524656, 
    162.503368, 162.482084, 162.439527, 162.396985, 162.354457, 162.311945, 
    162.276529, 162.241124, 162.205729, 162.170344, 162.099606, 162.028908, 
    161.958252, 161.887637, 161.817063, 161.746530, 161.676038, 161.605587, 
    161.535177, 161.464808, 161.324193, 161.183741, 161.043453, 160.903328, 
    160.763365, 160.623565, 160.414170, 160.205139, 159.996472, 159.788169, 
    159.580228, 159.372650, 159.165432, 158.958574, 158.545941, 158.134737, 
    157.724966, 157.316610, 156.977405, 156.639176, 156.301918, 155.965640, 
    155.296000, 154.630197, 153.968253, 153.310098, 152.655756, 152.005135, 
    151.358321, 150.715176, 150.075672, 149.439871, 148.179229, 146.932757, 
    145.700727, 144.482481, 143.278154, 142.087410, 140.326620, 138.595602, 
    136.893502, 135.220437, 133.574893, 131.957474, 130.366649, 128.801762, 
    125.750991, 122.799689, 119.944767, 117.181960, 114.949242, 112.774988, 
    110.660843, 108.600690, 104.646285, 100.896258, 97.337012, 93.962913, 
    90.757177, 87.711433, 84.818238, 82.068320, 79.451961, 76.960760, 72.330604, 
    68.123109, 64.295360, 60.808142, 57.613568, 54.689178, 51.855113, 49.262989, 
    46.894511, 44.702911, 42.384357, 40.263298, 36.561831, 33.438305, 30.783476, 
    28.502652, 26.525975, 24.797498, 23.275766, 21.926759, 20.703591, 19.619549, 
    18.634770, 16.942785, 15.531029, 14.337587, 13.314822, 12.426287, 11.650289, 
    10.964974, 10.354958, 9.809819, 9.319582, 8.472700, 7.767551, 7.169103, 
    6.657084, 6.213723, 5.824298, 5.327597, 4.906062, 4.546385, 4.236182, 
    3.965564, 3.728002, 3.517853, 3.328842, 3.006203, 2.741299, 2.329899, 
    1.863775, 0.0 };
     
  REQUIRE( ranges::equal(desiredY, correctY, equal) );





  WHEN( "generate the inputs on our own" ){
    double sigma_b = 162.88, debyeWaller = 34.957;
    int numAtoms = 1;
    desiredY = getIncohElasticXSGrid_withInterpolation( sigma_b, debyeWaller, numAtoms, currentX, desiredX );
    REQUIRE( ranges::equal(desiredY, correctY, equal) );

    correctY = {4.998001, 4.997876, 4.997751, 4.997626, 4.997501, 4.997251, 4.997001, 4.996751, 4.996502, 4.996252, 4.996002, 4.995628, 4.995253, 4.994879, 4.994504, 4.994130, 4.993755, 4.993381, 4.993007, 4.992258, 4.991510, 4.990761, 4.990013, 4.989390, 4.988767, 4.988144, 4.987521, 4.986275, 4.985030, 4.983785, 4.982541, 4.981297, 4.980053, 4.978810, 4.977567, 4.976325, 4.975083, 4.972601, 4.970120, 4.967640, 4.965163, 4.962687, 4.960212, 4.956504, 4.952799, 4.949098, 4.945401, 4.941708, 4.938018, 4.934331, 4.930649, 4.923295, 4.915955, 4.908630, 4.901320, 4.895239, 4.889169, 4.883108, 4.877058, 4.864987, 4.852956, 4.840964, 4.829013, 4.817101, 4.805228, 4.793395, 4.781601, 4.769846, 4.758129, 4.734813, 4.711648, 4.688638, 4.665778, 4.643068, 4.620507, 4.586943, 4.553708, 4.520798, 4.488212, 4.455940, 4.423988, 4.392344, 4.361005, 4.299246, 4.238675, 4.179269, 4.120999, 4.073303, 4.026356, 3.980169, 3.934697, 3.845926, 3.759922, 3.676574, 3.595837, 3.517568, 3.441694, 3.368148, 3.296844, 3.227693, 3.160609, 3.032415, 2.911691, 2.797969, 2.690802, 2.589601, 2.494076, 2.398626, 2.308712, 2.224073, 2.143958, 2.056533, 1.974520, 1.825758, 1.694526, 1.578476, 1.475381, 1.383444, 1.301102, 1.227105, 1.160164, 1.098876, 1.043754, 0.993262, 0.905398, 0.831268, 0.768123, 0.713744, 0.666356, 0.624878, 0.588199, 0.555521, 0.526302, 0.500015, 0.454591, 0.416762, 0.384654, 0.357182, 0.333394, 0.312500, 0.285850, 0.263232, 0.243934, 0.227290, 0.212770, 0.200024, 0.188749, 0.178607, 0.161296, 0.147083, 0.125010, 0.100000, 0.000000};
    sigma_b = 10.0;
    debyeWaller = 20.0;
    numAtoms = 2;
    desiredY = getIncohElasticXSGrid_withInterpolation( sigma_b, debyeWaller, numAtoms, currentX, desiredX );
    REQUIRE( ranges::equal(desiredY, correctY, equal) );



        
  } // WHEn


} // TEST CASE
















